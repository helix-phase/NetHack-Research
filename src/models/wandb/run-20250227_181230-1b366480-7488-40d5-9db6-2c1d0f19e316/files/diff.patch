diff --git a/.gitignore b/.gitignore
index 6114889..951cf0a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -85,6 +85,9 @@ target/
 # exclude katakomba from source control
 /katakomba/
 
+# exclude wandb folder from source control
+/reports/wandb/
+
 # Mac OS-specific storage files
 .DS_Store
 
diff --git a/notebooks/1-15-2024_NLD-AA.ipynb b/notebooks/1-15-2024_NLD-AA.ipynb
index 62aa239..e5152b9 100644
--- a/notebooks/1-15-2024_NLD-AA.ipynb
+++ b/notebooks/1-15-2024_NLD-AA.ipynb
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2025-01-16T19:48:52.763367Z",
-     "start_time": "2025-01-16T19:48:52.758995Z"
+     "end_time": "2025-02-19T19:20:30.968155Z",
+     "start_time": "2025-02-19T19:20:30.374307Z"
     }
    },
    "source": [
@@ -16,13 +16,13 @@
     "from nle.dataset import db"
    ],
    "outputs": [],
-   "execution_count": 12
+   "execution_count": 1
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-16T19:48:53.289701Z",
-     "start_time": "2025-01-16T19:48:53.286649Z"
+     "end_time": "2025-01-24T01:22:44.508049Z",
+     "start_time": "2025-01-24T01:22:44.504456Z"
     }
    },
    "cell_type": "code",
@@ -33,13 +33,13 @@
    ],
    "id": "38495cdb3d5bd38b",
    "outputs": [],
-   "execution_count": 13
+   "execution_count": 3
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-16T19:48:53.846017Z",
-     "start_time": "2025-01-16T19:48:53.841382Z"
+     "end_time": "2025-01-24T01:22:44.928286Z",
+     "start_time": "2025-01-24T01:22:44.925036Z"
     }
    },
    "cell_type": "code",
@@ -51,13 +51,13 @@
    ],
    "id": "fc6bd786a80b6c9e",
    "outputs": [],
-   "execution_count": 14
+   "execution_count": 4
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-16T19:48:54.370015Z",
-     "start_time": "2025-01-16T19:48:54.361564Z"
+     "end_time": "2025-01-24T01:22:45.570631Z",
+     "start_time": "2025-01-24T01:22:45.562527Z"
     }
    },
    "cell_type": "code",
@@ -78,13 +78,13 @@
      ]
     }
    ],
-   "execution_count": 15
+   "execution_count": 5
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-16T19:48:55.688698Z",
-     "start_time": "2025-01-16T19:48:54.930446Z"
+     "end_time": "2025-01-24T01:22:47.097198Z",
+     "start_time": "2025-01-24T01:22:46.322121Z"
     }
    },
    "cell_type": "code",
@@ -97,711 +97,28 @@
     ")\n",
     "\n",
     "minibatch = next(iter(taster))\n",
-    "minibatch.keys()\n",
-    "print(\n",
-    "  minibatch[\"tty_chars\"],  # [batch_size, seq_len + 1, 80, 24]\n",
-    "  minibatch[\"tty_colors\"], # [batch_size, seq_len + 1, 80, 24]\n",
-    "  minibatch[\"tty_cursor\"], # [batch_size, seq_len + 1, 2]\n",
-    "  minibatch[\"keypresses\"],    # [batch_size, seq_len + 1]\n",
-    "  minibatch[\"scores\"],    # [batch_size, seq_len + 1]\n",
-    "  minibatch[\"done\"]       # [batch_size, seq_len + 1]\n",
-    ")"
-   ],
-   "id": "ca457a92d0f758b",
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "[[[[ 83  97 108 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ... 115  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 83 104 111 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]]\n",
-      "\n",
-      "\n",
-      " [[[ 72 101 108 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  48  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  48  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  48  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  48  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  48  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  48  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]]\n",
-      "\n",
-      "\n",
-      " [[[ 72 101 108 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  58  48  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  58  48  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  58  48  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  58  48  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 68 105 115 ...  32  32  32]\n",
-      "   [ 32  45  45 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32 115 ...  32  32  32]\n",
-      "   [ 83 112 101 ...  32  32  32]\n",
-      "   [ 32  32 115 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]]]\n",
-      "\n",
-      "\n",
-      " ...\n",
-      "\n",
-      "\n",
-      " [[[ 65 108 111 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]]\n",
-      "\n",
-      "\n",
-      " [[[ 86 101 108 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ... 115  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 83 104 111 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]]\n",
-      "\n",
-      "\n",
-      " [[[ 72 101 108 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]\n",
-      "\n",
-      "  [[ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   ...\n",
-      "   [ 32  32  32 ...  32  32  32]\n",
-      "   [ 65 103 101 ...  32  32  32]\n",
-      "   [ 68 108 118 ...  32  32  32]]]] [[[[ 7  7  7 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  7  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 7  7  7 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]]\n",
-      "\n",
-      "\n",
-      " [[[ 7  7  7 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]]\n",
-      "\n",
-      "\n",
-      " [[[ 7  7  7 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  7  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  7  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  7  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  7  7  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 0  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  7 ...  0  0  0]\n",
-      "   [23 23 23 ...  0  0  0]\n",
-      "   [ 0  0  7 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]]]\n",
-      "\n",
-      "\n",
-      " ...\n",
-      "\n",
-      "\n",
-      " [[[ 7  7  7 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]]\n",
-      "\n",
-      "\n",
-      " [[[ 7  7  7 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  7  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 7  7  7 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]]\n",
-      "\n",
-      "\n",
-      " [[[ 7  7  7 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]\n",
-      "\n",
-      "  [[ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   ...\n",
-      "   [ 0  0  0 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]\n",
-      "   [ 7  7  7 ...  0  0  0]]]] [[[ 6 15]\n",
-      "  [ 6 15]\n",
-      "  [ 6 15]\n",
-      "  ...\n",
-      "  [ 5 34]\n",
-      "  [ 6 15]\n",
-      "  [ 6 15]]\n",
-      "\n",
-      " [[10  3]\n",
-      "  [10  3]\n",
-      "  [10  3]\n",
-      "  ...\n",
-      "  [10  3]\n",
-      "  [ 4 49]\n",
-      "  [10  3]]\n",
-      "\n",
-      " [[18 72]\n",
-      "  [18 72]\n",
-      "  [18 72]\n",
-      "  ...\n",
-      "  [18 72]\n",
-      "  [23  9]\n",
-      "  [ 5  9]]\n",
-      "\n",
-      " ...\n",
-      "\n",
-      " [[ 5 10]\n",
-      "  [ 5 10]\n",
-      "  [ 5 10]\n",
-      "  ...\n",
-      "  [ 5 10]\n",
-      "  [ 6 49]\n",
-      "  [ 5 10]]\n",
-      "\n",
-      " [[18 53]\n",
-      "  [18 53]\n",
-      "  [18 53]\n",
-      "  ...\n",
-      "  [ 5 34]\n",
-      "  [18 53]\n",
-      "  [18 53]]\n",
-      "\n",
-      " [[ 6 69]\n",
-      "  [ 6 69]\n",
-      "  [ 6 69]\n",
-      "  ...\n",
-      "  [ 6 69]\n",
-      "  [14 48]\n",
-      "  [ 6 69]]] [[27 27 24 ... 98 27 92]\n",
-      " [27 27 24 ... 92 32 58]\n",
-      " [27 27 24 ... 92 32 32]\n",
-      " ...\n",
-      " [27 27 24 ... 92 32 58]\n",
-      " [27 27 24 ... 98 27 92]\n",
-      " [27 27 24 ... 92 32 58]] [[0 0 0 ... 0 0 0]\n",
-      " [0 0 0 ... 0 0 0]\n",
-      " [0 0 0 ... 0 0 0]\n",
-      " ...\n",
-      " [0 0 0 ... 0 0 0]\n",
-      " [0 0 0 ... 0 0 0]\n",
-      " [0 0 0 ... 0 0 0]] [[0 0 0 ... 0 0 0]\n",
-      " [0 0 0 ... 0 0 0]\n",
-      " [0 0 0 ... 0 0 0]\n",
-      " ...\n",
-      " [0 0 0 ... 0 0 0]\n",
-      " [0 0 0 ... 0 0 0]\n",
-      " [0 0 0 ... 0 0 0]]\n"
-     ]
+    "minibatch.keys()"
+   ],
+   "id": "ca457a92d0f758b",
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "dict_keys(['tty_chars', 'tty_colors', 'tty_cursor', 'timestamps', 'done', 'gameids', 'keypresses', 'scores'])"
+      ]
+     },
+     "execution_count": 6,
+     "metadata": {},
+     "output_type": "execute_result"
     }
    ],
-   "execution_count": 16
+   "execution_count": 6
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-16T19:49:14.081444Z",
-     "start_time": "2025-01-16T19:49:13.440886Z"
+     "end_time": "2025-01-24T01:24:50.191506Z",
+     "start_time": "2025-01-24T01:23:46.956463Z"
     }
    },
    "cell_type": "code",
@@ -832,6 +149,44 @@
    ],
    "id": "3a8bec409bd60031",
    "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Downloading dataset: https://huggingface.co/datasets/Howuhh/katakomba/resolve/main/data/data-mon-hum-neu-any.hdf5 to /home/danielolds/.katakomba/datasets\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "Progress: 0.00B [00:00, ?B/s]"
+      ],
+      "application/vnd.jupyter.widget-view+json": {
+       "version_major": 2,
+       "version_minor": 0,
+       "model_id": "ae425417f8e24e43a4a031e838d733ad"
+      },
+      "application/json": {
+       "n": 0,
+       "total": null,
+       "elapsed": 0.003988742828369141,
+       "ncols": null,
+       "nrows": null,
+       "prefix": "Progress",
+       "ascii": false,
+       "unit": "B",
+       "unit_scale": true,
+       "rate": null,
+       "bar_format": null,
+       "postfix": null,
+       "unit_divisor": 1000,
+       "initial": 0,
+       "colour": null
+      }
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
     {
      "data": {
       "text/plain": [
@@ -840,12 +195,12 @@
       "application/vnd.jupyter.widget-view+json": {
        "version_major": 2,
        "version_minor": 0,
-       "model_id": "7c044ece9f5840f29b497b90e02fdc39"
+       "model_id": "d4643728d2b9452aa8e30204d4e81bcf"
       },
       "application/json": {
        "n": 0,
        "total": 683,
-       "elapsed": 0.008320808410644531,
+       "elapsed": 0.014407157897949219,
        "ncols": null,
        "nrows": null,
        "prefix": "Preparing",
@@ -864,7 +219,7 @@
      "output_type": "display_data"
     }
    ],
-   "execution_count": 18
+   "execution_count": 7
   },
   {
    "metadata": {
diff --git a/notebooks/1-2-2024_Expert-Filtering.ipynb b/notebooks/1-2-2024_Expert-Filtering.ipynb
index 6fad88a..cd34d8d 100644
--- a/notebooks/1-2-2024_Expert-Filtering.ipynb
+++ b/notebooks/1-2-2024_Expert-Filtering.ipynb
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2025-01-12T22:42:06.574146Z",
-     "start_time": "2025-01-12T22:42:06.571723Z"
+     "end_time": "2025-02-23T23:07:10.406303Z",
+     "start_time": "2025-02-23T23:07:10.403675Z"
     }
    },
    "source": [
@@ -20,7 +20,12 @@
    "execution_count": 1
   },
   {
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-02-23T23:07:19.717883Z",
+     "start_time": "2025-02-23T23:07:12.032190Z"
+    }
+   },
    "cell_type": "code",
    "source": [
     "# Full dataset\n",
@@ -32,8 +37,679 @@
     "full_df.head(20)"
    ],
    "id": "55f10c2a1846d900",
-   "outputs": [],
-   "execution_count": null
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "       name            starttime              endtime   gameid version  \\\n",
+       "0   Player0  2008-03-22 00:07:04  2008-03-22 00:07:40  3520378   3.4.3   \n",
+       "1   Player0  2008-03-22 00:07:43  2008-03-22 00:09:50  3520380   3.4.3   \n",
+       "2   Player0  2008-03-22 22:12:31  2008-03-22 22:14:21  3520795   3.4.3   \n",
+       "3   Player0  2008-03-23 11:21:37  2008-03-23 19:35:39  3521208   3.4.3   \n",
+       "4   Player0  2008-03-23 19:36:30  2008-03-23 19:37:24  3521210   3.4.3   \n",
+       "5   Player0  2008-03-23 19:39:08  2008-03-23 19:39:58  3521212   3.4.3   \n",
+       "6   Player0  2009-03-03 11:13:36  2009-03-03 11:23:03  3741776   3.4.3   \n",
+       "7   Player0  2009-03-03 11:23:06  2009-07-16 18:52:26  3827696   3.4.3   \n",
+       "8   Player0  2009-10-17 15:49:11  2010-05-15 08:54:13  4040069   3.4.3   \n",
+       "9   Player0  2010-12-07 15:28:43  2011-01-07 20:20:00  4361193   3.4.3   \n",
+       "10  Player0  2011-01-07 20:49:13  2011-03-07 09:02:49  4405666   3.4.3   \n",
+       "11  Player0  2011-10-08 18:24:25  2011-10-08 18:45:42  4716721   3.4.3   \n",
+       "12  Player0  2011-10-08 23:30:59  2011-10-30 19:27:43  4756163   3.4.3   \n",
+       "13  Player0  2011-11-22 17:07:46  2012-05-13 03:54:32  4943035   3.4.3   \n",
+       "14  Player0  2012-05-18 18:51:08  2012-09-22 10:32:18  5473479   3.4.3   \n",
+       "15  Player0  2012-09-22 10:47:17  2012-09-22 10:51:17  5473482   3.4.3   \n",
+       "16  Player0  2012-10-18 18:03:04  2013-03-15 13:56:47  5640832   3.4.3   \n",
+       "17  Player0  2013-03-15 14:08:25  2013-10-25 18:04:09  5880363   3.4.3   \n",
+       "18  Player0  2014-03-03 16:09:21  2015-03-25 15:14:56  6219503   3.4.3   \n",
+       "19  Player0  2015-12-08 10:08:36  2015-12-08 10:09:21  2237469   3.6.0   \n",
+       "\n",
+       "    points  deathdnum  deathlev  maxlvl  hp  ...  gender  align  \\\n",
+       "0        0          0         1       1   0  ...     Fem    Neu   \n",
+       "1        0          0         1       1  -1  ...     Mal    Cha   \n",
+       "2      161          0         3       3  15  ...     Fem    Cha   \n",
+       "3      250          2         6       6 -17  ...     Mal    Cha   \n",
+       "4        3          7        -5       1  16  ...     Fem    Neu   \n",
+       "5        5          7        -5       1  10  ...     Fem    Neu   \n",
+       "6        0          0         1       1   0  ...     Fem    Neu   \n",
+       "7       78          0         2       2   0  ...     Mal    Law   \n",
+       "8        0          0         1       1  14  ...     Mal    Cha   \n",
+       "9        0          0         1       1   0  ...     Mal    Law   \n",
+       "10    9378          2         7      28  10  ...     Fem    Neu   \n",
+       "11       0          0         1       1  15  ...     Mal    Neu   \n",
+       "12      11          0         1       1  15  ...     Fem    Law   \n",
+       "13    6009          0         2      23  42  ...     Fem    Neu   \n",
+       "14    1326          0         2       2  -4  ...     Fem    Law   \n",
+       "15      58          0         1       2   0  ...     Fem    Cha   \n",
+       "16     550          0         1       6  25  ...     Mal    Neu   \n",
+       "17       4          0         1       1   7  ...     Fem    Neu   \n",
+       "18     260          0         6       6   3  ...     Mal    Cha   \n",
+       "19     106          0         2       2   0  ...     Mal    Neu   \n",
+       "\n",
+       "                              death  \\\n",
+       "0          killed by kicking a wall   \n",
+       "1          killed by kicking a wall   \n",
+       "2                              quit   \n",
+       "3   killed by a priestess of Brigit   \n",
+       "4   escaped (in celestial disgrace)   \n",
+       "5                          ascended   \n",
+       "6              killed by a grid bug   \n",
+       "7              killed by a grid bug   \n",
+       "8                              quit   \n",
+       "9          killed by kicking a wall   \n",
+       "10                             quit   \n",
+       "11                             quit   \n",
+       "12                             quit   \n",
+       "13                             quit   \n",
+       "14        killed by a black pudding   \n",
+       "15             killed by a grid bug   \n",
+       "16            killed by a death ray   \n",
+       "17                             quit   \n",
+       "18                             quit   \n",
+       "19             killed by a grid bug   \n",
+       "\n",
+       "                                              conduct  turns  \\\n",
+       "0   foodless,vegan,vegetarian,atheist,weaponless,p...     52   \n",
+       "1   foodless,vegan,vegetarian,atheist,weaponless,p...     10   \n",
+       "2   foodless,vegan,vegetarian,atheist,illiterate,p...    308   \n",
+       "3   foodless,vegan,vegetarian,atheist,weaponless,p...      8   \n",
+       "4   foodless,vegan,vegetarian,atheist,weaponless,p...      1   \n",
+       "5   foodless,vegan,vegetarian,atheist,weaponless,p...      1   \n",
+       "6   foodless,vegan,vegetarian,atheist,pacifist,ill...     50   \n",
+       "7   foodless,vegan,vegetarian,atheist,illiterate,p...    237   \n",
+       "8   foodless,vegan,vegetarian,atheist,weaponless,p...    392   \n",
+       "9   foodless,vegan,vegetarian,atheist,weaponless,p...     11   \n",
+       "10  atheist,weaponless,illiterate,polypileless,pol...    218   \n",
+       "11  foodless,vegan,vegetarian,atheist,weaponless,p...     25   \n",
+       "12  foodless,vegan,vegetarian,atheist,weaponless,p...     50   \n",
+       "13  vegan,vegetarian,atheist,polypileless,polyself...   1977   \n",
+       "14  foodless,vegan,vegetarian,atheist,polypileless...    760   \n",
+       "15  atheist,illiterate,polypileless,polyselfless,w...     79   \n",
+       "16  atheist,weaponless,polyselfless,artifact_wishless   1094   \n",
+       "17  foodless,vegan,vegetarian,atheist,weaponless,i...     25   \n",
+       "18  foodless,vegan,vegetarian,atheist,weaponless,p...     18   \n",
+       "19  foodless,vegan,vegetarian,atheist,weaponless,p...     40   \n",
+       "\n",
+       "                                              achieve realtime gender0 align0  \\\n",
+       "0                                                 NaN       30     Fem    Neu   \n",
+       "1                                                 NaN      125     Mal    Cha   \n",
+       "2                                                 NaN      106     Fem    Cha   \n",
+       "3                                                 NaN      632     Mal    Cha   \n",
+       "4    got_amulet_of_yendor,in_end_game,on_astral_plane       46     Fem    Neu   \n",
+       "5   got_amulet_of_yendor,in_end_game,on_astral_pla...       43     Fem    Neu   \n",
+       "6                                                 NaN       38     Fem    Neu   \n",
+       "7                                                 NaN      133     Mal    Law   \n",
+       "8                                                 NaN      417     Mal    Cha   \n",
+       "9                                                 NaN       97     Mal    Law   \n",
+       "10                                                NaN     4519     Fem    Neu   \n",
+       "11                                                NaN     1128     Mal    Neu   \n",
+       "12                                                NaN     1916     Fem    Law   \n",
+       "13                                                NaN     2788     Fem    Neu   \n",
+       "14                                                NaN     3725     Fem    Law   \n",
+       "15                                                NaN      129     Fem    Cha   \n",
+       "16                                                NaN     7895     Mal    Neu   \n",
+       "17                                                NaN      620     Fem    Neu   \n",
+       "18                                                NaN      622     Mal    Cha   \n",
+       "19                                                NaN       59     Mal    Neu   \n",
+       "\n",
+       "                                                flags  \n",
+       "0   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "1   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "2   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "3   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "4   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "5   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "6   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "7   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "8   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "9                                                 NaN  \n",
+       "10                                        wizard_mode  \n",
+       "11                                        wizard_mode  \n",
+       "12                                        wizard_mode  \n",
+       "13                                        wizard_mode  \n",
+       "14                                        wizard_mode  \n",
+       "15                                        wizard_mode  \n",
+       "16                                        wizard_mode  \n",
+       "17                                        wizard_mode  \n",
+       "18                          wizard_mode,discover_mode  \n",
+       "19                            never_loaded_bones_file  \n",
+       "\n",
+       "[20 rows x 27 columns]"
+      ],
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>name</th>\n",
+       "      <th>starttime</th>\n",
+       "      <th>endtime</th>\n",
+       "      <th>gameid</th>\n",
+       "      <th>version</th>\n",
+       "      <th>points</th>\n",
+       "      <th>deathdnum</th>\n",
+       "      <th>deathlev</th>\n",
+       "      <th>maxlvl</th>\n",
+       "      <th>hp</th>\n",
+       "      <th>...</th>\n",
+       "      <th>gender</th>\n",
+       "      <th>align</th>\n",
+       "      <th>death</th>\n",
+       "      <th>conduct</th>\n",
+       "      <th>turns</th>\n",
+       "      <th>achieve</th>\n",
+       "      <th>realtime</th>\n",
+       "      <th>gender0</th>\n",
+       "      <th>align0</th>\n",
+       "      <th>flags</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2008-03-22 00:07:04</td>\n",
+       "      <td>2008-03-22 00:07:40</td>\n",
+       "      <td>3520378</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>killed by kicking a wall</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>52</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>30</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2008-03-22 00:07:43</td>\n",
+       "      <td>2008-03-22 00:09:50</td>\n",
+       "      <td>3520380</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by kicking a wall</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>10</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>125</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2008-03-22 22:12:31</td>\n",
+       "      <td>2008-03-22 22:14:21</td>\n",
+       "      <td>3520795</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>161</td>\n",
+       "      <td>0</td>\n",
+       "      <td>3</td>\n",
+       "      <td>3</td>\n",
+       "      <td>15</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,illiterate,p...</td>\n",
+       "      <td>308</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>106</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2008-03-23 11:21:37</td>\n",
+       "      <td>2008-03-23 19:35:39</td>\n",
+       "      <td>3521208</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>250</td>\n",
+       "      <td>2</td>\n",
+       "      <td>6</td>\n",
+       "      <td>6</td>\n",
+       "      <td>-17</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a priestess of Brigit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>8</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>632</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2008-03-23 19:36:30</td>\n",
+       "      <td>2008-03-23 19:37:24</td>\n",
+       "      <td>3521210</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>3</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-5</td>\n",
+       "      <td>1</td>\n",
+       "      <td>16</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>escaped (in celestial disgrace)</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>1</td>\n",
+       "      <td>got_amulet_of_yendor,in_end_game,on_astral_plane</td>\n",
+       "      <td>46</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>5</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2008-03-23 19:39:08</td>\n",
+       "      <td>2008-03-23 19:39:58</td>\n",
+       "      <td>3521212</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>5</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-5</td>\n",
+       "      <td>1</td>\n",
+       "      <td>10</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>ascended</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>1</td>\n",
+       "      <td>got_amulet_of_yendor,in_end_game,on_astral_pla...</td>\n",
+       "      <td>43</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>6</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2009-03-03 11:13:36</td>\n",
+       "      <td>2009-03-03 11:23:03</td>\n",
+       "      <td>3741776</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>killed by a grid bug</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,pacifist,ill...</td>\n",
+       "      <td>50</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>38</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>7</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2009-03-03 11:23:06</td>\n",
+       "      <td>2009-07-16 18:52:26</td>\n",
+       "      <td>3827696</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>78</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>killed by a grid bug</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,illiterate,p...</td>\n",
+       "      <td>237</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>133</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>8</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2009-10-17 15:49:11</td>\n",
+       "      <td>2010-05-15 08:54:13</td>\n",
+       "      <td>4040069</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>14</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>392</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>417</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>9</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2010-12-07 15:28:43</td>\n",
+       "      <td>2011-01-07 20:20:00</td>\n",
+       "      <td>4361193</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>killed by kicking a wall</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>11</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>97</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>10</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2011-01-07 20:49:13</td>\n",
+       "      <td>2011-03-07 09:02:49</td>\n",
+       "      <td>4405666</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>9378</td>\n",
+       "      <td>2</td>\n",
+       "      <td>7</td>\n",
+       "      <td>28</td>\n",
+       "      <td>10</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>atheist,weaponless,illiterate,polypileless,pol...</td>\n",
+       "      <td>218</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>4519</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>11</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2011-10-08 18:24:25</td>\n",
+       "      <td>2011-10-08 18:45:42</td>\n",
+       "      <td>4716721</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>15</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>25</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1128</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>12</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2011-10-08 23:30:59</td>\n",
+       "      <td>2011-10-30 19:27:43</td>\n",
+       "      <td>4756163</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>11</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>15</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>50</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1916</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>13</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2011-11-22 17:07:46</td>\n",
+       "      <td>2012-05-13 03:54:32</td>\n",
+       "      <td>4943035</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>6009</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>23</td>\n",
+       "      <td>42</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>vegan,vegetarian,atheist,polypileless,polyself...</td>\n",
+       "      <td>1977</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2788</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>14</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2012-05-18 18:51:08</td>\n",
+       "      <td>2012-09-22 10:32:18</td>\n",
+       "      <td>5473479</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>1326</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>-4</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>killed by a black pudding</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,polypileless...</td>\n",
+       "      <td>760</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>3725</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>15</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2012-09-22 10:47:17</td>\n",
+       "      <td>2012-09-22 10:51:17</td>\n",
+       "      <td>5473482</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>58</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a grid bug</td>\n",
+       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
+       "      <td>79</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>129</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>16</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2012-10-18 18:03:04</td>\n",
+       "      <td>2013-03-15 13:56:47</td>\n",
+       "      <td>5640832</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>550</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>6</td>\n",
+       "      <td>25</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>killed by a death ray</td>\n",
+       "      <td>atheist,weaponless,polyselfless,artifact_wishless</td>\n",
+       "      <td>1094</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>7895</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>17</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2013-03-15 14:08:25</td>\n",
+       "      <td>2013-10-25 18:04:09</td>\n",
+       "      <td>5880363</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>4</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>7</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,i...</td>\n",
+       "      <td>25</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>620</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>18</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2014-03-03 16:09:21</td>\n",
+       "      <td>2015-03-25 15:14:56</td>\n",
+       "      <td>6219503</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>260</td>\n",
+       "      <td>0</td>\n",
+       "      <td>6</td>\n",
+       "      <td>6</td>\n",
+       "      <td>3</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>18</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>622</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>19</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2015-12-08 10:08:36</td>\n",
+       "      <td>2015-12-08 10:09:21</td>\n",
+       "      <td>2237469</td>\n",
+       "      <td>3.6.0</td>\n",
+       "      <td>106</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>killed by a grid bug</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>40</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>59</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>20 rows × 27 columns</p>\n",
+       "</div>"
+      ]
+     },
+     "execution_count": 2,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "execution_count": 2
   },
   {
    "metadata": {
diff --git a/notebooks/1-5-2024_NLE-Agent.ipynb b/notebooks/1-5-2024_NLE-Agent.ipynb
index 14ebf58..0edc6c9 100644
--- a/notebooks/1-5-2024_NLE-Agent.ipynb
+++ b/notebooks/1-5-2024_NLE-Agent.ipynb
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2025-01-06T16:27:31.253280Z",
-     "start_time": "2025-01-06T16:27:31.172155Z"
+     "end_time": "2025-01-27T21:47:37.281396Z",
+     "start_time": "2025-01-27T21:47:37.065410Z"
     }
    },
    "source": [
@@ -21,13 +21,13 @@
     "import seaborn as sns"
    ],
    "outputs": [],
-   "execution_count": 2
+   "execution_count": 1
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-06T16:27:31.787924Z",
-     "start_time": "2025-01-06T16:27:31.784893Z"
+     "end_time": "2025-01-27T21:47:41.532275Z",
+     "start_time": "2025-01-27T21:47:41.528100Z"
     }
    },
    "cell_type": "code",
@@ -40,13 +40,13 @@
    ],
    "id": "21218dd8068866c0",
    "outputs": [],
-   "execution_count": 3
+   "execution_count": 2
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-06T16:27:33.422890Z",
-     "start_time": "2025-01-06T16:27:33.417646Z"
+     "end_time": "2025-01-27T21:47:42.045553Z",
+     "start_time": "2025-01-27T21:47:42.041106Z"
     }
    },
    "cell_type": "code",
@@ -68,13 +68,13 @@
      ]
     }
    ],
-   "execution_count": 4
+   "execution_count": 3
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-06T16:27:34.646902Z",
-     "start_time": "2025-01-06T16:27:34.487935Z"
+     "end_time": "2025-01-27T21:47:44.971785Z",
+     "start_time": "2025-01-27T21:47:44.799802Z"
     }
    },
    "cell_type": "code",
@@ -92,13 +92,13 @@
      ]
     }
    ],
-   "execution_count": 5
+   "execution_count": 4
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-06T16:27:42.793218Z",
-     "start_time": "2025-01-06T16:27:36.212630Z"
+     "end_time": "2025-01-27T21:47:52.360898Z",
+     "start_time": "2025-01-27T21:47:46.013367Z"
     }
    },
    "cell_type": "code",
@@ -121,11 +121,717 @@
        "dict_keys(['tty_chars', 'tty_colors', 'tty_cursor', 'timestamps', 'done', 'gameids'])"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
+   "execution_count": 5
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-01-27T21:48:15.271039Z",
+     "start_time": "2025-01-27T21:48:15.259970Z"
+    }
+   },
+   "cell_type": "code",
+   "source": "print(minibatch)",
+   "id": "3777528708456724",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{'tty_chars': array([[[[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 78, 101, 116, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 82, 117, 115, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 89, 111, 117, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 82, 117, 115, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 89, 111, 117, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 82, 117, 115, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 82, 117, 115, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]]],\n",
+      "\n",
+      "\n",
+      "       [[[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 78, 101, 116, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 67, 104, 111, ..., 114,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 80, 106, 112, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 80, 106, 112, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 80, 106, 112, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]]],\n",
+      "\n",
+      "\n",
+      "       [[[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 78, 101, 116, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 35,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 91,  85,  98, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 35,  32, 117, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 91,  85,  98, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 73, 110,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 91,  85,  98, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]]],\n",
+      "\n",
+      "\n",
+      "       ...,\n",
+      "\n",
+      "\n",
+      "       [[[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 78, 101, 116, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 78, 101, 116, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 67, 104, 111, ..., 114,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 32,  32,  32, ..., 101,  58,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 66, 114, 117, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 66, 114, 117, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 66, 114, 117, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]]],\n",
+      "\n",
+      "\n",
+      "       [[[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 78, 101, 116, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 65, 110,  97, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 65, 110,  97, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 65, 110,  97, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 70, 108, 101, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 65, 110,  97, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]]],\n",
+      "\n",
+      "\n",
+      "       [[[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 78, 101, 116, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 78, 101, 116, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 91,  84,  97, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 89, 111, 117, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 91,  84,  97, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]],\n",
+      "\n",
+      "        [[ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         ...,\n",
+      "         [ 32,  32,  32, ...,  32,  32,  32],\n",
+      "         [ 91,  84,  97, ...,  32,  32,  32],\n",
+      "         [ 68, 108, 118, ...,  32,  32,  32]]]], dtype=uint8), 'tty_colors': array([[[[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]]],\n",
+      "\n",
+      "\n",
+      "       [[[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 7,  7,  7, ...,  7,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]]],\n",
+      "\n",
+      "\n",
+      "       [[[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 7,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7, 23, 23, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 7,  0,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7, 23, 23, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 7,  7,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7, 23, 23, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]]],\n",
+      "\n",
+      "\n",
+      "       ...,\n",
+      "\n",
+      "\n",
+      "       [[[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 7,  7,  7, ...,  7,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  7,  7,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]]],\n",
+      "\n",
+      "\n",
+      "       [[[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]]],\n",
+      "\n",
+      "\n",
+      "       [[[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0]],\n",
+      "\n",
+      "        ...,\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7, 23, 23, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 7,  7,  7, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7, 23, 23, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]],\n",
+      "\n",
+      "        [[ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         ...,\n",
+      "         [ 0,  0,  0, ...,  0,  0,  0],\n",
+      "         [ 7, 23, 23, ...,  0,  0,  0],\n",
+      "         [ 7,  7,  7, ...,  0,  0,  0]]]], dtype=int8), 'tty_cursor': array([[[ 7,  0],\n",
+      "        [ 4,  0],\n",
+      "        [17, 31],\n",
+      "        ...,\n",
+      "        [11, 20],\n",
+      "        [11, 20],\n",
+      "        [12, 21]],\n",
+      "\n",
+      "       [[ 7,  0],\n",
+      "        [ 6, 75],\n",
+      "        [17, 54],\n",
+      "        ...,\n",
+      "        [18, 64],\n",
+      "        [18, 64],\n",
+      "        [18, 64]],\n",
+      "\n",
+      "       [[ 7,  0],\n",
+      "        [10, 40],\n",
+      "        [ 5,  0],\n",
+      "        ...,\n",
+      "        [ 0,  2],\n",
+      "        [ 0,  3],\n",
+      "        [ 0, 19]],\n",
+      "\n",
+      "       ...,\n",
+      "\n",
+      "       [[ 4,  0],\n",
+      "        [ 6, 75],\n",
+      "        [17, 54],\n",
+      "        ...,\n",
+      "        [ 3, 66],\n",
+      "        [ 7, 75],\n",
+      "        [ 6, 65]],\n",
+      "\n",
+      "       [[ 7,  0],\n",
+      "        [ 4,  0],\n",
+      "        [17, 31],\n",
+      "        ...,\n",
+      "        [12, 10],\n",
+      "        [12,  9],\n",
+      "        [12,  8]],\n",
+      "\n",
+      "       [[ 7,  0],\n",
+      "        [ 5,  0],\n",
+      "        [ 7, 76],\n",
+      "        ...,\n",
+      "        [ 9, 58],\n",
+      "        [ 9, 58],\n",
+      "        [10, 57]]], dtype=int16), 'timestamps': array([[1306189555107547, 1306189555107590, 1306189555108916, ...,\n",
+      "        1306189606008487, 1306189606778498, 1306189607438526],\n",
+      "       [1393891622737764, 1393891622743647, 1393891623231641, ...,\n",
+      "        1393891659815629, 1393891660183725, 1393891660463721],\n",
+      "       [1559570456122668, 1559570456123211, 1559570456127280, ...,\n",
+      "        1559570466633544, 1559570466745760, 1559570466985630],\n",
+      "       ...,\n",
+      "       [1206843052629955, 1206843052630199, 1206843052906058, ...,\n",
+      "        1206843063721901, 1206843064681974, 1206843065433976],\n",
+      "       [1409188486949487, 1409188486984390, 1409188487064255, ...,\n",
+      "        1409188511521061, 1409188511957149, 1409188512185143],\n",
+      "       [1535714381094976, 1535714381096718, 1535714381096907, ...,\n",
+      "        1535714504916643, 1535714504916734, 1535714505240395]]), 'done': array([[0, 0, 0, ..., 0, 0, 0],\n",
+      "       [0, 0, 0, ..., 0, 0, 0],\n",
+      "       [0, 0, 0, ..., 0, 0, 0],\n",
+      "       ...,\n",
+      "       [0, 0, 0, ..., 0, 0, 0],\n",
+      "       [0, 0, 0, ..., 0, 0, 0],\n",
+      "       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8), 'gameids': array([[4466493, 4466493, 4466493, ..., 4466493, 4466493, 4466493],\n",
+      "       [6024931, 6024931, 6024931, ..., 6024931, 6024931, 6024931],\n",
+      "       [1760259, 1760259, 1760259, ..., 1760259, 1760259, 1760259],\n",
+      "       ...,\n",
+      "       [3525128, 3525128, 3525128, ..., 3525128, 3525128, 3525128],\n",
+      "       [6119341, 6119341, 6119341, ..., 6119341, 6119341, 6119341],\n",
+      "       [2043170, 2043170, 2043170, ..., 2043170, 2043170, 2043170]],\n",
+      "      dtype=int32)}\n"
+     ]
+    }
+   ],
    "execution_count": 6
   },
   {
@@ -134,7 +840,7 @@
    "outputs": [],
    "execution_count": null,
    "source": "",
-   "id": "3777528708456724"
+   "id": "be0267d1c66274b7"
   }
  ],
  "metadata": {
diff --git a/notebooks/2-28-2025_Random-Sample.ipynb b/notebooks/2-28-2025_Random-Sample.ipynb
new file mode 100644
index 0000000..c1c2ff2
--- /dev/null
+++ b/notebooks/2-28-2025_Random-Sample.ipynb
@@ -0,0 +1,910 @@
+{
+ "cells": [
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-02-28T00:26:31.441917Z",
+     "start_time": "2025-02-28T00:26:31.122237Z"
+    }
+   },
+   "cell_type": "code",
+   "source": "import nle.dataset as nld",
+   "id": "aca14f0b0d8d27e7",
+   "outputs": [],
+   "execution_count": 1
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-02-28T00:26:40.635459Z",
+     "start_time": "2025-02-28T00:26:40.631874Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "nld_nao_path = \"/code/nld-nao/nld-nao-unzipped\"\n",
+    "\n",
+    "dbfilename = \"/code/NetHack-Research/data/raw/nld-nao.db\"\n",
+    "\n",
+    "dataset_name = \"nld-nao\""
+   ],
+   "id": "initial_id",
+   "outputs": [],
+   "execution_count": 2
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-02-28T00:27:31.286923Z",
+     "start_time": "2025-02-28T00:27:31.187156Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "if not nld.db.exists(dbfilename):\n",
+    "    nld.db.create(dbfilename)\n",
+    "    # Add NLD-NAO data, use the `add_altorg_directory`.\n",
+    "    nld.add_altorg_directory(nld_nao_path, \"nld-nao\", dbfilename)\n",
+    "else:\n",
+    "    print(f\"Database already exists: {dbfilename}\")\n",
+    "    \n",
+    "# Connect Database and print games to verify\n",
+    "db_conn = nld.db.connect(filename=dbfilename)\n",
+    "print(f\"NLD-NAO Database contains {nld.db.count_games('nld-nao', conn=db_conn)} games.\")"
+   ],
+   "id": "6b16883e1bfa5b49",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Database already exists: /code/NetHack-Research/data/raw/nld-nao.db\n",
+      "NLD-NAO Database contains 1511228 games.\n"
+     ]
+    }
+   ],
+   "execution_count": 5
+  },
+  {
+   "metadata": {},
+   "cell_type": "code",
+   "outputs": [],
+   "execution_count": null,
+   "source": [
+    "random_sample = nld.TtyrecDataset(\n",
+    "    \"nld-nao\",\n",
+    "    batch_size=32,\n",
+    "    seq_length=32,\n",
+    "    dbfilename=dbfilename,\n",
+    ")\n",
+    "\n",
+    "minibatch = next(iter(random_sample))\n",
+    "minibatch.keys()\n",
+    "\n",
+    "# Show structure of data\n",
+    "print(minibatch)"
+   ],
+   "id": "aa9e8c37b33788c1"
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-02-28T00:29:02.416210Z",
+     "start_time": "2025-02-28T00:29:00.257585Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "from katakomba.env import NetHackChallenge, OfflineNetHackChallengeWrapper\n",
+    "from katakomba.utils.datasets import SequentialBuffer\n",
+    "\n",
+    "# The task is specified using the character field\n",
+    "env = NetHackChallenge (\n",
+    "  character = \"mon-hum-neu\",\n",
+    "  observation_keys = [\"tty_chars\", \"tty_colors\", \"tty_cursor\"]\n",
+    ")\n",
+    "\n",
+    "# A convenient wrapper that provides interfaces for dataset loading, score normalization, and deathlevel extraction\n",
+    "env = OfflineNetHackChallengeWrapper(env)\n",
+    "\n",
+    "# Several options for dataset reading (check the paper for details): \n",
+    "# - from RAM, decompressed (\"in_memory\"): fast but requires a lot of RAM, takes 5-10 minutes for decompression first\n",
+    "# - from Disk, decompressed (\"memmap\"): a bit slower than RAM, takes 5-10 minutes for decompression first\n",
+    "# - from Disk, compressed (\"compressed\"): very slow but no need for decompression, useful for debugging\n",
+    "# Note that this will download the dataset automatically if not found\n",
+    "dataset = env.get_dataset(mode=\"compressed\", scale=\"small\")\n",
+    "\n",
+    "# Throws an Error... \n",
+    "# Auxillary tools for computing normalized scores or extracting deathlevels\n",
+    "# env.get_normalized_score(score=1337.0)\n",
+    "# env.get_current_depth()"
+   ],
+   "id": "ff50c06d2b940678",
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "Preparing:   0%|          | 0/683 [00:00<?, ?it/s]"
+      ],
+      "application/vnd.jupyter.widget-view+json": {
+       "version_major": 2,
+       "version_minor": 0,
+       "model_id": "923e49b434f140d48d3ccc4073ea693e"
+      },
+      "application/json": {
+       "n": 0,
+       "total": 683,
+       "elapsed": 0.005568742752075195,
+       "ncols": null,
+       "nrows": null,
+       "prefix": "Preparing",
+       "ascii": false,
+       "unit": "it",
+       "unit_scale": false,
+       "rate": null,
+       "bar_format": null,
+       "postfix": null,
+       "unit_divisor": 1000,
+       "initial": 0,
+       "colour": null
+      }
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "execution_count": 6
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-02-28T00:29:07.516913Z",
+     "start_time": "2025-02-28T00:29:06.411639Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "buffer = SequentialBuffer(\n",
+    "  dataset=dataset,\n",
+    "  seq_len=32,\n",
+    "  batch_size=32, # Each batch element is a different trajectory\n",
+    "  seed=42,\n",
+    "  add_next_step=True # if you want (s, a, r, s') instead of (s, a, r)\n",
+    ")\n",
+    "\n",
+    "# What's inside the batch?\n",
+    "# Note that the next batch will include the +1 element as expected\n",
+    "batch = buffer.sample()\n",
+    "print(\n",
+    "  batch[\"tty_chars\"],  # [batch_size, seq_len + 1, 80, 24]\n",
+    "  batch[\"tty_colors\"], # [batch_size, seq_len + 1, 80, 24]\n",
+    "  batch[\"tty_cursor\"], # [batch_size, seq_len + 1, 2]\n",
+    "  batch[\"actions\"],    # [batch_size, seq_len + 1]\n",
+    "  batch[\"rewards\"],    # [batch_size, seq_len + 1]\n",
+    "  batch[\"dones\"]       # [batch_size, seq_len + 1]\n",
+    ")\n",
+    "\n",
+    "# In case you don't want to store the decompressed dataset beyond code execution\n",
+    "dataset.close()"
+   ],
+   "id": "f795c4606ac6ba34",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[[[[ 72 101 108 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  83  58  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  83  58  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  83  58  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 68 105 115 ...  32  32  32]\n",
+      "   [ 32  45  45 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32 115 ...  32  32  32]\n",
+      "   [ 83 112 101 ...  32  32  32]\n",
+      "   [ 32  32 115 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  83  58  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]]\n",
+      "\n",
+      "\n",
+      " [[[ 72 101 108 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 68 105 115 ...  32  32  32]\n",
+      "   [ 32  45  45 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32 115 ...  32  32  32]\n",
+      "   [ 83 112 101 ...  32  32  32]\n",
+      "   [ 32  32 115 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]]\n",
+      "\n",
+      "\n",
+      " [[[ 72 101 108 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  58  48  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  58  48  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  58  48  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 68 105 115 ...  32  32  32]\n",
+      "   [ 32  45  45 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32 115 ...  32  32  32]\n",
+      "   [ 83 112 101 ...  32  32  32]\n",
+      "   [ 32  32 115 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  58  48  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]]\n",
+      "\n",
+      "\n",
+      " ...\n",
+      "\n",
+      "\n",
+      " [[[ 72 101 108 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  48  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  48  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  48  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 68 105 115 ...  32  32  32]\n",
+      "   [ 32  45  45 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32 115 ...  32  32  32]\n",
+      "   [ 83 112 101 ...  32  32  32]\n",
+      "   [ 32  32 115 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  48  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]]\n",
+      "\n",
+      "\n",
+      " [[[ 72 101 108 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 68 105 115 ...  32  32  32]\n",
+      "   [ 32  45  45 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32 115 ...  32  32  32]\n",
+      "   [ 83 112 101 ...  32  32  32]\n",
+      "   [ 32  32 115 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]]\n",
+      "\n",
+      "\n",
+      " [[[ 72 101 108 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 68 105 115 ...  32  32  32]\n",
+      "   [ 32  45  45 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32 115 ...  32  32  32]\n",
+      "   [ 83 112 101 ...  32  32  32]\n",
+      "   [ 32  32 115 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]]\n",
+      "\n",
+      "  [[ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   ...\n",
+      "   [ 32  32  32 ...  32  32  32]\n",
+      "   [ 65 103 101 ...  32  32  32]\n",
+      "   [ 68 108 118 ...  32  32  32]]]] [[[[ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  7  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  7  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  7  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  7 ...  0  0  0]\n",
+      "   [23 23 23 ...  0  0  0]\n",
+      "   [ 0  0  7 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  7  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]]\n",
+      "\n",
+      "\n",
+      " [[[ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  7 ...  0  0  0]\n",
+      "   [23 23 23 ...  0  0  0]\n",
+      "   [ 0  0  7 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]]\n",
+      "\n",
+      "\n",
+      " [[[ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  7  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  7  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  7  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  7 ...  0  0  0]\n",
+      "   [23 23 23 ...  0  0  0]\n",
+      "   [ 0  0  7 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  7  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]]\n",
+      "\n",
+      "\n",
+      " ...\n",
+      "\n",
+      "\n",
+      " [[[ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  7 ...  0  0  0]\n",
+      "   [23 23 23 ...  0  0  0]\n",
+      "   [ 0  0  7 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  7  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]]\n",
+      "\n",
+      "\n",
+      " [[[ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  7 ...  0  0  0]\n",
+      "   [23 23 23 ...  0  0  0]\n",
+      "   [ 0  0  7 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]]\n",
+      "\n",
+      "\n",
+      " [[[ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  ...\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 0  7  7 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  7 ...  0  0  0]\n",
+      "   [23 23 23 ...  0  0  0]\n",
+      "   [ 0  0  7 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]]\n",
+      "\n",
+      "  [[ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   ...\n",
+      "   [ 0  0  0 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]\n",
+      "   [ 7  7  7 ...  0  0  0]]]] [[[17 63]\n",
+      "  [17 63]\n",
+      "  [17 63]\n",
+      "  ...\n",
+      "  [23  9]\n",
+      "  [ 5  9]\n",
+      "  [17 63]]\n",
+      "\n",
+      " [[17 25]\n",
+      "  [17 25]\n",
+      "  [17 25]\n",
+      "  ...\n",
+      "  [23  9]\n",
+      "  [ 5  9]\n",
+      "  [17 25]]\n",
+      "\n",
+      " [[13 72]\n",
+      "  [13 72]\n",
+      "  [13 72]\n",
+      "  ...\n",
+      "  [23  9]\n",
+      "  [ 5  9]\n",
+      "  [13 72]]\n",
+      "\n",
+      " ...\n",
+      "\n",
+      " [[10 72]\n",
+      "  [10 72]\n",
+      "  [10 72]\n",
+      "  ...\n",
+      "  [23  9]\n",
+      "  [ 5  9]\n",
+      "  [10 72]]\n",
+      "\n",
+      " [[14  5]\n",
+      "  [14  5]\n",
+      "  [14  5]\n",
+      "  ...\n",
+      "  [23  9]\n",
+      "  [ 5  9]\n",
+      "  [14  5]]\n",
+      "\n",
+      " [[ 6 60]\n",
+      "  [ 6 60]\n",
+      "  [ 6 60]\n",
+      "  ...\n",
+      "  [23  9]\n",
+      "  [ 5  9]\n",
+      "  [ 6 60]]] [[ 38  38  25 ... 107 107  51]\n",
+      " [ 38  38  25 ... 107 107  51]\n",
+      " [ 38  38  25 ... 107 107  51]\n",
+      " ...\n",
+      " [ 38  38  25 ... 107 107  51]\n",
+      " [ 38  38  25 ... 107 107  51]\n",
+      " [ 38  38  25 ... 107 107  51]] [[0 0 0 ... 0 0 0]\n",
+      " [0 0 0 ... 0 0 0]\n",
+      " [0 0 0 ... 0 0 0]\n",
+      " ...\n",
+      " [0 0 0 ... 0 0 0]\n",
+      " [0 0 0 ... 0 0 0]\n",
+      " [0 0 0 ... 0 0 0]] [[False False False ... False False False]\n",
+      " [False False False ... False False False]\n",
+      " [False False False ... False False False]\n",
+      " ...\n",
+      " [False False False ... False False False]\n",
+      " [False False False ... False False False]\n",
+      " [False False False ... False False False]]\n"
+     ]
+    }
+   ],
+   "execution_count": 7
+  },
+  {
+   "metadata": {},
+   "cell_type": "code",
+   "outputs": [],
+   "execution_count": null,
+   "source": "",
+   "id": "4c299ed9690b9e24"
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 2
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython2",
+   "version": "2.7.6"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 5
+}
diff --git a/notebooks/persistence/analysis.ipynb b/notebooks/persistence/analysis.ipynb
index 04aa1ec..af234ce 100644
--- a/notebooks/persistence/analysis.ipynb
+++ b/notebooks/persistence/analysis.ipynb
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2024-11-01T23:43:33.248463Z",
-     "start_time": "2024-11-01T23:43:33.142886Z"
+     "end_time": "2025-02-21T03:36:28.618299Z",
+     "start_time": "2025-02-21T03:36:28.235499Z"
     }
    },
    "source": [
@@ -22,13 +22,13 @@
     "from nle.dataset import db\n"
    ],
    "outputs": [],
-   "execution_count": 4
+   "execution_count": 1
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-11-01T23:43:34.082759Z",
-     "start_time": "2024-11-01T23:43:34.079560Z"
+     "end_time": "2025-02-21T03:36:30.372701Z",
+     "start_time": "2025-02-21T03:36:30.369992Z"
     }
    },
    "cell_type": "code",
@@ -41,13 +41,13 @@
    ],
    "id": "3961158b99f514bf",
    "outputs": [],
-   "execution_count": 5
+   "execution_count": 2
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-11-01T23:43:34.960044Z",
-     "start_time": "2024-11-01T23:43:34.956040Z"
+     "end_time": "2025-02-21T03:36:30.705778Z",
+     "start_time": "2025-02-21T03:36:30.702412Z"
     }
    },
    "cell_type": "code",
@@ -59,13 +59,13 @@
    ],
    "id": "ccc644e7d939c982",
    "outputs": [],
-   "execution_count": 6
+   "execution_count": 3
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-11-01T23:43:36.900016Z",
-     "start_time": "2024-11-01T23:43:36.751010Z"
+     "end_time": "2025-02-21T03:36:33.520074Z",
+     "start_time": "2025-02-21T03:36:33.354113Z"
     }
    },
    "cell_type": "code",
@@ -83,13 +83,13 @@
      ]
     }
    ],
-   "execution_count": 7
+   "execution_count": 4
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-11-01T23:43:44.717711Z",
-     "start_time": "2024-11-01T23:43:37.764924Z"
+     "end_time": "2025-02-21T03:36:42.909386Z",
+     "start_time": "2025-02-21T03:36:35.968011Z"
     }
    },
    "cell_type": "code",
@@ -112,18 +112,18 @@
        "dict_keys(['tty_chars', 'tty_colors', 'tty_cursor', 'timestamps', 'done', 'gameids'])"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
-   "execution_count": 8
+   "execution_count": 5
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-10-31T00:52:18.756112Z",
-     "start_time": "2024-10-31T00:52:18.751761Z"
+     "end_time": "2025-02-21T03:36:46.977488Z",
+     "start_time": "2025-02-21T03:36:46.973656Z"
     }
    },
    "cell_type": "code",
@@ -144,13 +144,13 @@
    ],
    "id": "8dd1782da9b4c85",
    "outputs": [],
-   "execution_count": 10
+   "execution_count": 6
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-10-31T00:52:42.385114Z",
-     "start_time": "2024-10-31T00:52:19.689254Z"
+     "end_time": "2025-02-21T03:37:00.735412Z",
+     "start_time": "2025-02-21T03:36:47.852808Z"
     }
    },
    "cell_type": "code",
@@ -176,24 +176,43 @@
    ],
    "id": "1a7b76bbd685cf17",
    "outputs": [
+    {
+     "ename": "OptionError",
+     "evalue": "No such keys(s): 'mode.use_inf_as_null'",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mOptionError\u001B[0m                               Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[7], line 15\u001B[0m\n\u001B[1;32m     13\u001B[0m ax2 \u001B[38;5;241m=\u001B[39m ax1\u001B[38;5;241m.\u001B[39mtwinx()\n\u001B[1;32m     14\u001B[0m ax2\u001B[38;5;241m.\u001B[39mset_ylabel(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mAverage Score if died on level\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[0;32m---> 15\u001B[0m \u001B[43msns\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mlineplot\u001B[49m\u001B[43m(\u001B[49m\u001B[43mdf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mx\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mmaxlvl\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mpoints\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcolor\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mred\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43merrorbar\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mci\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m90\u001B[39;49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43max\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43max2\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     17\u001B[0m plt\u001B[38;5;241m.\u001B[39mtitle(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mAverage Percentage of Levels Reached by NLD-NAO\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m     18\u001B[0m plt\u001B[38;5;241m.\u001B[39mshow()\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/seaborn/relational.py:645\u001B[0m, in \u001B[0;36mlineplot\u001B[0;34m(data, x, y, hue, size, style, units, palette, hue_order, hue_norm, sizes, size_order, size_norm, dashes, markers, style_order, estimator, errorbar, n_boot, seed, orient, sort, err_style, err_kws, legend, ci, ax, **kwargs)\u001B[0m\n\u001B[1;32m    642\u001B[0m color \u001B[38;5;241m=\u001B[39m kwargs\u001B[38;5;241m.\u001B[39mpop(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mcolor\u001B[39m\u001B[38;5;124m\"\u001B[39m, kwargs\u001B[38;5;241m.\u001B[39mpop(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mc\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;28;01mNone\u001B[39;00m))\n\u001B[1;32m    643\u001B[0m kwargs[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mcolor\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m _default_color(ax\u001B[38;5;241m.\u001B[39mplot, hue, color, kwargs)\n\u001B[0;32m--> 645\u001B[0m \u001B[43mp\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mplot\u001B[49m\u001B[43m(\u001B[49m\u001B[43max\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    646\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m ax\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/seaborn/relational.py:423\u001B[0m, in \u001B[0;36m_LinePlotter.plot\u001B[0;34m(self, ax, kws)\u001B[0m\n\u001B[1;32m    415\u001B[0m \u001B[38;5;66;03m# TODO How to handle NA? We don't want NA to propagate through to the\u001B[39;00m\n\u001B[1;32m    416\u001B[0m \u001B[38;5;66;03m# estimate/CI when some values are present, but we would also like\u001B[39;00m\n\u001B[1;32m    417\u001B[0m \u001B[38;5;66;03m# matplotlib to show \"gaps\" in the line when all values are missing.\u001B[39;00m\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    420\u001B[0m \n\u001B[1;32m    421\u001B[0m \u001B[38;5;66;03m# Loop over the semantic subsets and add to the plot\u001B[39;00m\n\u001B[1;32m    422\u001B[0m grouping_vars \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mhue\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124msize\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mstyle\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m--> 423\u001B[0m \u001B[38;5;28;01mfor\u001B[39;00m sub_vars, sub_data \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39miter_data(grouping_vars, from_comp_data\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mTrue\u001B[39;00m):\n\u001B[1;32m    425\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39msort:\n\u001B[1;32m    426\u001B[0m         sort_vars \u001B[38;5;241m=\u001B[39m [\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124munits\u001B[39m\u001B[38;5;124m\"\u001B[39m, orient, other]\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/seaborn/_oldcore.py:1028\u001B[0m, in \u001B[0;36mVectorPlotter.iter_data\u001B[0;34m(self, grouping_vars, reverse, from_comp_data, by_facet, allow_empty, dropna)\u001B[0m\n\u001B[1;32m   1023\u001B[0m grouping_vars \u001B[38;5;241m=\u001B[39m [\n\u001B[1;32m   1024\u001B[0m     var \u001B[38;5;28;01mfor\u001B[39;00m var \u001B[38;5;129;01min\u001B[39;00m grouping_vars \u001B[38;5;28;01mif\u001B[39;00m var \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mvariables\n\u001B[1;32m   1025\u001B[0m ]\n\u001B[1;32m   1027\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m from_comp_data:\n\u001B[0;32m-> 1028\u001B[0m     data \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcomp_data\u001B[49m\n\u001B[1;32m   1029\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m   1030\u001B[0m     data \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mplot_data\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/seaborn/_oldcore.py:1119\u001B[0m, in \u001B[0;36mVectorPlotter.comp_data\u001B[0;34m(self)\u001B[0m\n\u001B[1;32m   1117\u001B[0m grouped \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mplot_data[var]\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mconverters[var], sort\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mFalse\u001B[39;00m)\n\u001B[1;32m   1118\u001B[0m \u001B[38;5;28;01mfor\u001B[39;00m converter, orig \u001B[38;5;129;01min\u001B[39;00m grouped:\n\u001B[0;32m-> 1119\u001B[0m     \u001B[38;5;28;01mwith\u001B[39;00m pd\u001B[38;5;241m.\u001B[39moption_context(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mmode.use_inf_as_null\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;28;01mTrue\u001B[39;00m):\n\u001B[1;32m   1120\u001B[0m         orig \u001B[38;5;241m=\u001B[39m orig\u001B[38;5;241m.\u001B[39mdropna()\n\u001B[1;32m   1121\u001B[0m         \u001B[38;5;28;01mif\u001B[39;00m var \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mvar_levels:\n\u001B[1;32m   1122\u001B[0m             \u001B[38;5;66;03m# TODO this should happen in some centralized location\u001B[39;00m\n\u001B[1;32m   1123\u001B[0m             \u001B[38;5;66;03m# it is similar to GH2419, but more complicated because\u001B[39;00m\n\u001B[1;32m   1124\u001B[0m             \u001B[38;5;66;03m# supporting `order` in categorical plots is tricky\u001B[39;00m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/pandas/_config/config.py:480\u001B[0m, in \u001B[0;36moption_context.__enter__\u001B[0;34m(self)\u001B[0m\n\u001B[1;32m    479\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21m__enter__\u001B[39m(\u001B[38;5;28mself\u001B[39m) \u001B[38;5;241m-\u001B[39m\u001B[38;5;241m>\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m--> 480\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mundo \u001B[38;5;241m=\u001B[39m [(pat, _get_option(pat)) \u001B[38;5;28;01mfor\u001B[39;00m pat, val \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mops]\n\u001B[1;32m    482\u001B[0m     \u001B[38;5;28;01mfor\u001B[39;00m pat, val \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mops:\n\u001B[1;32m    483\u001B[0m         _set_option(pat, val, silent\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mTrue\u001B[39;00m)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/pandas/_config/config.py:480\u001B[0m, in \u001B[0;36m<listcomp>\u001B[0;34m(.0)\u001B[0m\n\u001B[1;32m    479\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21m__enter__\u001B[39m(\u001B[38;5;28mself\u001B[39m) \u001B[38;5;241m-\u001B[39m\u001B[38;5;241m>\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m--> 480\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mundo \u001B[38;5;241m=\u001B[39m [(pat, \u001B[43m_get_option\u001B[49m\u001B[43m(\u001B[49m\u001B[43mpat\u001B[49m\u001B[43m)\u001B[49m) \u001B[38;5;28;01mfor\u001B[39;00m pat, val \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mops]\n\u001B[1;32m    482\u001B[0m     \u001B[38;5;28;01mfor\u001B[39;00m pat, val \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mops:\n\u001B[1;32m    483\u001B[0m         _set_option(pat, val, silent\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mTrue\u001B[39;00m)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/pandas/_config/config.py:146\u001B[0m, in \u001B[0;36m_get_option\u001B[0;34m(pat, silent)\u001B[0m\n\u001B[1;32m    145\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21m_get_option\u001B[39m(pat: \u001B[38;5;28mstr\u001B[39m, silent: \u001B[38;5;28mbool\u001B[39m \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mFalse\u001B[39;00m) \u001B[38;5;241m-\u001B[39m\u001B[38;5;241m>\u001B[39m Any:\n\u001B[0;32m--> 146\u001B[0m     key \u001B[38;5;241m=\u001B[39m \u001B[43m_get_single_key\u001B[49m\u001B[43m(\u001B[49m\u001B[43mpat\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43msilent\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    148\u001B[0m     \u001B[38;5;66;03m# walk the nested dict\u001B[39;00m\n\u001B[1;32m    149\u001B[0m     root, k \u001B[38;5;241m=\u001B[39m _get_root(key)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/pandas/_config/config.py:132\u001B[0m, in \u001B[0;36m_get_single_key\u001B[0;34m(pat, silent)\u001B[0m\n\u001B[1;32m    130\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m silent:\n\u001B[1;32m    131\u001B[0m         _warn_if_deprecated(pat)\n\u001B[0;32m--> 132\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m OptionError(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mNo such keys(s): \u001B[39m\u001B[38;5;132;01m{\u001B[39;00m\u001B[38;5;28mrepr\u001B[39m(pat)\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m    133\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(keys) \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m1\u001B[39m:\n\u001B[1;32m    134\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m OptionError(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mPattern matched multiple keys\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n",
+      "\u001B[0;31mOptionError\u001B[0m: No such keys(s): 'mode.use_inf_as_null'"
+     ]
+    },
     {
      "data": {
       "text/plain": [
        "<Figure size 640x480 with 2 Axes>"
       ],
-      "image/png": ""
+      "image/png": "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"
      },
      "metadata": {},
      "output_type": "display_data"
     }
    ],
-   "execution_count": 11
+   "execution_count": 7
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-08-26T19:19:44.640776Z",
-     "start_time": "2024-08-26T19:19:44.634494Z"
+     "end_time": "2025-02-21T03:37:15.810506Z",
+     "start_time": "2025-02-21T03:37:15.807258Z"
     }
    },
    "cell_type": "code",
@@ -213,13 +232,13 @@
    ],
    "id": "4afaabdb29d00b03",
    "outputs": [],
-   "execution_count": 10
+   "execution_count": 8
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-08-26T19:19:47.478016Z",
-     "start_time": "2024-08-26T19:19:45.102009Z"
+     "end_time": "2025-02-21T03:37:20.036232Z",
+     "start_time": "2025-02-21T03:37:17.407277Z"
     }
    },
    "cell_type": "code",
@@ -242,7 +261,7 @@
        "Text(0.5, 1.0, 'NLD-NAO (mean=127217)')"
       ]
      },
-     "execution_count": 11,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     },
@@ -251,19 +270,19 @@
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ],
-      "image/png": ""
+      "image/png": ""
      },
      "metadata": {},
      "output_type": "display_data"
     }
    ],
-   "execution_count": 11
+   "execution_count": 9
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-10-25T05:04:22.072190Z",
-     "start_time": "2024-10-25T05:04:22.068678Z"
+     "end_time": "2025-02-21T03:37:21.453966Z",
+     "start_time": "2025-02-21T03:37:21.450236Z"
     }
    },
    "cell_type": "code",
@@ -286,13 +305,13 @@
    ],
    "id": "68994f82d395c93b",
    "outputs": [],
-   "execution_count": 11
+   "execution_count": 10
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-10-25T05:06:46.574034Z",
-     "start_time": "2024-10-25T05:04:22.915323Z"
+     "end_time": "2025-02-21T03:40:14.884710Z",
+     "start_time": "2025-02-21T03:37:22.958294Z"
     }
    },
    "cell_type": "code",
@@ -334,37 +353,22 @@
       "text/plain": [
        "<Figure size 1000x600 with 1 Axes>"
       ],
-      "image/png": ""
+      "image/png": ""
      },
      "metadata": {},
      "output_type": "display_data"
     }
    ],
-   "execution_count": 12
+   "execution_count": 11
   },
   {
-   "metadata": {},
-   "cell_type": "code",
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Plotting persistence vs points...\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "<Figure size 1000x600 with 2 Axes>"
-      ],
-      "image/png": ""
-     },
-     "metadata": {},
-     "output_type": "display_data"
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-02-21T03:40:37.476019Z",
+     "start_time": "2025-02-21T03:40:29.305075Z"
     }
-   ],
-   "execution_count": 22,
+   },
+   "cell_type": "code",
    "source": [
     "import numpy as np\n",
     "import pandas as pd\n",
@@ -439,7 +443,47 @@
     "    plot_persistence_vs_points(\"nld-nao\", dbfilename)\n",
     "\n"
    ],
-   "id": "1cb99d18d83c1a21"
+   "id": "1cb99d18d83c1a21",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Plotting persistence vs points...\n"
+     ]
+    },
+    {
+     "ename": "OptionError",
+     "evalue": "No such keys(s): 'mode.use_inf_as_null'",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mOptionError\u001B[0m                               Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[12], line 71\u001B[0m\n\u001B[1;32m     69\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;18m__name__\u001B[39m \u001B[38;5;241m==\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m__main__\u001B[39m\u001B[38;5;124m\"\u001B[39m:\n\u001B[1;32m     70\u001B[0m     \u001B[38;5;28mprint\u001B[39m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mPlotting persistence vs points...\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[0;32m---> 71\u001B[0m     \u001B[43mplot_persistence_vs_points\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mnld-nao\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mdbfilename\u001B[49m\u001B[43m)\u001B[49m\n",
+      "Cell \u001B[0;32mIn[12], line 61\u001B[0m, in \u001B[0;36mplot_persistence_vs_points\u001B[0;34m(dataset_name, dbfilename)\u001B[0m\n\u001B[1;32m     59\u001B[0m df[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mrolling_mean_points\u001B[39m\u001B[38;5;124m'\u001B[39m] \u001B[38;5;241m=\u001B[39m df[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mpoints\u001B[39m\u001B[38;5;124m'\u001B[39m]\u001B[38;5;241m.\u001B[39mrolling(window\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m100\u001B[39m)\u001B[38;5;241m.\u001B[39mmean()\n\u001B[1;32m     60\u001B[0m ax2 \u001B[38;5;241m=\u001B[39m ax1\u001B[38;5;241m.\u001B[39mtwinx()\n\u001B[0;32m---> 61\u001B[0m \u001B[43msns\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mlineplot\u001B[49m\u001B[43m(\u001B[49m\u001B[43mdata\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mx\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mturns\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mrolling_mean_points\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43max\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43max2\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcolor\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mred\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m)\u001B[49m\n\u001B[1;32m     62\u001B[0m ax2\u001B[38;5;241m.\u001B[39mset_ylabel(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mRolling Mean of Points\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m     64\u001B[0m \u001B[38;5;66;03m# Add title and display the plot\u001B[39;00m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/seaborn/relational.py:645\u001B[0m, in \u001B[0;36mlineplot\u001B[0;34m(data, x, y, hue, size, style, units, palette, hue_order, hue_norm, sizes, size_order, size_norm, dashes, markers, style_order, estimator, errorbar, n_boot, seed, orient, sort, err_style, err_kws, legend, ci, ax, **kwargs)\u001B[0m\n\u001B[1;32m    642\u001B[0m color \u001B[38;5;241m=\u001B[39m kwargs\u001B[38;5;241m.\u001B[39mpop(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mcolor\u001B[39m\u001B[38;5;124m\"\u001B[39m, kwargs\u001B[38;5;241m.\u001B[39mpop(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mc\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;28;01mNone\u001B[39;00m))\n\u001B[1;32m    643\u001B[0m kwargs[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mcolor\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m _default_color(ax\u001B[38;5;241m.\u001B[39mplot, hue, color, kwargs)\n\u001B[0;32m--> 645\u001B[0m \u001B[43mp\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mplot\u001B[49m\u001B[43m(\u001B[49m\u001B[43max\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    646\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m ax\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/seaborn/relational.py:423\u001B[0m, in \u001B[0;36m_LinePlotter.plot\u001B[0;34m(self, ax, kws)\u001B[0m\n\u001B[1;32m    415\u001B[0m \u001B[38;5;66;03m# TODO How to handle NA? We don't want NA to propagate through to the\u001B[39;00m\n\u001B[1;32m    416\u001B[0m \u001B[38;5;66;03m# estimate/CI when some values are present, but we would also like\u001B[39;00m\n\u001B[1;32m    417\u001B[0m \u001B[38;5;66;03m# matplotlib to show \"gaps\" in the line when all values are missing.\u001B[39;00m\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    420\u001B[0m \n\u001B[1;32m    421\u001B[0m \u001B[38;5;66;03m# Loop over the semantic subsets and add to the plot\u001B[39;00m\n\u001B[1;32m    422\u001B[0m grouping_vars \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mhue\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124msize\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mstyle\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m--> 423\u001B[0m \u001B[38;5;28;01mfor\u001B[39;00m sub_vars, sub_data \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39miter_data(grouping_vars, from_comp_data\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mTrue\u001B[39;00m):\n\u001B[1;32m    425\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39msort:\n\u001B[1;32m    426\u001B[0m         sort_vars \u001B[38;5;241m=\u001B[39m [\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124munits\u001B[39m\u001B[38;5;124m\"\u001B[39m, orient, other]\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/seaborn/_oldcore.py:1028\u001B[0m, in \u001B[0;36mVectorPlotter.iter_data\u001B[0;34m(self, grouping_vars, reverse, from_comp_data, by_facet, allow_empty, dropna)\u001B[0m\n\u001B[1;32m   1023\u001B[0m grouping_vars \u001B[38;5;241m=\u001B[39m [\n\u001B[1;32m   1024\u001B[0m     var \u001B[38;5;28;01mfor\u001B[39;00m var \u001B[38;5;129;01min\u001B[39;00m grouping_vars \u001B[38;5;28;01mif\u001B[39;00m var \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mvariables\n\u001B[1;32m   1025\u001B[0m ]\n\u001B[1;32m   1027\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m from_comp_data:\n\u001B[0;32m-> 1028\u001B[0m     data \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcomp_data\u001B[49m\n\u001B[1;32m   1029\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m   1030\u001B[0m     data \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mplot_data\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/seaborn/_oldcore.py:1119\u001B[0m, in \u001B[0;36mVectorPlotter.comp_data\u001B[0;34m(self)\u001B[0m\n\u001B[1;32m   1117\u001B[0m grouped \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mplot_data[var]\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mconverters[var], sort\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mFalse\u001B[39;00m)\n\u001B[1;32m   1118\u001B[0m \u001B[38;5;28;01mfor\u001B[39;00m converter, orig \u001B[38;5;129;01min\u001B[39;00m grouped:\n\u001B[0;32m-> 1119\u001B[0m     \u001B[38;5;28;01mwith\u001B[39;00m pd\u001B[38;5;241m.\u001B[39moption_context(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mmode.use_inf_as_null\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;28;01mTrue\u001B[39;00m):\n\u001B[1;32m   1120\u001B[0m         orig \u001B[38;5;241m=\u001B[39m orig\u001B[38;5;241m.\u001B[39mdropna()\n\u001B[1;32m   1121\u001B[0m         \u001B[38;5;28;01mif\u001B[39;00m var \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mvar_levels:\n\u001B[1;32m   1122\u001B[0m             \u001B[38;5;66;03m# TODO this should happen in some centralized location\u001B[39;00m\n\u001B[1;32m   1123\u001B[0m             \u001B[38;5;66;03m# it is similar to GH2419, but more complicated because\u001B[39;00m\n\u001B[1;32m   1124\u001B[0m             \u001B[38;5;66;03m# supporting `order` in categorical plots is tricky\u001B[39;00m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/pandas/_config/config.py:480\u001B[0m, in \u001B[0;36moption_context.__enter__\u001B[0;34m(self)\u001B[0m\n\u001B[1;32m    479\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21m__enter__\u001B[39m(\u001B[38;5;28mself\u001B[39m) \u001B[38;5;241m-\u001B[39m\u001B[38;5;241m>\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m--> 480\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mundo \u001B[38;5;241m=\u001B[39m [(pat, _get_option(pat)) \u001B[38;5;28;01mfor\u001B[39;00m pat, val \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mops]\n\u001B[1;32m    482\u001B[0m     \u001B[38;5;28;01mfor\u001B[39;00m pat, val \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mops:\n\u001B[1;32m    483\u001B[0m         _set_option(pat, val, silent\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mTrue\u001B[39;00m)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/pandas/_config/config.py:480\u001B[0m, in \u001B[0;36m<listcomp>\u001B[0;34m(.0)\u001B[0m\n\u001B[1;32m    479\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21m__enter__\u001B[39m(\u001B[38;5;28mself\u001B[39m) \u001B[38;5;241m-\u001B[39m\u001B[38;5;241m>\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m--> 480\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mundo \u001B[38;5;241m=\u001B[39m [(pat, \u001B[43m_get_option\u001B[49m\u001B[43m(\u001B[49m\u001B[43mpat\u001B[49m\u001B[43m)\u001B[49m) \u001B[38;5;28;01mfor\u001B[39;00m pat, val \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mops]\n\u001B[1;32m    482\u001B[0m     \u001B[38;5;28;01mfor\u001B[39;00m pat, val \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mops:\n\u001B[1;32m    483\u001B[0m         _set_option(pat, val, silent\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mTrue\u001B[39;00m)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/pandas/_config/config.py:146\u001B[0m, in \u001B[0;36m_get_option\u001B[0;34m(pat, silent)\u001B[0m\n\u001B[1;32m    145\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21m_get_option\u001B[39m(pat: \u001B[38;5;28mstr\u001B[39m, silent: \u001B[38;5;28mbool\u001B[39m \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mFalse\u001B[39;00m) \u001B[38;5;241m-\u001B[39m\u001B[38;5;241m>\u001B[39m Any:\n\u001B[0;32m--> 146\u001B[0m     key \u001B[38;5;241m=\u001B[39m \u001B[43m_get_single_key\u001B[49m\u001B[43m(\u001B[49m\u001B[43mpat\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43msilent\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    148\u001B[0m     \u001B[38;5;66;03m# walk the nested dict\u001B[39;00m\n\u001B[1;32m    149\u001B[0m     root, k \u001B[38;5;241m=\u001B[39m _get_root(key)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/pandas/_config/config.py:132\u001B[0m, in \u001B[0;36m_get_single_key\u001B[0;34m(pat, silent)\u001B[0m\n\u001B[1;32m    130\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m silent:\n\u001B[1;32m    131\u001B[0m         _warn_if_deprecated(pat)\n\u001B[0;32m--> 132\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m OptionError(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mNo such keys(s): \u001B[39m\u001B[38;5;132;01m{\u001B[39;00m\u001B[38;5;28mrepr\u001B[39m(pat)\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m    133\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(keys) \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m1\u001B[39m:\n\u001B[1;32m    134\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m OptionError(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mPattern matched multiple keys\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n",
+      "\u001B[0;31mOptionError\u001B[0m: No such keys(s): 'mode.use_inf_as_null'"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "<Figure size 1000x600 with 2 Axes>"
+      ],
+      "image/png": ""
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "execution_count": 12
   },
   {
    "metadata": {
diff --git a/wandb/latest-run b/reports/wandb/latest-run
similarity index 100%
rename from wandb/latest-run
rename to reports/wandb/latest-run
diff --git a/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/code/src/models/behavioral-cloning.py b/reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/code/src/models/behavioral-cloning.py
similarity index 100%
rename from wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/code/src/models/behavioral-cloning.py
rename to reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/code/src/models/behavioral-cloning.py
diff --git a/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/config.yaml b/reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/config.yaml
similarity index 100%
rename from wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/config.yaml
rename to reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/config.yaml
diff --git a/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/diff.patch b/reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/diff.patch
similarity index 100%
rename from wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/diff.patch
rename to reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/diff.patch
diff --git a/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/requirements.txt b/reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/requirements.txt
similarity index 100%
rename from wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/requirements.txt
rename to reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/requirements.txt
diff --git a/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/wandb-metadata.json b/reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/wandb-metadata.json
similarity index 100%
rename from wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/wandb-metadata.json
rename to reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/wandb-metadata.json
diff --git a/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/wandb-summary.json b/reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/wandb-summary.json
similarity index 100%
rename from wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/wandb-summary.json
rename to reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/files/wandb-summary.json
diff --git a/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/run-57119078-689b-40ab-9d58-fbec3a2d7faf.wandb b/reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/run-57119078-689b-40ab-9d58-fbec3a2d7faf.wandb
similarity index 100%
rename from wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/run-57119078-689b-40ab-9d58-fbec3a2d7faf.wandb
rename to reports/wandb/run-20250116_085159-57119078-689b-40ab-9d58-fbec3a2d7faf/run-57119078-689b-40ab-9d58-fbec3a2d7faf.wandb
diff --git a/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/code/src/models/behavioral-cloning.py b/reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/code/src/models/behavioral-cloning.py
similarity index 100%
rename from wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/code/src/models/behavioral-cloning.py
rename to reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/code/src/models/behavioral-cloning.py
diff --git a/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/config.yaml b/reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/config.yaml
similarity index 100%
rename from wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/config.yaml
rename to reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/config.yaml
diff --git a/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/diff.patch b/reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/diff.patch
similarity index 100%
rename from wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/diff.patch
rename to reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/diff.patch
diff --git a/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/requirements.txt b/reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/requirements.txt
similarity index 100%
rename from wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/requirements.txt
rename to reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/requirements.txt
diff --git a/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/wandb-metadata.json b/reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/wandb-metadata.json
similarity index 100%
rename from wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/wandb-metadata.json
rename to reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/wandb-metadata.json
diff --git a/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/wandb-summary.json b/reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/wandb-summary.json
similarity index 100%
rename from wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/wandb-summary.json
rename to reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/files/wandb-summary.json
diff --git a/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/run-a95c66a5-352e-4c9f-a85c-406c8e877340.wandb b/reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/run-a95c66a5-352e-4c9f-a85c-406c8e877340.wandb
similarity index 100%
rename from wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/run-a95c66a5-352e-4c9f-a85c-406c8e877340.wandb
rename to reports/wandb/run-20250116_101941-a95c66a5-352e-4c9f-a85c-406c8e877340/run-a95c66a5-352e-4c9f-a85c-406c8e877340.wandb
diff --git a/src/data/make_dataset.py b/src/data/make_dataset.py
index b0bc321..befdbf6 100644
--- a/src/data/make_dataset.py
+++ b/src/data/make_dataset.py
@@ -10,7 +10,6 @@ import pandas as pd
 import nle.dataset as nld
 from nle.dataset import db
 
-
 """
 Builds the NLD-NAO database from unzipped game data files and saves it to location.
 
diff --git a/src/models/bco.py b/src/models/bco.py
index e69de29..a9c6122 100644
--- a/src/models/bco.py
+++ b/src/models/bco.py
@@ -0,0 +1 @@
+# TODO: Integrate BC and Inverse Model from GitHub to obtain BCO algorithm
\ No newline at end of file
diff --git a/src/models/behavioral-cloning.py b/src/models/behavioral-cloning.py
index d826ee4..42954e7 100644
--- a/src/models/behavioral-cloning.py
+++ b/src/models/behavioral-cloning.py
@@ -30,6 +30,7 @@ class TrainConfig:
     character: str = "mon-hum-neu"
     data_mode: str = "compressed"
     size: str = "small"
+
     # Wandb logging
     project: str = "NetHack"
     group: str = "small_scale_bc"
diff --git a/src/models/inverse-model.py b/src/models/inverse-model.py
index e69de29..f3cc0cc 100644
--- a/src/models/inverse-model.py
+++ b/src/models/inverse-model.py
@@ -0,0 +1,241 @@
+"""Adapted from Chaos Dwarf in Nethack Challenge Starter Kit:
+https://github.com/Miffyli/nle-sample-factory-baseline
+
+MIT License
+
+Copyright (c) 2021 Anssi
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+"""
+import torch
+import torchvision.models as models
+from nle import nethack
+from torch import nn
+from torch.nn import functional as F
+
+from hackrl.models.chaotic_dwarf import ScreenEncoder
+
+
+class TopLineEncoder(nn.Module):
+    def __init__(self):
+        super(TopLineEncoder, self).__init__()
+        self.hidden_dim = 128
+        self.i_dim = nethack.NLE_TERM_CO * 256
+
+        self.msg_fwd = nn.Sequential(
+            nn.Linear(self.i_dim, 128),
+            nn.ELU(inplace=True),
+            nn.Linear(128, self.hidden_dim),
+            nn.ELU(inplace=True),
+            nn.Linear(128, self.hidden_dim),
+            nn.ELU(inplace=True),
+            nn.Linear(128, self.hidden_dim),
+            nn.ELU(inplace=True),
+        )
+
+    def forward(self, message):
+        # Characters start at 33 in ASCII and go to 128. 96 = 128 - 32
+        message_normed = (
+            F.one_hot((message).long(), 256).reshape(-1, self.i_dim).float()
+        )
+        return self.msg_fwd(message_normed)
+
+
+class ResnetEncoder(nn.Module):
+    def __init__(self):
+        super(ResnetEncoder, self).__init__()
+        self.resnet = models.resnet18()
+        self.resnet.train()
+        self.hidden_dim = 512
+        self.fwd = nn.Sequential(
+            nn.Linear(1000, self.hidden_dim),
+            nn.ELU(inplace=True),
+        )
+
+    def forward(self, screen_image):
+        return self.fwd(self.resnet(screen_image / 255.0))
+
+
+class BigCharEncoder(nn.Module):
+    def __init__(self):
+        super(BigCharEncoder, self).__init__()
+        self.hidden_dim = 128
+        self.bidirectional = True
+        self.core_dim = 128
+        self.core_out = self.core_dim * 2 if self.bidirectional else self.core_dim
+        self.chars = nethack.NLE_TERM_CO
+        self.i_dim = 256
+
+        self.msg_encode = nn.Sequential(
+            nn.Linear(256, 128),
+            nn.ELU(inplace=True),
+        )
+        self.core_decode = nn.Sequential(
+            nn.Linear(self.core_out, self.hidden_dim),
+            nn.ELU(inplace=True),
+        )
+
+        self.core = nn.GRU(
+            128,
+            self.core_dim,
+            num_layers=1,
+            bidirectional=self.bidirectional,
+            batch_first=True,
+        )
+
+    def forward(self, message):
+
+        B, C = message.shape
+        x = F.one_hot(message.long(), 256).float()
+        x = self.msg_encode(x)
+        output, state = self.core(x)  # [B, C, core], [2, B, C]
+
+        state = state.transpose(0, 1).reshape(B, 1, self.core_out)  # [batch, 1, core]
+        weights = F.softmax(torch.sum(state * output, dim=2), dim=1).view(
+            B, C, 1
+        )  # [batch, col, 1]
+        x = torch.sum(output * weights, dim=1)  # [ batch,  core]
+        x = self.core_decode(x)
+        return x
+
+
+def conv_outdim(i_dim, k, padding=0, stride=1, dilation=1):
+    """Return the dimension after applying a convolution along one axis"""
+    return int(1 + (i_dim + 2 * padding - dilation * (k - 1) - 1) / stride)
+
+
+class InverseModel(nn.Module):
+    def __init__(self, h_dim, action_space, use_difference_vector=False):
+        super(InverseModel, self).__init__()
+        self.h_dim = h_dim
+        self.use_difference_vector = use_difference_vector
+        if not use_difference_vector:
+            self.h_dim *= 2
+        self.action_space = action_space
+
+        self.fwd_model = nn.Sequential(
+            nn.Linear(self.h_dim, 128),
+            nn.ELU(inplace=True),
+            nn.Linear(128, 128),
+            nn.ELU(inplace=True),
+            nn.Linear(128, action_space),
+        )
+
+    def forward(self, obs):
+        T, B, *_ = obs.shape
+        if self.use_difference_vector:
+            x = obs[1:] - obs[:-1]
+        else:
+            x = torch.cat([obs[:-1], obs[1:]], dim=-1)
+        pred_a = self.fwd_model(x)
+        off_by_one = torch.ones((1, B, self.action_space), device=x.device) * -1
+        return torch.cat([pred_a, off_by_one], dim=0)
+
+
+class BigInverseOnlyModel(nn.Module):
+    def __init__(self, shape, action_space, flags, device):
+        super(BigInverseOnlyModel, self).__init__()
+
+        self.flags = flags
+        self.num_actions = len(action_space)
+
+        self.use_inverse_model = flags.use_inverse_model
+        self.use_tty_only = flags.use_tty_only
+        self.use_prev_action = flags.use_prev_action
+
+        self.topline_encoder = TopLineEncoder()
+
+        pixel_size = flags.pixel_size
+        if flags.crop_dim == 0:
+            screen_shape = (24 * pixel_size, 80 * pixel_size)
+        else:
+            screen_shape = (flags.crop_dim * pixel_size, flags.crop_dim * pixel_size)
+
+        if flags.use_resnet:
+            self.screen_encoder = torch.jit.script(ResnetEncoder())
+        else:
+            self.screen_encoder = torch.jit.script(ScreenEncoder(screen_shape))
+
+        self.prev_actions_dim = self.num_actions if self.use_prev_action else 0
+
+        self.h_dim = sum(
+            [
+                self.topline_encoder.hidden_dim,
+                self.screen_encoder.hidden_dim,
+                self.prev_actions_dim,
+            ]
+        )
+
+        self.hidden_dim = 512
+        self.inverse_model = InverseModel(
+            self.h_dim, self.num_actions, self.flags.use_difference_vector
+        )
+        self.version = 0
+
+    def initial_state(self, batch_size=1):
+        return tuple(torch.zeros(1, batch_size, 1) for _ in range(2))
+
+    def forward(self, inputs, core_state):
+        T, B, C, H, W = inputs["screen_image"].shape
+
+        topline = inputs["tty_chars"][..., 0, :]
+
+        st = [
+            self.topline_encoder(
+                topline.float(memory_format=torch.contiguous_format).view(T * B, -1)
+            ),
+            self.screen_encoder(
+                inputs["screen_image"]
+                .float(memory_format=torch.contiguous_format)
+                .view(T * B, C, H, W)
+            ),
+        ]
+        if self.use_prev_action:
+            st.append(
+                torch.nn.functional.one_hot(
+                    inputs["prev_action"], self.num_actions
+                ).view(T * B, -1)
+            )
+
+        st = torch.cat(st, dim=1)
+
+        core_input = st.view(T, B, -1)
+        inverse_action_logits = self.inverse_model(core_input)
+
+        policy_logits = torch.ones((T * B, self.num_actions))
+        baseline = torch.zeros((T * B))
+        action = torch.multinomial(F.softmax(policy_logits, dim=1), num_samples=1)
+
+        policy_logits = policy_logits.view(T, B, -1)
+        baseline = baseline.view(T, B)
+        action = action.view(T, B)
+
+        version = torch.ones_like(action) * self.version
+
+        output = dict(
+            policy_logits=policy_logits,
+            baseline=baseline,
+            action=action,
+            version=version,
+            inverse_action_logits=inverse_action_logits,
+            encoded_state=core_input,
+        )
+        output = {k: v.to(self.flags.device) for k, v in output.items()}
+
+        return (output, core_state)
\ No newline at end of file
