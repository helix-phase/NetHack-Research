diff --git a/checkpoints/inverse_bc-v0/inverse_bc-arc-hum-neu-arc-hum-neu-5a8847e1/config.yaml b/checkpoints/inverse_bc-v0/inverse_bc-arc-hum-neu-arc-hum-neu-5a8847e1/config.yaml
new file mode 100644
index 0000000..9c7924f
--- /dev/null
+++ b/checkpoints/inverse_bc-v0/inverse_bc-arc-hum-neu-arc-hum-neu-5a8847e1/config.yaml
@@ -0,0 +1,34 @@
+align: NEUTRAL
+batch_size: 256
+character: arc-hum-neu
+checkpoints_path: ./checkpoints/inverse_bc-v0/inverse_bc-arc-hum-neu-arc-hum-neu-5a8847e1
+clip_grad_norm: null
+data_mode: compressed
+data_path: /code/NetHack-Research/data/processed/hdf5_data/
+eval_episodes: 25
+eval_every: 5000
+eval_processes: 8
+eval_seed: 52
+group: inverse_bc-v0
+inverse_model_lr: 0.0001
+inverse_model_path: null
+inverse_model_weight: 1.0
+learning_rate: 0.0003
+name: inverse_bc-arc-hum-neu-arc-hum-neu-5a8847e1
+project: NetHack
+race: HUMAN
+render_processes: 8
+rnn_dropout: 0.0
+rnn_hidden_dim: 1024
+rnn_layers: 1
+role: ARCHEOLOGIST
+seq_len: 8
+size: small
+train_inverse_model: true
+train_seed: 42
+update_steps: 25000
+use_difference_vector: false
+use_inverse_model: true
+use_prev_action: true
+version: 0
+weight_decay: 0.0
diff --git a/config/config.yaml b/config/config.yaml
index e69de29..7d26102 100644
--- a/config/config.yaml
+++ b/config/config.yaml
@@ -0,0 +1,31 @@
+character: arc-hum-neu
+data_mode: compressed
+data_path: /code/NetHack-Research/data/processed/hdf5_data/
+project: NetHack
+group: inverse_bc
+name: inverse_bc
+version: 0
+
+# Model
+rnn_hidden_dim: 1024
+rnn_layers: 1
+use_prev_action: true
+rnn_dropout: 0.0
+
+# Inverse Model
+use_inverse_model: true
+train_inverse_model: true  # Enable inverse model training
+inverse_model_weight: 1.0
+use_difference_vector: false
+
+# Training
+update_steps: 25000
+batch_size: 256
+seq_len: 8
+learning_rate: 3e-4
+weight_decay: 0.0
+eval_every: 5000
+eval_episodes: 25
+eval_processes: 8
+render_processes: 8
+checkpoints_path: ./checkpoints
\ No newline at end of file
diff --git a/config/inverse.config.yaml b/config/inverse.config.yaml
new file mode 100644
index 0000000..294af07
--- /dev/null
+++ b/config/inverse.config.yaml
@@ -0,0 +1,5 @@
+character: arc-hum-neu
+use_inverse_model: true
+train_inverse_model: true
+inverse_model_weight: 1.0
+data_path: /code/NetHack-Research/data/processed/hdf5_data/
\ No newline at end of file
diff --git a/generate.sh b/generate.sh
deleted file mode 100755
index 2f8c567..0000000
--- a/generate.sh
+++ /dev/null
@@ -1,67 +0,0 @@
-#!/bin/bash
-export DATA_PATH="/code/nld-nao/nld-nao-unzipped"
-export SAVE_PATH="/code/NetHack-Research/data/raw/converted_data/"
-
-
-combos=(
-    "arc hum law"
-    "arc hum neu"
-    "arc dwa law"
-    "arc gno neu"
-
-    "bar hum neu"
-    "bar hum cha"
-    "bar orc cha"
-
-    "cav hum law"
-    "cav hum neu"
-    "cav dwa law"
-    "cav gno neu"
-
-    "hea hum neu"
-    "hea gno neu"
-
-    "kni hum law"
-
-    "mon hum neu"
-    "mon hum law"
-    "mon hum cha"
-
-    "pri hum neu"
-    "pri hum law"
-    "pri hum cha"
-    "pri elf cha"
-
-    "ran hum neu"
-    "ran hum cha"
-    "ran elf cha"
-    "ran gno neu"
-    "ran orc cha"
-
-    "rog hum cha"
-    "rog orc cha"
-
-    "sam hum law"
-
-    "tou hum neu"
-
-    "val hum neu"
-    "val hum law"
-    "val dwa law"
-
-    "wiz hum neu"
-    "wiz hum cha"
-    "wiz elf cha"
-    "wiz gno neu"
-    "wiz orc cha"
-)
-
-for tup in "${combos[@]}"
-do
-    set -- $tup
-    python3 generate_dataset.py \
-        --data_path=$DATA_PATH \
-        --save_path=$SAVE_PATH \
-        --role="$1" --race="$2" --alignment="$3" \
-        --num_episodes=700
-done
\ No newline at end of file
diff --git a/main.py b/main.py
new file mode 100644
index 0000000..1b996c7
--- /dev/null
+++ b/main.py
@@ -0,0 +1,110 @@
+#!/usr/bin/env python3
+import os
+import sys
+import argparse
+from src.models.bco import train, TrainConfig
+from multiprocessing import set_start_method
+from katakomba.utils.roles import Role, Race, Alignment
+
+
+def parse_character(character_str):
+    """Parse character string into role, race, alignment objects"""
+    parts = character_str.split("-")
+    if len(parts) != 3:
+        raise ValueError(f"Invalid character format: {character_str}. Expected format: 'role-race-alignment'")
+    return Role(parts[0]), Race(parts[1]), Alignment(parts[2])
+
+
+def main():
+    parser = argparse.ArgumentParser(description="Inverse BC Training for NetHack")
+    parser.add_argument("--character", type=str, default="tou-hum-neu",
+                        help="Character type in format 'role-race-alignment'")
+    parser.add_argument("--data_path", type=str,
+                        default="/code/NetHack-Research/data/processed/hdf5_data/",
+                        help="Path to HDF5 data files")
+    parser.add_argument("--data_mode", type=str, default="compressed",
+                        choices=["compressed", "in_memory", "memmap"],
+                        help="Data loading mode")
+    parser.add_argument("--checkpoints_path", type=str, default="./checkpoints",
+                        help="Path to save checkpoints")
+    parser.add_argument("--batch_size", type=int, default=256,
+                        help="Batch size for training")
+    parser.add_argument("--seq_len", type=int, default=8,
+                        help="Sequence length for training")
+    parser.add_argument("--update_steps", type=int, default=25000,
+                        help="Number of update steps")
+    parser.add_argument("--eval_episodes", type=int, default=25,
+                        help="Number of episodes to evaluate on")
+    parser.add_argument("--eval_every", type=int, default=5000,
+                        help="Evaluation interval (steps)")
+    parser.add_argument("--train_inverse", action="store_true",
+                        help="Train the inverse model along with BC")
+    parser.add_argument("--inverse_weight", type=float, default=1.0,
+                        help="Weight for inverse model loss")
+    parser.add_argument("--use_diff_vector", action="store_true",
+                        help="Use difference vector for inverse model")
+    parser.add_argument("--inverse_model_path", type=str, default=None,
+                        help="Path to pretrained inverse model (optional)")
+    parser.add_argument("--seed", type=int, default=42,
+                        help="Random seed")
+    parser.add_argument("--wandb_project", type=str, default="NetHack",
+                        help="WandB project name")
+    parser.add_argument("--wandb_group", type=str, default="inverse_bc",
+                        help="WandB group name")
+
+    args = parser.parse_args()
+
+    # Parse the character string
+    role, race, align = parse_character(args.character)
+
+    # Create a config with the parsed arguments
+    config = TrainConfig(
+        character=args.character,
+        data_path=args.data_path,
+        data_mode=args.data_mode,
+        project=args.wandb_project,
+        group=args.wandb_group,
+        name=f"inverse_bc-{args.character}",
+        checkpoints_path=args.checkpoints_path,
+        batch_size=args.batch_size,
+        seq_len=args.seq_len,
+        update_steps=args.update_steps,
+        eval_episodes=args.eval_episodes,
+        eval_every=args.eval_every,
+        use_inverse_model=True,  # Always use inverse model for state-only data
+        train_inverse_model=args.train_inverse,
+        inverse_model_weight=args.inverse_weight,
+        use_difference_vector=args.use_diff_vector,
+        inverse_model_path=args.inverse_model_path,
+        train_seed=args.seed,
+        eval_seed=args.seed + 10,
+    )
+
+    # Set role, race, align explicitly since they're needed in the code
+    config.role = role
+    config.race = race
+    config.align = align
+
+    print(f"Starting training with character: {args.character}")
+    print(f"Inverse model training: {'Enabled' if args.train_inverse else 'Disabled'}")
+    print(f"Checkpoints will be saved to: {args.checkpoints_path}")
+
+    try:
+        # Run training
+        actor, inverse_model = train(config)
+
+        print("\nTraining complete!")
+        if config.checkpoints_path:
+            print(f"Final models saved to: {config.checkpoints_path}")
+    except Exception as e:
+        print(f"\nError during training: {e}")
+        import traceback
+        traceback.print_exc()
+        return 1
+
+    return 0
+
+
+if __name__ == "__main__":
+    set_start_method("spawn")
+    sys.exit(main())
\ No newline at end of file
diff --git a/notebooks/1-15-2024_NLD-AA.ipynb b/notebooks/1-15-2024_NLD-AA.ipynb
index 034477c..75da5f1 100644
--- a/notebooks/1-15-2024_NLD-AA.ipynb
+++ b/notebooks/1-15-2024_NLD-AA.ipynb
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2025-03-05T23:44:05.077505Z",
-     "start_time": "2025-03-05T23:44:04.905243Z"
+     "end_time": "2025-03-09T02:09:26.428138Z",
+     "start_time": "2025-03-09T02:09:26.174497Z"
     }
    },
    "source": [
@@ -21,8 +21,8 @@
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-03-05T23:44:06.990605Z",
-     "start_time": "2025-03-05T23:44:06.987347Z"
+     "end_time": "2025-03-09T02:09:27.183606Z",
+     "start_time": "2025-03-09T02:09:27.180168Z"
     }
    },
    "cell_type": "code",
@@ -38,8 +38,8 @@
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-03-05T23:44:07.739017Z",
-     "start_time": "2025-03-05T23:44:07.727961Z"
+     "end_time": "2025-03-09T02:09:28.643251Z",
+     "start_time": "2025-03-09T02:09:28.639310Z"
     }
    },
    "cell_type": "code",
@@ -56,8 +56,8 @@
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-03-05T23:44:08.647238Z",
-     "start_time": "2025-03-05T23:44:08.637513Z"
+     "end_time": "2025-03-09T02:09:30.469520Z",
+     "start_time": "2025-03-09T02:09:30.465354Z"
     }
    },
    "cell_type": "code",
diff --git a/notebooks/1-2-2024_Expert-Filtering.ipynb b/notebooks/1-2-2024_Expert-Filtering.ipynb
index e603f1a..8111243 100644
--- a/notebooks/1-2-2024_Expert-Filtering.ipynb
+++ b/notebooks/1-2-2024_Expert-Filtering.ipynb
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2025-03-05T20:33:33.034959Z",
-     "start_time": "2025-03-05T20:33:33.032147Z"
+     "end_time": "2025-03-11T03:42:03.548164Z",
+     "start_time": "2025-03-11T03:42:03.544865Z"
     }
    },
    "source": [
@@ -17,13 +17,13 @@
     "import seaborn as sns"
    ],
    "outputs": [],
-   "execution_count": 1
+   "execution_count": 3
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-03-05T22:35:33.998621Z",
-     "start_time": "2025-03-05T22:35:28.344707Z"
+     "end_time": "2025-03-11T03:42:19.751508Z",
+     "start_time": "2025-03-11T03:42:12.019773Z"
     }
    },
    "cell_type": "code",
@@ -33,56 +33,326 @@
     "\n",
     "# Load CSV to Pandas Dataframe\n",
     "df = pd.read_csv(csv_path)\n",
-    "df.head()"
+    "df.head(50)"
    ],
    "id": "55f10c2a1846d900",
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "      name            starttime              endtime   gameid version  points  \\\n",
-       "0  Player0  2008-03-22 00:07:04  2008-03-22 00:07:40  3520378   3.4.3       0   \n",
-       "1  Player0  2008-03-22 00:07:43  2008-03-22 00:09:50  3520380   3.4.3       0   \n",
-       "2  Player0  2008-03-22 22:12:31  2008-03-22 22:14:21  3520795   3.4.3     161   \n",
-       "3  Player0  2008-03-23 11:21:37  2008-03-23 19:35:39  3521208   3.4.3     250   \n",
-       "4  Player0  2008-03-23 19:36:30  2008-03-23 19:37:24  3521210   3.4.3       3   \n",
+       "       name            starttime              endtime   gameid version  \\\n",
+       "0   Player0  2008-03-22 00:07:04  2008-03-22 00:07:40  3520378   3.4.3   \n",
+       "1   Player0  2008-03-22 00:07:43  2008-03-22 00:09:50  3520380   3.4.3   \n",
+       "2   Player0  2008-03-22 22:12:31  2008-03-22 22:14:21  3520795   3.4.3   \n",
+       "3   Player0  2008-03-23 11:21:37  2008-03-23 19:35:39  3521208   3.4.3   \n",
+       "4   Player0  2008-03-23 19:36:30  2008-03-23 19:37:24  3521210   3.4.3   \n",
+       "5   Player0  2008-03-23 19:39:08  2008-03-23 19:39:58  3521212   3.4.3   \n",
+       "6   Player0  2009-03-03 11:13:36  2009-03-03 11:23:03  3741776   3.4.3   \n",
+       "7   Player0  2009-03-03 11:23:06  2009-07-16 18:52:26  3827696   3.4.3   \n",
+       "8   Player0  2009-10-17 15:49:11  2010-05-15 08:54:13  4040069   3.4.3   \n",
+       "9   Player0  2010-12-07 15:28:43  2011-01-07 20:20:00  4361193   3.4.3   \n",
+       "10  Player0  2011-01-07 20:49:13  2011-03-07 09:02:49  4405666   3.4.3   \n",
+       "11  Player0  2011-10-08 18:24:25  2011-10-08 18:45:42  4716721   3.4.3   \n",
+       "12  Player0  2011-10-08 23:30:59  2011-10-30 19:27:43  4756163   3.4.3   \n",
+       "13  Player0  2011-11-22 17:07:46  2012-05-13 03:54:32  4943035   3.4.3   \n",
+       "14  Player0  2012-05-18 18:51:08  2012-09-22 10:32:18  5473479   3.4.3   \n",
+       "15  Player0  2012-09-22 10:47:17  2012-09-22 10:51:17  5473482   3.4.3   \n",
+       "16  Player0  2012-10-18 18:03:04  2013-03-15 13:56:47  5640832   3.4.3   \n",
+       "17  Player0  2013-03-15 14:08:25  2013-10-25 18:04:09  5880363   3.4.3   \n",
+       "18  Player0  2014-03-03 16:09:21  2015-03-25 15:14:56  6219503   3.4.3   \n",
+       "19  Player0  2015-12-08 10:08:36  2015-12-08 10:09:21  2237469   3.6.0   \n",
+       "20  Player0  2016-05-30 08:11:38  2017-10-30 20:21:37  2780724   3.6.0   \n",
+       "21  Player1  2010-07-30 08:23:27  2010-07-30 09:02:23  4085412   3.4.3   \n",
+       "22  Player1  2010-07-30 09:02:50  2010-07-31 17:39:29  4086650   3.4.3   \n",
+       "23  Player1  2010-07-31 17:39:41  2010-07-31 17:40:35  4086653   3.4.3   \n",
+       "24  Player1  2010-07-31 17:40:43  2010-07-31 18:18:57  4086664   3.4.3   \n",
+       "25  Player1  2010-07-31 18:19:02  2010-07-31 18:24:20  4086668   3.4.3   \n",
+       "26  Player1  2010-08-02 09:09:27  2010-08-02 14:46:01  4088569   3.4.3   \n",
+       "27  Player1  2010-08-02 14:46:06  2010-08-02 14:58:10  4088575   3.4.3   \n",
+       "28  Player1  2010-08-02 14:58:14  2010-08-02 15:35:18  4088585   3.4.3   \n",
+       "29  Player1  2010-08-02 15:35:24  2010-08-02 15:42:43  4088588   3.4.3   \n",
+       "30  Player1  2010-08-02 15:42:54  2010-08-02 15:59:43  4088592   3.4.3   \n",
+       "31  Player1  2010-08-03 00:46:38  2010-08-03 01:15:03  4088980   3.4.3   \n",
+       "32  Player1  2010-08-03 01:15:11  2010-08-03 01:35:23  4088988   3.4.3   \n",
+       "33  Player1  2010-08-03 01:35:28  2010-08-03 02:47:49  4089071   3.4.3   \n",
+       "34  Player1  2010-08-03 02:48:04  2010-08-03 07:47:56  4089227   3.4.3   \n",
+       "35  Player1  2010-08-03 07:48:02  2010-08-03 08:03:01  4089232   3.4.3   \n",
+       "36  Player1  2010-08-03 08:03:07  2010-08-03 08:52:41  4089253   3.4.3   \n",
+       "37  Player1  2010-08-03 08:52:49  2010-08-03 14:22:09  4089502   3.4.3   \n",
+       "38  Player1  2010-08-03 14:22:28  2010-08-03 14:53:45  4089509   3.4.3   \n",
+       "39  Player1  2010-08-04 02:17:47  2010-08-04 02:37:57  4089909   3.4.3   \n",
+       "40  Player1  2010-08-04 02:38:03  2010-08-04 06:48:42  4090106   3.4.3   \n",
+       "41  Player1  2010-08-04 06:48:48  2010-08-04 07:07:44  4090112   3.4.3   \n",
+       "42  Player1  2010-08-04 07:09:18  2010-08-04 08:14:10  4090137   3.4.3   \n",
+       "43  Player1  2010-08-04 08:14:15  2010-08-05 01:40:15  4091234   3.4.3   \n",
+       "44  Player1  2010-08-05 01:40:21  2010-08-05 04:22:02  4091321   3.4.3   \n",
+       "45  Player1  2010-08-05 04:22:07  2010-08-05 05:50:04  4091348   3.4.3   \n",
+       "46  Player1  2010-08-05 05:50:09  2010-08-05 05:51:38  4091349   3.4.3   \n",
+       "47  Player1  2010-08-05 05:51:46  2010-08-05 07:09:20  4091464   3.4.3   \n",
+       "48  Player1  2010-08-05 07:09:25  2010-08-05 07:16:54  4091466   3.4.3   \n",
+       "49  Player1  2010-08-05 07:16:57  2010-08-11 06:41:32  4095604   3.4.3   \n",
        "\n",
-       "   deathdnum  deathlev  maxlvl  hp  ...  gender  align  \\\n",
-       "0          0         1       1   0  ...     Fem    Neu   \n",
-       "1          0         1       1  -1  ...     Mal    Cha   \n",
-       "2          0         3       3  15  ...     Fem    Cha   \n",
-       "3          2         6       6 -17  ...     Mal    Cha   \n",
-       "4          7        -5       1  16  ...     Fem    Neu   \n",
+       "    points  deathdnum  deathlev  maxlvl  hp  ...  gender  align  \\\n",
+       "0        0          0         1       1   0  ...     Fem    Neu   \n",
+       "1        0          0         1       1  -1  ...     Mal    Cha   \n",
+       "2      161          0         3       3  15  ...     Fem    Cha   \n",
+       "3      250          2         6       6 -17  ...     Mal    Cha   \n",
+       "4        3          7        -5       1  16  ...     Fem    Neu   \n",
+       "5        5          7        -5       1  10  ...     Fem    Neu   \n",
+       "6        0          0         1       1   0  ...     Fem    Neu   \n",
+       "7       78          0         2       2   0  ...     Mal    Law   \n",
+       "8        0          0         1       1  14  ...     Mal    Cha   \n",
+       "9        0          0         1       1   0  ...     Mal    Law   \n",
+       "10    9378          2         7      28  10  ...     Fem    Neu   \n",
+       "11       0          0         1       1  15  ...     Mal    Neu   \n",
+       "12      11          0         1       1  15  ...     Fem    Law   \n",
+       "13    6009          0         2      23  42  ...     Fem    Neu   \n",
+       "14    1326          0         2       2  -4  ...     Fem    Law   \n",
+       "15      58          0         1       2   0  ...     Fem    Cha   \n",
+       "16     550          0         1       6  25  ...     Mal    Neu   \n",
+       "17       4          0         1       1   7  ...     Fem    Neu   \n",
+       "18     260          0         6       6   3  ...     Mal    Cha   \n",
+       "19     106          0         2       2   0  ...     Mal    Neu   \n",
+       "20      37          0         1       1  -1  ...     Fem    Neu   \n",
+       "21    2091          2         4       4   0  ...     Fem    Cha   \n",
+       "22     144          0         2       3 -17  ...     Fem    Cha   \n",
+       "23       0          0         1       1  -1  ...     Fem    Cha   \n",
+       "24    1806          2         5       5   0  ...     Fem    Cha   \n",
+       "25     190          0         1       2   0  ...     Fem    Cha   \n",
+       "26     761          0         5       5   0  ...     Fem    Cha   \n",
+       "27     657          0         3       4  31  ...     Fem    Cha   \n",
+       "28    1241          0         5       6  -1  ...     Fem    Cha   \n",
+       "29     659          0         4       4  19  ...     Fem    Cha   \n",
+       "30    1565          0         8       8   0  ...     Fem    Cha   \n",
+       "31    1561          0         7       8   0  ...     Fem    Cha   \n",
+       "32    3690          2         8       8  -8  ...     Fem    Cha   \n",
+       "33    4497          4         2       6  -8  ...     Fem    Cha   \n",
+       "34    5750          0        11      11   0  ...     Fem    Cha   \n",
+       "35    2438          2         5       5  -8  ...     Fem    Cha   \n",
+       "36    8229          4         8      10  -1  ...     Fem    Cha   \n",
+       "37    1620          0         6       7  -4  ...     Fem    Cha   \n",
+       "38    3886          0         7       8  -1  ...     Fem    Cha   \n",
+       "39     730          0         3       3   0  ...     Fem    Cha   \n",
+       "40    5577          2         4       5 -10  ...     Fem    Cha   \n",
+       "41    1153          2         4       4  -1  ...     Fem    Cha   \n",
+       "42    1511          0         2       3  -2  ...     Fem    Cha   \n",
+       "43    2598          0         6       7  -4  ...     Fem    Cha   \n",
+       "44    7453          2         6       6   0  ...     Fem    Cha   \n",
+       "45    2248          2         4       4   0  ...     Fem    Cha   \n",
+       "46       7          0         1       1  -3  ...     Fem    Cha   \n",
+       "47     992          0         3       4  -1  ...     Fem    Cha   \n",
+       "48     157          0         2       2  -2  ...     Fem    Cha   \n",
+       "49   85380          2         8      14  -9  ...     Fem    Cha   \n",
        "\n",
-       "                             death  \\\n",
-       "0         killed by kicking a wall   \n",
-       "1         killed by kicking a wall   \n",
-       "2                             quit   \n",
-       "3  killed by a priestess of Brigit   \n",
-       "4  escaped (in celestial disgrace)   \n",
+       "                                                death  \\\n",
+       "0                            killed by kicking a wall   \n",
+       "1                            killed by kicking a wall   \n",
+       "2                                                quit   \n",
+       "3                     killed by a priestess of Brigit   \n",
+       "4                     escaped (in celestial disgrace)   \n",
+       "5                                            ascended   \n",
+       "6                                killed by a grid bug   \n",
+       "7                                killed by a grid bug   \n",
+       "8                                                quit   \n",
+       "9                            killed by kicking a wall   \n",
+       "10                                               quit   \n",
+       "11                                               quit   \n",
+       "12                                               quit   \n",
+       "13                                               quit   \n",
+       "14                          killed by a black pudding   \n",
+       "15                               killed by a grid bug   \n",
+       "16                              killed by a death ray   \n",
+       "17                                               quit   \n",
+       "18                                               quit   \n",
+       "19                               killed by a grid bug   \n",
+       "20                                   killed by a newt   \n",
+       "21                                  killed by a dwarf   \n",
+       "22                  killed by a guard, while sleeping   \n",
+       "23                            killed by a water demon   \n",
+       "24                               killed by a housecat   \n",
+       "25                                    killed by a fox   \n",
+       "26                                 killed by a kitten   \n",
+       "27                                               quit   \n",
+       "28                              killed by a giant ant   \n",
+       "29                 poisoned by a rotted kobold corpse   \n",
+       "30                                   killed by a pony   \n",
+       "31                                  killed by a rothe   \n",
+       "32                         killed by a gnomish wizard   \n",
+       "33             killed by a giant mimic, while praying   \n",
+       "34                             killed by a rope golem   \n",
+       "35                                   killed by a wand   \n",
+       "36                           killed by a barrow wight   \n",
+       "37                             killed by a gnome lord   \n",
+       "38                 killed by a panther, while praying   \n",
+       "39                                 killed by a kitten   \n",
+       "40                            killed by a soldier ant   \n",
+       "41                          killed by a magic missile   \n",
+       "42                          killed by a magic missile   \n",
+       "43             killed by a rope golem, while helpless   \n",
+       "44                               killed by a fire ant   \n",
+       "45                                  killed by a rothe   \n",
+       "46                                   fell onto a sink   \n",
+       "47                             killed by a little dog   \n",
+       "48             killed by a hallucinogen-distorted fox   \n",
+       "49  killed by a priest of Mars, while paralyzed by...   \n",
        "\n",
-       "                                             conduct  turns  \\\n",
-       "0  foodless,vegan,vegetarian,atheist,weaponless,p...     52   \n",
-       "1  foodless,vegan,vegetarian,atheist,weaponless,p...     10   \n",
-       "2  foodless,vegan,vegetarian,atheist,illiterate,p...    308   \n",
-       "3  foodless,vegan,vegetarian,atheist,weaponless,p...      8   \n",
-       "4  foodless,vegan,vegetarian,atheist,weaponless,p...      1   \n",
+       "                                              conduct  turns  \\\n",
+       "0   foodless,vegan,vegetarian,atheist,weaponless,p...     52   \n",
+       "1   foodless,vegan,vegetarian,atheist,weaponless,p...     10   \n",
+       "2   foodless,vegan,vegetarian,atheist,illiterate,p...    308   \n",
+       "3   foodless,vegan,vegetarian,atheist,weaponless,p...      8   \n",
+       "4   foodless,vegan,vegetarian,atheist,weaponless,p...      1   \n",
+       "5   foodless,vegan,vegetarian,atheist,weaponless,p...      1   \n",
+       "6   foodless,vegan,vegetarian,atheist,pacifist,ill...     50   \n",
+       "7   foodless,vegan,vegetarian,atheist,illiterate,p...    237   \n",
+       "8   foodless,vegan,vegetarian,atheist,weaponless,p...    392   \n",
+       "9   foodless,vegan,vegetarian,atheist,weaponless,p...     11   \n",
+       "10  atheist,weaponless,illiterate,polypileless,pol...    218   \n",
+       "11  foodless,vegan,vegetarian,atheist,weaponless,p...     25   \n",
+       "12  foodless,vegan,vegetarian,atheist,weaponless,p...     50   \n",
+       "13  vegan,vegetarian,atheist,polypileless,polyself...   1977   \n",
+       "14  foodless,vegan,vegetarian,atheist,polypileless...    760   \n",
+       "15  atheist,illiterate,polypileless,polyselfless,w...     79   \n",
+       "16  atheist,weaponless,polyselfless,artifact_wishless   1094   \n",
+       "17  foodless,vegan,vegetarian,atheist,weaponless,i...     25   \n",
+       "18  foodless,vegan,vegetarian,atheist,weaponless,p...     18   \n",
+       "19  foodless,vegan,vegetarian,atheist,weaponless,p...     40   \n",
+       "20  foodless,vegan,vegetarian,atheist,weaponless,p...    186   \n",
+       "21  atheist,illiterate,polypileless,polyselfless,w...   1152   \n",
+       "22  atheist,illiterate,polypileless,polyselfless,w...    299   \n",
+       "23  foodless,vegan,vegetarian,atheist,weaponless,p...      6   \n",
+       "24  illiterate,polypileless,polyselfless,wishless,...   2226   \n",
+       "25  atheist,illiterate,polypileless,polyselfless,w...    448   \n",
+       "26  atheist,polypileless,polyselfless,wishless,art...   1171   \n",
+       "27  atheist,illiterate,polypileless,polyselfless,w...   1356   \n",
+       "28  atheist,illiterate,polypileless,polyselfless,w...   1206   \n",
+       "29  illiterate,polypileless,polyselfless,wishless,...    651   \n",
+       "30  polypileless,polyselfless,wishless,artifact_wi...   1375   \n",
+       "31  atheist,polypileless,polyselfless,wishless,art...   1394   \n",
+       "32  illiterate,polypileless,polyselfless,wishless,...   1935   \n",
+       "33  polypileless,polyselfless,wishless,artifact_wi...   4295   \n",
+       "34  illiterate,polypileless,wishless,artifact_wish...   2649   \n",
+       "35  atheist,illiterate,polypileless,polyselfless,w...   1063   \n",
+       "36  polypileless,polyselfless,wishless,artifact_wi...   3133   \n",
+       "37  polypileless,polyselfless,wishless,artifact_wi...   1007   \n",
+       "38  illiterate,polypileless,polyselfless,wishless,...   1378   \n",
+       "39  illiterate,polypileless,polyselfless,wishless,...    504   \n",
+       "40  polypileless,polyselfless,wishless,artifact_wi...   5149   \n",
+       "41  atheist,illiterate,polypileless,polyselfless,w...   1271   \n",
+       "42  illiterate,polypileless,polyselfless,wishless,...   1957   \n",
+       "43  polypileless,polyselfless,wishless,artifact_wi...   2616   \n",
+       "44  polypileless,wishless,artifact_wishless,genoci...   3847   \n",
+       "45  polypileless,polyselfless,wishless,artifact_wi...   2147   \n",
+       "46  foodless,vegan,vegetarian,atheist,weaponless,p...     98   \n",
+       "47  polypileless,polyselfless,wishless,artifact_wi...   1557   \n",
+       "48  vegan,vegetarian,atheist,illiterate,polypilele...    531   \n",
+       "49  polypileless,wishless,artifact_wishless,genoci...  26789   \n",
        "\n",
-       "                                            achieve realtime gender0 align0  \\\n",
-       "0                                               NaN       30     Fem    Neu   \n",
-       "1                                               NaN      125     Mal    Cha   \n",
-       "2                                               NaN      106     Fem    Cha   \n",
-       "3                                               NaN      632     Mal    Cha   \n",
-       "4  got_amulet_of_yendor,in_end_game,on_astral_plane       46     Fem    Neu   \n",
+       "                                              achieve realtime gender0 align0  \\\n",
+       "0                                                 NaN       30     Fem    Neu   \n",
+       "1                                                 NaN      125     Mal    Cha   \n",
+       "2                                                 NaN      106     Fem    Cha   \n",
+       "3                                                 NaN      632     Mal    Cha   \n",
+       "4    got_amulet_of_yendor,in_end_game,on_astral_plane       46     Fem    Neu   \n",
+       "5   got_amulet_of_yendor,in_end_game,on_astral_pla...       43     Fem    Neu   \n",
+       "6                                                 NaN       38     Fem    Neu   \n",
+       "7                                                 NaN      133     Mal    Law   \n",
+       "8                                                 NaN      417     Mal    Cha   \n",
+       "9                                                 NaN       97     Mal    Law   \n",
+       "10                                                NaN     4519     Fem    Neu   \n",
+       "11                                                NaN     1128     Mal    Neu   \n",
+       "12                                                NaN     1916     Fem    Law   \n",
+       "13                                                NaN     2788     Fem    Neu   \n",
+       "14                                                NaN     3725     Fem    Law   \n",
+       "15                                                NaN      129     Fem    Cha   \n",
+       "16                                                NaN     7895     Mal    Neu   \n",
+       "17                                                NaN      620     Fem    Neu   \n",
+       "18                                                NaN      622     Mal    Cha   \n",
+       "19                                                NaN       59     Mal    Neu   \n",
+       "20                                                NaN      100     Fem    Neu   \n",
+       "21                                                NaN     2308     Fem    Cha   \n",
+       "22                                                NaN      851     Fem    Cha   \n",
+       "23                                                NaN       50     Fem    Cha   \n",
+       "24                                                NaN     2288     Fem    Cha   \n",
+       "25                                                NaN      309     Fem    Cha   \n",
+       "26                                                NaN     1383     Fem    Cha   \n",
+       "27                                                NaN      713     Fem    Cha   \n",
+       "28                                                NaN      829     Fem    Cha   \n",
+       "29                                                NaN      420     Fem    Cha   \n",
+       "30                                                NaN      993     Fem    Cha   \n",
+       "31                                                NaN     1696     Fem    Cha   \n",
+       "32                                                NaN     1188     Fem    Cha   \n",
+       "33                                                NaN     4319     Fem    Cha   \n",
+       "34                                                NaN    14124     Fem    Cha   \n",
+       "35                                                NaN      895     Fem    Cha   \n",
+       "36                                                NaN     2971     Fem    Cha   \n",
+       "37                                                NaN      934     Fem    Cha   \n",
+       "38                                                NaN     1860     Fem    Cha   \n",
+       "39                                                NaN     1199     Fem    Cha   \n",
+       "40                                                NaN    15015     Fem    Cha   \n",
+       "41                                                NaN     1123     Fem    Cha   \n",
+       "42                                                NaN     3877     Fem    Cha   \n",
+       "43                                                NaN     3923     Fem    Cha   \n",
+       "44                                                NaN     9656     Fem    Cha   \n",
+       "45                                                NaN     5249     Fem    Cha   \n",
+       "46                                                NaN       80     Fem    Cha   \n",
+       "47                                                NaN     4642     Fem    Cha   \n",
+       "48                                                NaN      436     Fem    Cha   \n",
+       "49                     got_luckstone,finished_sokoban    74048     Fem    Cha   \n",
        "\n",
-       "                                               flags  \n",
-       "0  wizard_mode,discover_mode,never_loaded_bones_file  \n",
-       "1  wizard_mode,discover_mode,never_loaded_bones_file  \n",
-       "2  wizard_mode,discover_mode,never_loaded_bones_file  \n",
-       "3  wizard_mode,discover_mode,never_loaded_bones_file  \n",
-       "4  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "                                                flags  \n",
+       "0   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "1   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "2   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "3   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "4   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "5   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "6   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "7   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "8   wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "9                                                 NaN  \n",
+       "10                                        wizard_mode  \n",
+       "11                                        wizard_mode  \n",
+       "12                                        wizard_mode  \n",
+       "13                                        wizard_mode  \n",
+       "14                                        wizard_mode  \n",
+       "15                                        wizard_mode  \n",
+       "16                                        wizard_mode  \n",
+       "17                                        wizard_mode  \n",
+       "18                          wizard_mode,discover_mode  \n",
+       "19                            never_loaded_bones_file  \n",
+       "20                            never_loaded_bones_file  \n",
+       "21  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "22  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "23  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "24  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "25  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "26  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "27  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "28  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "29  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "30  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "31  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "32  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "33  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "34  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "35  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "36  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "37  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "38  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "39  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "40  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "41  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "42  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "43  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "44  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "45  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "46  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "47  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "48  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "49  wizard_mode,discover_mode,never_loaded_bones_file  \n",
        "\n",
-       "[5 rows x 27 columns]"
+       "[50 rows x 27 columns]"
       ],
       "text/html": [
        "<div>\n",
@@ -247,1383 +517,1978 @@
        "      <td>Neu</td>\n",
        "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
        "    </tr>\n",
+       "    <tr>\n",
+       "      <th>5</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2008-03-23 19:39:08</td>\n",
+       "      <td>2008-03-23 19:39:58</td>\n",
+       "      <td>3521212</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>5</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-5</td>\n",
+       "      <td>1</td>\n",
+       "      <td>10</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>ascended</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>1</td>\n",
+       "      <td>got_amulet_of_yendor,in_end_game,on_astral_pla...</td>\n",
+       "      <td>43</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>6</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2009-03-03 11:13:36</td>\n",
+       "      <td>2009-03-03 11:23:03</td>\n",
+       "      <td>3741776</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>killed by a grid bug</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,pacifist,ill...</td>\n",
+       "      <td>50</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>38</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>7</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2009-03-03 11:23:06</td>\n",
+       "      <td>2009-07-16 18:52:26</td>\n",
+       "      <td>3827696</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>78</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>killed by a grid bug</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,illiterate,p...</td>\n",
+       "      <td>237</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>133</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>8</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2009-10-17 15:49:11</td>\n",
+       "      <td>2010-05-15 08:54:13</td>\n",
+       "      <td>4040069</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>14</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>392</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>417</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>9</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2010-12-07 15:28:43</td>\n",
+       "      <td>2011-01-07 20:20:00</td>\n",
+       "      <td>4361193</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>killed by kicking a wall</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>11</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>97</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>10</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2011-01-07 20:49:13</td>\n",
+       "      <td>2011-03-07 09:02:49</td>\n",
+       "      <td>4405666</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>9378</td>\n",
+       "      <td>2</td>\n",
+       "      <td>7</td>\n",
+       "      <td>28</td>\n",
+       "      <td>10</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>atheist,weaponless,illiterate,polypileless,pol...</td>\n",
+       "      <td>218</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>4519</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>11</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2011-10-08 18:24:25</td>\n",
+       "      <td>2011-10-08 18:45:42</td>\n",
+       "      <td>4716721</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>15</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>25</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1128</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>12</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2011-10-08 23:30:59</td>\n",
+       "      <td>2011-10-30 19:27:43</td>\n",
+       "      <td>4756163</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>11</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>15</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>50</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1916</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>13</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2011-11-22 17:07:46</td>\n",
+       "      <td>2012-05-13 03:54:32</td>\n",
+       "      <td>4943035</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>6009</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>23</td>\n",
+       "      <td>42</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>vegan,vegetarian,atheist,polypileless,polyself...</td>\n",
+       "      <td>1977</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2788</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>14</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2012-05-18 18:51:08</td>\n",
+       "      <td>2012-09-22 10:32:18</td>\n",
+       "      <td>5473479</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>1326</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>-4</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>killed by a black pudding</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,polypileless...</td>\n",
+       "      <td>760</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>3725</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>15</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2012-09-22 10:47:17</td>\n",
+       "      <td>2012-09-22 10:51:17</td>\n",
+       "      <td>5473482</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>58</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a grid bug</td>\n",
+       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
+       "      <td>79</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>129</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>16</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2012-10-18 18:03:04</td>\n",
+       "      <td>2013-03-15 13:56:47</td>\n",
+       "      <td>5640832</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>550</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>6</td>\n",
+       "      <td>25</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>killed by a death ray</td>\n",
+       "      <td>atheist,weaponless,polyselfless,artifact_wishless</td>\n",
+       "      <td>1094</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>7895</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>17</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2013-03-15 14:08:25</td>\n",
+       "      <td>2013-10-25 18:04:09</td>\n",
+       "      <td>5880363</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>4</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>7</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,i...</td>\n",
+       "      <td>25</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>620</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>18</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2014-03-03 16:09:21</td>\n",
+       "      <td>2015-03-25 15:14:56</td>\n",
+       "      <td>6219503</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>260</td>\n",
+       "      <td>0</td>\n",
+       "      <td>6</td>\n",
+       "      <td>6</td>\n",
+       "      <td>3</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>18</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>622</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>19</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2015-12-08 10:08:36</td>\n",
+       "      <td>2015-12-08 10:09:21</td>\n",
+       "      <td>2237469</td>\n",
+       "      <td>3.6.0</td>\n",
+       "      <td>106</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>killed by a grid bug</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>40</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>59</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>20</th>\n",
+       "      <td>Player0</td>\n",
+       "      <td>2016-05-30 08:11:38</td>\n",
+       "      <td>2017-10-30 20:21:37</td>\n",
+       "      <td>2780724</td>\n",
+       "      <td>3.6.0</td>\n",
+       "      <td>37</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>killed by a newt</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>186</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>100</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>21</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-07-30 08:23:27</td>\n",
+       "      <td>2010-07-30 09:02:23</td>\n",
+       "      <td>4085412</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>2091</td>\n",
+       "      <td>2</td>\n",
+       "      <td>4</td>\n",
+       "      <td>4</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a dwarf</td>\n",
+       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
+       "      <td>1152</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2308</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>22</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-07-30 09:02:50</td>\n",
+       "      <td>2010-07-31 17:39:29</td>\n",
+       "      <td>4086650</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>144</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>3</td>\n",
+       "      <td>-17</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a guard, while sleeping</td>\n",
+       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
+       "      <td>299</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>851</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>23</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-07-31 17:39:41</td>\n",
+       "      <td>2010-07-31 17:40:35</td>\n",
+       "      <td>4086653</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a water demon</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>6</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>50</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>24</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-07-31 17:40:43</td>\n",
+       "      <td>2010-07-31 18:18:57</td>\n",
+       "      <td>4086664</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>1806</td>\n",
+       "      <td>2</td>\n",
+       "      <td>5</td>\n",
+       "      <td>5</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a housecat</td>\n",
+       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
+       "      <td>2226</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2288</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>25</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-07-31 18:19:02</td>\n",
+       "      <td>2010-07-31 18:24:20</td>\n",
+       "      <td>4086668</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>190</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a fox</td>\n",
+       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
+       "      <td>448</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>309</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>26</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-02 09:09:27</td>\n",
+       "      <td>2010-08-02 14:46:01</td>\n",
+       "      <td>4088569</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>761</td>\n",
+       "      <td>0</td>\n",
+       "      <td>5</td>\n",
+       "      <td>5</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a kitten</td>\n",
+       "      <td>atheist,polypileless,polyselfless,wishless,art...</td>\n",
+       "      <td>1171</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1383</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>27</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-02 14:46:06</td>\n",
+       "      <td>2010-08-02 14:58:10</td>\n",
+       "      <td>4088575</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>657</td>\n",
+       "      <td>0</td>\n",
+       "      <td>3</td>\n",
+       "      <td>4</td>\n",
+       "      <td>31</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
+       "      <td>1356</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>713</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>28</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-02 14:58:14</td>\n",
+       "      <td>2010-08-02 15:35:18</td>\n",
+       "      <td>4088585</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>1241</td>\n",
+       "      <td>0</td>\n",
+       "      <td>5</td>\n",
+       "      <td>6</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a giant ant</td>\n",
+       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
+       "      <td>1206</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>829</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>29</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-02 15:35:24</td>\n",
+       "      <td>2010-08-02 15:42:43</td>\n",
+       "      <td>4088588</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>659</td>\n",
+       "      <td>0</td>\n",
+       "      <td>4</td>\n",
+       "      <td>4</td>\n",
+       "      <td>19</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>poisoned by a rotted kobold corpse</td>\n",
+       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
+       "      <td>651</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>420</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>30</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-02 15:42:54</td>\n",
+       "      <td>2010-08-02 15:59:43</td>\n",
+       "      <td>4088592</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>1565</td>\n",
+       "      <td>0</td>\n",
+       "      <td>8</td>\n",
+       "      <td>8</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a pony</td>\n",
+       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
+       "      <td>1375</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>993</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>31</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-03 00:46:38</td>\n",
+       "      <td>2010-08-03 01:15:03</td>\n",
+       "      <td>4088980</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>1561</td>\n",
+       "      <td>0</td>\n",
+       "      <td>7</td>\n",
+       "      <td>8</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a rothe</td>\n",
+       "      <td>atheist,polypileless,polyselfless,wishless,art...</td>\n",
+       "      <td>1394</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1696</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>32</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-03 01:15:11</td>\n",
+       "      <td>2010-08-03 01:35:23</td>\n",
+       "      <td>4088988</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>3690</td>\n",
+       "      <td>2</td>\n",
+       "      <td>8</td>\n",
+       "      <td>8</td>\n",
+       "      <td>-8</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a gnomish wizard</td>\n",
+       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
+       "      <td>1935</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1188</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>33</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-03 01:35:28</td>\n",
+       "      <td>2010-08-03 02:47:49</td>\n",
+       "      <td>4089071</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>4497</td>\n",
+       "      <td>4</td>\n",
+       "      <td>2</td>\n",
+       "      <td>6</td>\n",
+       "      <td>-8</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a giant mimic, while praying</td>\n",
+       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
+       "      <td>4295</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>4319</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>34</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-03 02:48:04</td>\n",
+       "      <td>2010-08-03 07:47:56</td>\n",
+       "      <td>4089227</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>5750</td>\n",
+       "      <td>0</td>\n",
+       "      <td>11</td>\n",
+       "      <td>11</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a rope golem</td>\n",
+       "      <td>illiterate,polypileless,wishless,artifact_wish...</td>\n",
+       "      <td>2649</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>14124</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>35</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-03 07:48:02</td>\n",
+       "      <td>2010-08-03 08:03:01</td>\n",
+       "      <td>4089232</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>2438</td>\n",
+       "      <td>2</td>\n",
+       "      <td>5</td>\n",
+       "      <td>5</td>\n",
+       "      <td>-8</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a wand</td>\n",
+       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
+       "      <td>1063</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>895</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>36</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-03 08:03:07</td>\n",
+       "      <td>2010-08-03 08:52:41</td>\n",
+       "      <td>4089253</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>8229</td>\n",
+       "      <td>4</td>\n",
+       "      <td>8</td>\n",
+       "      <td>10</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a barrow wight</td>\n",
+       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
+       "      <td>3133</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2971</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>37</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-03 08:52:49</td>\n",
+       "      <td>2010-08-03 14:22:09</td>\n",
+       "      <td>4089502</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>1620</td>\n",
+       "      <td>0</td>\n",
+       "      <td>6</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-4</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a gnome lord</td>\n",
+       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
+       "      <td>1007</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>934</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>38</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-03 14:22:28</td>\n",
+       "      <td>2010-08-03 14:53:45</td>\n",
+       "      <td>4089509</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>3886</td>\n",
+       "      <td>0</td>\n",
+       "      <td>7</td>\n",
+       "      <td>8</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a panther, while praying</td>\n",
+       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
+       "      <td>1378</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1860</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>39</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-04 02:17:47</td>\n",
+       "      <td>2010-08-04 02:37:57</td>\n",
+       "      <td>4089909</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>730</td>\n",
+       "      <td>0</td>\n",
+       "      <td>3</td>\n",
+       "      <td>3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a kitten</td>\n",
+       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
+       "      <td>504</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1199</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>40</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-04 02:38:03</td>\n",
+       "      <td>2010-08-04 06:48:42</td>\n",
+       "      <td>4090106</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>5577</td>\n",
+       "      <td>2</td>\n",
+       "      <td>4</td>\n",
+       "      <td>5</td>\n",
+       "      <td>-10</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a soldier ant</td>\n",
+       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
+       "      <td>5149</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>15015</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>41</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-04 06:48:48</td>\n",
+       "      <td>2010-08-04 07:07:44</td>\n",
+       "      <td>4090112</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>1153</td>\n",
+       "      <td>2</td>\n",
+       "      <td>4</td>\n",
+       "      <td>4</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a magic missile</td>\n",
+       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
+       "      <td>1271</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1123</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>42</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-04 07:09:18</td>\n",
+       "      <td>2010-08-04 08:14:10</td>\n",
+       "      <td>4090137</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>1511</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>3</td>\n",
+       "      <td>-2</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a magic missile</td>\n",
+       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
+       "      <td>1957</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>3877</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>43</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-04 08:14:15</td>\n",
+       "      <td>2010-08-05 01:40:15</td>\n",
+       "      <td>4091234</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>2598</td>\n",
+       "      <td>0</td>\n",
+       "      <td>6</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-4</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a rope golem, while helpless</td>\n",
+       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
+       "      <td>2616</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>3923</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>44</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-05 01:40:21</td>\n",
+       "      <td>2010-08-05 04:22:02</td>\n",
+       "      <td>4091321</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>7453</td>\n",
+       "      <td>2</td>\n",
+       "      <td>6</td>\n",
+       "      <td>6</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a fire ant</td>\n",
+       "      <td>polypileless,wishless,artifact_wishless,genoci...</td>\n",
+       "      <td>3847</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>9656</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>45</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-05 04:22:07</td>\n",
+       "      <td>2010-08-05 05:50:04</td>\n",
+       "      <td>4091348</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>2248</td>\n",
+       "      <td>2</td>\n",
+       "      <td>4</td>\n",
+       "      <td>4</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a rothe</td>\n",
+       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
+       "      <td>2147</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>5249</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>46</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-05 05:50:09</td>\n",
+       "      <td>2010-08-05 05:51:38</td>\n",
+       "      <td>4091349</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>7</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>-3</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>fell onto a sink</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>98</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>80</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>47</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-05 05:51:46</td>\n",
+       "      <td>2010-08-05 07:09:20</td>\n",
+       "      <td>4091464</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>992</td>\n",
+       "      <td>0</td>\n",
+       "      <td>3</td>\n",
+       "      <td>4</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a little dog</td>\n",
+       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
+       "      <td>1557</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>4642</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>48</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-05 07:09:25</td>\n",
+       "      <td>2010-08-05 07:16:54</td>\n",
+       "      <td>4091466</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>157</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>-2</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a hallucinogen-distorted fox</td>\n",
+       "      <td>vegan,vegetarian,atheist,illiterate,polypilele...</td>\n",
+       "      <td>531</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>436</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>49</th>\n",
+       "      <td>Player1</td>\n",
+       "      <td>2010-08-05 07:16:57</td>\n",
+       "      <td>2010-08-11 06:41:32</td>\n",
+       "      <td>4095604</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>85380</td>\n",
+       "      <td>2</td>\n",
+       "      <td>8</td>\n",
+       "      <td>14</td>\n",
+       "      <td>-9</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>killed by a priest of Mars, while paralyzed by...</td>\n",
+       "      <td>polypileless,wishless,artifact_wishless,genoci...</td>\n",
+       "      <td>26789</td>\n",
+       "      <td>got_luckstone,finished_sokoban</td>\n",
+       "      <td>74048</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>50 rows × 27 columns</p>\n",
+       "</div>"
+      ]
+     },
+     "execution_count": 4,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "execution_count": 4
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-09T02:55:04.953549Z",
+     "start_time": "2025-03-09T02:55:04.852649Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Criteria 1: At least 20 total ascensions on public servers\n",
+    "ascended_games = df[df['death'] == \"ascended\"]\n",
+    "total_ascensions = ascended_games.groupby('name').size()\n",
+    "criterion_1 = total_ascensions >= 20\n",
+    "\n",
+    "criterion_1 = total_ascensions[criterion_1].index\n",
+    "\n",
+    "\n",
+    "# # Extract all games of these players from the full dataset\n",
+    "# temp = df[df['name'].isin(criterion_1)]\n",
+    "# \n",
+    "# criteria_1 = list(temp['gameid']) \n",
+    "\n"
+   ],
+   "id": "1ab930177a49a1e4",
+   "outputs": [],
+   "execution_count": 38
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-09T02:56:10.632426Z",
+     "start_time": "2025-03-09T02:55:05.843781Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Criterion 2: At least 8 consecutive ascensions\n",
+    "# Sort by player and end time\n",
+    "df = df.sort_values(by=['name', 'realtime'])\n",
+    "\n",
+    "# Identify consecutive ascensions\n",
+    "def longest_consecutive_ascensions(player_games):\n",
+    "    count = 0\n",
+    "    max_streak = 0\n",
+    "    for _, row in player_games.iterrows():\n",
+    "        if row['death'] == \"ascended\":\n",
+    "            count += 1\n",
+    "            max_streak = max(max_streak, count)\n",
+    "        else:\n",
+    "            count = 0\n",
+    "    return max_streak\n",
+    "\n",
+    "# Compute longest streak per player\n",
+    "streaks = df.groupby('name').apply(longest_consecutive_ascensions)\n",
+    "criterion_2 = streaks >= 8\n",
+    "\n",
+    "# Extract players with at least 8 consecutive ascensions\n",
+    "criterion_2 = streaks[criterion_2].index\n",
+    "\n",
+    "print(len(criterion_2))"
+   ],
+   "id": "5f3d2de07db62136",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "272\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_22395/3333909036.py:18: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
+      "  streaks = df.groupby('name').apply(longest_consecutive_ascensions)\n"
+     ]
+    }
+   ],
+   "execution_count": 39
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-09T02:56:34.296226Z",
+     "start_time": "2025-03-09T02:56:34.168922Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "ascended_games = df[df['death'] == \"ascended\"]\n",
+    "\n",
+    "criterion_3 = ascended_games[ascended_games['realtime'] <= 18000]['name'].unique()\n",
+    "\n",
+    "criterion_4 = ascended_games[ascended_games['turns'] < 10000]['name'].unique()\n",
+    "\n",
+    "print(len(criterion_3))\n",
+    "print(len(criterion_4))\n"
+   ],
+   "id": "fad8cda00a13024c",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "106\n",
+      "30\n"
+     ]
+    }
+   ],
+   "execution_count": 40
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-09T02:56:36.182115Z",
+     "start_time": "2025-03-09T02:56:36.152467Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "def meets_conduct_criteria(conduct_str):\n",
+    "    if pd.isna(conduct_str):\n",
+    "        return False\n",
+    "    conducts = conduct_str.split(',')\n",
+    "    difficult_conducts = {\"pacifist\", \"foodless\", \"illiterate\"}\n",
+    "    return any(c in conducts for c in difficult_conducts) or len(conducts) >= 7\n",
+    "\n",
+    "# Identify players who meet the conduct criteria\n",
+    "criterion_5 = ascended_games[ascended_games['conduct'].apply(meets_conduct_criteria)]['name'].unique()\n",
+    "\n",
+    "print(len(criterion_5))"
+   ],
+   "id": "1c813a7669a4d224",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "154\n"
+     ]
+    }
+   ],
+   "execution_count": 41
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-09T02:56:37.196034Z",
+     "start_time": "2025-03-09T02:56:37.192399Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Combine strict criteria with AND instead of OR\n",
+    "strict_expert_players = set(criterion_1) & set(criterion_2) & (set(criterion_3) | set(criterion_4) | set(criterion_5))\n",
+    "print(len(strict_expert_players))"
+   ],
+   "id": "c723cd7829428b86",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "54\n"
+     ]
+    }
+   ],
+   "execution_count": 42
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-09T04:01:20.350710Z",
+     "start_time": "2025-03-09T04:01:20.288212Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Combine conditions for expert data\n",
+    "expert_players =  set(criterion_1) & set(criterion_2) & (set(criterion_3) | set(criterion_4) | set(criterion_5))\n",
+    "expert_df = df[df['name'].isin(expert_players)]\n",
+    "\n",
+    "expert_games = expert_df[\"gameid\"].unique().tolist()\n",
+    "\n",
+    "expert_df"
+   ],
+   "id": "1a6500558450e0b1",
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "               name            starttime              endtime   gameid  \\\n",
+       "71069    Player1092  2011-10-31 17:17:41  2011-10-31 17:17:53  4757880   \n",
+       "71337    Player1092  2014-12-04 12:49:28  2014-12-04 12:49:57  6169846   \n",
+       "70433    Player1092  2010-01-04 20:44:53  2010-01-04 20:45:14  3944067   \n",
+       "71130    Player1092  2012-02-18 00:36:43  2012-02-18 00:37:09  4875796   \n",
+       "70926    Player1092  2011-04-13 23:36:28  2011-04-13 23:36:51  4428783   \n",
+       "...             ...                  ...                  ...      ...   \n",
+       "1485895   Player937  2016-01-15 00:43:51  2016-01-15 13:02:36  2269866   \n",
+       "1485989   Player937  2016-09-22 23:36:01  2016-09-24 03:26:38  2416852   \n",
+       "1485962   Player937  2016-07-11 14:04:07  2016-07-11 22:45:17  2372796   \n",
+       "1485865   Player937  2015-12-10 07:51:02  2015-12-11 13:54:28  2239235   \n",
+       "1485900   Player937  2016-01-29 04:45:43  2016-01-29 17:05:07  2276879   \n",
+       "\n",
+       "        version   points  deathdnum  deathlev  maxlvl   hp  ...  gender  \\\n",
+       "71069     3.4.3       20          0         1       1   -1  ...     Mal   \n",
+       "71337     3.4.3        0          0         1       1   -1  ...     Fem   \n",
+       "70433     3.4.3        0          0         1       1   11  ...     Fem   \n",
+       "71130     3.4.3        4          0         1       1    0  ...     Mal   \n",
+       "70926     3.4.3      200          0         5       5   15  ...     Fem   \n",
+       "...         ...      ...        ...       ...     ...  ...  ...     ...   \n",
+       "1485895   3.6.0  2059002          7        -5      51  296  ...     Mal   \n",
+       "1485989   3.6.0  1289508          7        -5      49  372  ...     Fem   \n",
+       "1485962   3.6.0  1545026          7        -5      48  278  ...     Mal   \n",
+       "1485865   3.6.0  2512338          7        -5      50  266  ...     Mal   \n",
+       "1485900   3.6.0  1569368          7        -5      46  297  ...     Fem   \n",
+       "\n",
+       "         align                        death  \\\n",
+       "71069      Law  killed by an electric shock   \n",
+       "71337      Neu   killed by a boiling potion   \n",
+       "70433      Neu                      escaped   \n",
+       "71130      Neu              fell into a pit   \n",
+       "70926      Law                         quit   \n",
+       "...        ...                          ...   \n",
+       "1485895    Neu                     ascended   \n",
+       "1485989    Cha                     ascended   \n",
+       "1485962    Law                     ascended   \n",
+       "1485865    Neu                     ascended   \n",
+       "1485900    Law                     ascended   \n",
+       "\n",
+       "                                                   conduct  turns  \\\n",
+       "71069    foodless,vegan,vegetarian,atheist,weaponless,p...      6   \n",
+       "71337    foodless,vegan,vegetarian,atheist,weaponless,p...      3   \n",
+       "70433    foodless,vegan,vegetarian,atheist,weaponless,p...     50   \n",
+       "71130    foodless,vegan,vegetarian,atheist,illiterate,p...     31   \n",
+       "70926    foodless,vegan,vegetarian,atheist,weaponless,p...     28   \n",
+       "...                                                    ...    ...   \n",
+       "1485895                                                NaN  37781   \n",
+       "1485989  polypileless,polyselfless,wishless,artifact_wi...  65106   \n",
+       "1485962        polypileless,polyselfless,artifact_wishless  28153   \n",
+       "1485865                                       polyselfless  43477   \n",
+       "1485900                                  artifact_wishless  31017   \n",
+       "\n",
+       "                                                   achieve  realtime gender0  \\\n",
+       "71069                                                  NaN         7     Mal   \n",
+       "71337                                                  NaN        15     Fem   \n",
+       "70433                                                  NaN        16     Fem   \n",
+       "71130                                                  NaN        16     Mal   \n",
+       "70926                                                  NaN        20     Fem   \n",
+       "...                                                    ...       ...     ...   \n",
+       "1485895  got_bell_of_opening,entered_gehennom,got_cande...   5563319     Mal   \n",
+       "1485989  got_bell_of_opening,entered_gehennom,got_cande...   5681727     Fem   \n",
+       "1485962  got_bell_of_opening,entered_gehennom,got_cande...   6241259     Mal   \n",
+       "1485865  got_bell_of_opening,entered_gehennom,got_cande...   6715694     Mal   \n",
+       "1485900  got_bell_of_opening,entered_gehennom,got_cande...  11280357     Mal   \n",
+       "\n",
+       "        align0                                              flags  \n",
+       "71069      Law                                                NaN  \n",
+       "71337      Neu                                                NaN  \n",
+       "70433      Neu  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+       "71130      Neu                                                NaN  \n",
+       "70926      Law                                                NaN  \n",
+       "...        ...                                                ...  \n",
+       "1485895    Neu                                                NaN  \n",
+       "1485989    Law                                                NaN  \n",
+       "1485962    Law                                                NaN  \n",
+       "1485865    Neu                            never_loaded_bones_file  \n",
+       "1485900    Law                                                NaN  \n",
+       "\n",
+       "[28785 rows x 27 columns]"
+      ],
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>name</th>\n",
+       "      <th>starttime</th>\n",
+       "      <th>endtime</th>\n",
+       "      <th>gameid</th>\n",
+       "      <th>version</th>\n",
+       "      <th>points</th>\n",
+       "      <th>deathdnum</th>\n",
+       "      <th>deathlev</th>\n",
+       "      <th>maxlvl</th>\n",
+       "      <th>hp</th>\n",
+       "      <th>...</th>\n",
+       "      <th>gender</th>\n",
+       "      <th>align</th>\n",
+       "      <th>death</th>\n",
+       "      <th>conduct</th>\n",
+       "      <th>turns</th>\n",
+       "      <th>achieve</th>\n",
+       "      <th>realtime</th>\n",
+       "      <th>gender0</th>\n",
+       "      <th>align0</th>\n",
+       "      <th>flags</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>71069</th>\n",
+       "      <td>Player1092</td>\n",
+       "      <td>2011-10-31 17:17:41</td>\n",
+       "      <td>2011-10-31 17:17:53</td>\n",
+       "      <td>4757880</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>20</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>killed by an electric shock</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>6</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>7</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>71337</th>\n",
+       "      <td>Player1092</td>\n",
+       "      <td>2014-12-04 12:49:28</td>\n",
+       "      <td>2014-12-04 12:49:57</td>\n",
+       "      <td>6169846</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>-1</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>killed by a boiling potion</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>3</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>15</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>70433</th>\n",
+       "      <td>Player1092</td>\n",
+       "      <td>2010-01-04 20:44:53</td>\n",
+       "      <td>2010-01-04 20:45:14</td>\n",
+       "      <td>3944067</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>11</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>escaped</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>50</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>16</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>71130</th>\n",
+       "      <td>Player1092</td>\n",
+       "      <td>2012-02-18 00:36:43</td>\n",
+       "      <td>2012-02-18 00:37:09</td>\n",
+       "      <td>4875796</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>4</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>fell into a pit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,illiterate,p...</td>\n",
+       "      <td>31</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>16</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>70926</th>\n",
+       "      <td>Player1092</td>\n",
+       "      <td>2011-04-13 23:36:28</td>\n",
+       "      <td>2011-04-13 23:36:51</td>\n",
+       "      <td>4428783</td>\n",
+       "      <td>3.4.3</td>\n",
+       "      <td>200</td>\n",
+       "      <td>0</td>\n",
+       "      <td>5</td>\n",
+       "      <td>5</td>\n",
+       "      <td>15</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>quit</td>\n",
+       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
+       "      <td>28</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>20</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1485895</th>\n",
+       "      <td>Player937</td>\n",
+       "      <td>2016-01-15 00:43:51</td>\n",
+       "      <td>2016-01-15 13:02:36</td>\n",
+       "      <td>2269866</td>\n",
+       "      <td>3.6.0</td>\n",
+       "      <td>2059002</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-5</td>\n",
+       "      <td>51</td>\n",
+       "      <td>296</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>ascended</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>37781</td>\n",
+       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
+       "      <td>5563319</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1485989</th>\n",
+       "      <td>Player937</td>\n",
+       "      <td>2016-09-22 23:36:01</td>\n",
+       "      <td>2016-09-24 03:26:38</td>\n",
+       "      <td>2416852</td>\n",
+       "      <td>3.6.0</td>\n",
+       "      <td>1289508</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-5</td>\n",
+       "      <td>49</td>\n",
+       "      <td>372</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Cha</td>\n",
+       "      <td>ascended</td>\n",
+       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
+       "      <td>65106</td>\n",
+       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
+       "      <td>5681727</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1485962</th>\n",
+       "      <td>Player937</td>\n",
+       "      <td>2016-07-11 14:04:07</td>\n",
+       "      <td>2016-07-11 22:45:17</td>\n",
+       "      <td>2372796</td>\n",
+       "      <td>3.6.0</td>\n",
+       "      <td>1545026</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-5</td>\n",
+       "      <td>48</td>\n",
+       "      <td>278</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>ascended</td>\n",
+       "      <td>polypileless,polyselfless,artifact_wishless</td>\n",
+       "      <td>28153</td>\n",
+       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
+       "      <td>6241259</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1485865</th>\n",
+       "      <td>Player937</td>\n",
+       "      <td>2015-12-10 07:51:02</td>\n",
+       "      <td>2015-12-11 13:54:28</td>\n",
+       "      <td>2239235</td>\n",
+       "      <td>3.6.0</td>\n",
+       "      <td>2512338</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-5</td>\n",
+       "      <td>50</td>\n",
+       "      <td>266</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>ascended</td>\n",
+       "      <td>polyselfless</td>\n",
+       "      <td>43477</td>\n",
+       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
+       "      <td>6715694</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Neu</td>\n",
+       "      <td>never_loaded_bones_file</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1485900</th>\n",
+       "      <td>Player937</td>\n",
+       "      <td>2016-01-29 04:45:43</td>\n",
+       "      <td>2016-01-29 17:05:07</td>\n",
+       "      <td>2276879</td>\n",
+       "      <td>3.6.0</td>\n",
+       "      <td>1569368</td>\n",
+       "      <td>7</td>\n",
+       "      <td>-5</td>\n",
+       "      <td>46</td>\n",
+       "      <td>297</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Fem</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>ascended</td>\n",
+       "      <td>artifact_wishless</td>\n",
+       "      <td>31017</td>\n",
+       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
+       "      <td>11280357</td>\n",
+       "      <td>Mal</td>\n",
+       "      <td>Law</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
-       "<p>5 rows × 27 columns</p>\n",
+       "<p>28785 rows × 27 columns</p>\n",
        "</div>"
       ]
      },
-     "execution_count": 55,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "execution_count": 55
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-03-05T23:19:24.710355Z",
-     "start_time": "2025-03-05T23:19:24.540074Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "# Criteria 1: At least 20 total ascensions on public servers\n",
-    "ascended_games = df[df['death'] == \"ascended\"]\n",
-    "total_ascensions = ascended_games.groupby('name').size()\n",
-    "criterion_1 = total_ascensions >= 20\n",
-    "\n",
-    "criterion_1 = total_ascensions[criterion_1].index\n",
-    "\n",
-    "\n",
-    "# Extract all games of these players from the full dataset\n",
-    "temp = df[df['name'].isin(criterion_1)]\n",
-    "\n",
-    "criteria_1 = list(temp['gameid']) \n",
-    "\n",
-    "criteria_1"
-   ],
-   "id": "1ab930177a49a1e4",
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "[3764145,\n",
-       " 3767712,\n",
-       " 3795805,\n",
-       " 3745665,\n",
-       " 3747611,\n",
-       " 3747598,\n",
-       " 3748236,\n",
-       " 3764155,\n",
-       " 3747651,\n",
-       " 3760062,\n",
-       " 3748213,\n",
-       " 3748231,\n",
-       " 3745659,\n",
-       " 3747674,\n",
-       " 3746562,\n",
-       " 3752315,\n",
-       " 3745341,\n",
-       " 3764142,\n",
-       " 3747583,\n",
-       " 3746545,\n",
-       " 3764715,\n",
-       " 3745643,\n",
-       " 3994118,\n",
-       " 3752269,\n",
-       " 3962728,\n",
-       " 3747531,\n",
-       " 3750587,\n",
-       " 3767710,\n",
-       " 3961924,\n",
-       " 3764650,\n",
-       " 3960820,\n",
-       " 3952076,\n",
-       " 3765439,\n",
-       " 3942950,\n",
-       " 3946003,\n",
-       " 3944002,\n",
-       " 3782924,\n",
-       " 3939267,\n",
-       " 3771350,\n",
-       " 3787474,\n",
-       " 3818089,\n",
-       " 3772795,\n",
-       " 3764080,\n",
-       " 3785662,\n",
-       " 3754161,\n",
-       " 3767113,\n",
-       " 3762879,\n",
-       " 3781061,\n",
-       " 3795796,\n",
-       " 3759307,\n",
-       " 3743868,\n",
-       " 2349275,\n",
-       " 2818160,\n",
-       " 2647320,\n",
-       " 2332738,\n",
-       " 2135387,\n",
-       " 2296869,\n",
-       " 6120072,\n",
-       " 42028,\n",
-       " 6120078,\n",
-       " 2315885,\n",
-       " 2722317,\n",
-       " 2137629,\n",
-       " 6124129,\n",
-       " 2315309,\n",
-       " 2315316,\n",
-       " 2296653,\n",
-       " 2722316,\n",
-       " 2843691,\n",
-       " 2699255,\n",
-       " 2798748,\n",
-       " 2785682,\n",
-       " 2314287,\n",
-       " 2367971,\n",
-       " 2285346,\n",
-       " 2347564,\n",
-       " 2079242,\n",
-       " 6120091,\n",
-       " 1806112,\n",
-       " 2643509,\n",
-       " 2520633,\n",
-       " 2647322,\n",
-       " 2140055,\n",
-       " 2331947,\n",
-       " 2331857,\n",
-       " 2108786,\n",
-       " 252537,\n",
-       " 6124427,\n",
-       " 2347346,\n",
-       " 6124185,\n",
-       " 6128014,\n",
-       " 6186287,\n",
-       " 1881903,\n",
-       " 6110621,\n",
-       " 6125414,\n",
-       " 2647321,\n",
-       " 6102513,\n",
-       " 5722348,\n",
-       " 2331186,\n",
-       " 1819254,\n",
-       " 5492086,\n",
-       " 6110617,\n",
-       " 6124357,\n",
-       " 2699290,\n",
-       " 6123717,\n",
-       " 1803810,\n",
-       " 2752182,\n",
-       " 2116903,\n",
-       " 6124188,\n",
-       " 6128202,\n",
-       " 6120055,\n",
-       " 2347604,\n",
-       " 2116896,\n",
-       " 2137583,\n",
-       " 6117242,\n",
-       " 2727937,\n",
-       " 2630703,\n",
-       " 2116900,\n",
-       " 5683956,\n",
-       " 2933777,\n",
-       " 2136061,\n",
-       " 2782042,\n",
-       " 2137646,\n",
-       " 2478096,\n",
-       " 6121781,\n",
-       " 6117306,\n",
-       " 6124179,\n",
-       " 2647319,\n",
-       " 2465708,\n",
-       " 1788876,\n",
-       " 2333151,\n",
-       " 1848117,\n",
-       " 2646681,\n",
-       " 2117360,\n",
-       " 2520129,\n",
-       " 6120131,\n",
-       " 1849446,\n",
-       " 1793409,\n",
-       " 6123514,\n",
-       " 1849428,\n",
-       " 5722347,\n",
-       " 6124981,\n",
-       " 1779390,\n",
-       " 2078469,\n",
-       " 6121802,\n",
-       " 2135415,\n",
-       " 6124076,\n",
-       " 2702709,\n",
-       " 2780342,\n",
-       " 1781778,\n",
-       " 2520710,\n",
-       " 6120088,\n",
-       " 1780871,\n",
-       " 1806110,\n",
-       " 6124128,\n",
-       " 6102163,\n",
-       " 6124074,\n",
-       " 2112793,\n",
-       " 6117236,\n",
-       " 2137581,\n",
-       " 2081252,\n",
-       " 6120035,\n",
-       " 2311415,\n",
-       " 2135413,\n",
-       " 2630710,\n",
-       " 1815966,\n",
-       " 2285353,\n",
-       " 2477221,\n",
-       " 6124183,\n",
-       " 244202,\n",
-       " 2535975,\n",
-       " 2103338,\n",
-       " 2347603,\n",
-       " 2135933,\n",
-       " 2374317,\n",
-       " 5488546,\n",
-       " 2137611,\n",
-       " 2855440,\n",
-       " 1848115,\n",
-       " 6125419,\n",
-       " 1793396,\n",
-       " 2855883,\n",
-       " 2722322,\n",
-       " 2135930,\n",
-       " 5496657,\n",
-       " 6120084,\n",
-       " 2661708,\n",
-       " 2075407,\n",
-       " 6120128,\n",
-       " 2296647,\n",
-       " 2078654,\n",
-       " 2116979,\n",
-       " 266505,\n",
-       " 6120071,\n",
-       " 2742311,\n",
-       " 2857327,\n",
-       " 254535,\n",
-       " 2096296,\n",
-       " 6124181,\n",
-       " 1842628,\n",
-       " 2370305,\n",
-       " 1815140,\n",
-       " 252556,\n",
-       " 1881896,\n",
-       " 2363821,\n",
-       " 1797306,\n",
-       " 6183823,\n",
-       " 2860663,\n",
-       " 2699254,\n",
-       " 6120112,\n",
-       " 2347595,\n",
-       " 2349254,\n",
-       " 1849432,\n",
-       " 6117255,\n",
-       " 2139952,\n",
-       " 6124198,\n",
-       " 5722320,\n",
-       " 5492391,\n",
-       " 2332780,\n",
-       " 5496701,\n",
-       " 1813213,\n",
-       " 1839618,\n",
-       " 2702663,\n",
-       " 2644682,\n",
-       " 6124622,\n",
-       " 2116907,\n",
-       " 252593,\n",
-       " 2315464,\n",
-       " 2333150,\n",
-       " 2078467,\n",
-       " 2116367,\n",
-       " 2135376,\n",
-       " 2463432,\n",
-       " 1792432,\n",
-       " 2137580,\n",
-       " 2486065,\n",
-       " 5492084,\n",
-       " 6128466,\n",
-       " 5487843,\n",
-       " 2137586,\n",
-       " 2722478,\n",
-       " 6120076,\n",
-       " 6124631,\n",
-       " 5497528,\n",
-       " 43357,\n",
-       " 267080,\n",
-       " 2331861,\n",
-       " 5491483,\n",
-       " 2485888,\n",
-       " 6124174,\n",
-       " 5683939,\n",
-       " 1819878,\n",
-       " 42989,\n",
-       " 2289770,\n",
-       " 2104845,\n",
-       " 2735102,\n",
-       " 5491627,\n",
-       " 5488587,\n",
-       " 1813217,\n",
-       " 237364,\n",
-       " 2108794,\n",
-       " 1783859,\n",
-       " 1792720,\n",
-       " 2104760,\n",
-       " 2138698,\n",
-       " 2109385,\n",
-       " 1813222,\n",
-       " 5496693,\n",
-       " 2081247,\n",
-       " 2136070,\n",
-       " 6124095,\n",
-       " 2363280,\n",
-       " 2363140,\n",
-       " 6128207,\n",
-       " 2347599,\n",
-       " 6186286,\n",
-       " 1810403,\n",
-       " 2773811,\n",
-       " 1800738,\n",
-       " 226012,\n",
-       " 5488888,\n",
-       " 2362671,\n",
-       " 1803803,\n",
-       " 5512158,\n",
-       " 2075450,\n",
-       " 2699260,\n",
-       " 2315301,\n",
-       " 1806108,\n",
-       " 2644573,\n",
-       " 2535990,\n",
-       " 2285352,\n",
-       " 5497309,\n",
-       " 2104868,\n",
-       " 2313680,\n",
-       " 226024,\n",
-       " 2333342,\n",
-       " 2730024,\n",
-       " 2332739,\n",
-       " 2349278,\n",
-       " 6121621,\n",
-       " 6124126,\n",
-       " 5767348,\n",
-       " 6120141,\n",
-       " 250919,\n",
-       " 5491489,\n",
-       " 2599714,\n",
-       " 2363276,\n",
-       " 5516781,\n",
-       " 2788683,\n",
-       " 2077450,\n",
-       " 6117233,\n",
-       " 1781776,\n",
-       " 5882441,\n",
-       " 1779387,\n",
-       " 2644013,\n",
-       " 2098973,\n",
-       " 2520650,\n",
-       " 6120027,\n",
-       " 6124930,\n",
-       " 2126771,\n",
-       " 2371158,\n",
-       " 2313855,\n",
-       " 2331946,\n",
-       " 6121778,\n",
-       " 2299641,\n",
-       " 5491586,\n",
-       " 5491560,\n",
-       " 5492387,\n",
-       " 5467069,\n",
-       " 6186236,\n",
-       " 254667,\n",
-       " 2301498,\n",
-       " 2464026,\n",
-       " 2486061,\n",
-       " 2506782,\n",
-       " 2136088,\n",
-       " 1823936,\n",
-       " 2077404,\n",
-       " 5489734,\n",
-       " 2526946,\n",
-       " 2620996,\n",
-       " 2332181,\n",
-       " 6120043,\n",
-       " 5709538,\n",
-       " 5492561,\n",
-       " 2643508,\n",
-       " 5491545,\n",
-       " 2297989,\n",
-       " 6102511,\n",
-       " 1783848,\n",
-       " 2599710,\n",
-       " 6125672,\n",
-       " 1815147,\n",
-       " 2368373,\n",
-       " 2646800,\n",
-       " 2783609,\n",
-       " 5710813,\n",
-       " 1784207,\n",
-       " 2298771,\n",
-       " 2298117,\n",
-       " 6123083,\n",
-       " 5472261,\n",
-       " 2108856,\n",
-       " 6121795,\n",
-       " 6124165,\n",
-       " 6124425,\n",
-       " 1810438,\n",
-       " 2646799,\n",
-       " 2702664,\n",
-       " 5492100,\n",
-       " 1797333,\n",
-       " 2519953,\n",
-       " 254016,\n",
-       " 2296861,\n",
-       " 2647318,\n",
-       " 2645796,\n",
-       " 2499815,\n",
-       " 6128465,\n",
-       " 2637380,\n",
-       " 5496676,\n",
-       " 2348783,\n",
-       " 2895875,\n",
-       " 6123553,\n",
-       " 1881773,\n",
-       " 2135923,\n",
-       " 2702416,\n",
-       " 2079198,\n",
-       " 5492541,\n",
-       " 1828473,\n",
-       " 6123712,\n",
-       " 1819836,\n",
-       " 2951778,\n",
-       " 5553748,\n",
-       " 6123031,\n",
-       " 2363142,\n",
-       " 2295768,\n",
-       " 6124903,\n",
-       " 2731112,\n",
-       " 2359554,\n",
-       " 5722374,\n",
-       " 1788880,\n",
-       " 2140077,\n",
-       " 1848251,\n",
-       " 2108783,\n",
-       " 2493209,\n",
-       " 2339078,\n",
-       " 5493321,\n",
-       " 1800771,\n",
-       " 5768652,\n",
-       " 6183817,\n",
-       " 2310758,\n",
-       " 2314579,\n",
-       " 5492147,\n",
-       " 2368327,\n",
-       " 1806304,\n",
-       " 5512145,\n",
-       " 2594830,\n",
-       " 2718818,\n",
-       " 1810423,\n",
-       " 2326180,\n",
-       " 2788692,\n",
-       " 2485890,\n",
-       " 5491655,\n",
-       " 6124414,\n",
-       " 2860075,\n",
-       " 2788288,\n",
-       " 2139941,\n",
-       " 2363837,\n",
-       " 2104782,\n",
-       " 2310361,\n",
-       " 2364311,\n",
-       " 2355267,\n",
-       " 2314574,\n",
-       " 6124355,\n",
-       " 42038,\n",
-       " 2528371,\n",
-       " 2368335,\n",
-       " 2788680,\n",
-       " 5488645,\n",
-       " 2643864,\n",
-       " 2075017,\n",
-       " 2766668,\n",
-       " 2933481,\n",
-       " 2296432,\n",
-       " 1793429,\n",
-       " 2331954,\n",
-       " 2296433,\n",
-       " 245829,\n",
-       " 2296439,\n",
-       " 2137645,\n",
-       " 2647438,\n",
-       " 5489729,\n",
-       " 2348072,\n",
-       " 2855175,\n",
-       " 2643859,\n",
-       " 2116926,\n",
-       " 1849493,\n",
-       " 2699259,\n",
-       " 5488098,\n",
-       " 5497506,\n",
-       " 2710128,\n",
-       " 6186317,\n",
-       " 2298009,\n",
-       " 2719497,\n",
-       " 2364313,\n",
-       " 2647353,\n",
-       " 2349243,\n",
-       " 6128429,\n",
-       " 2857464,\n",
-       " 5491917,\n",
-       " 2289768,\n",
-       " 2293508,\n",
-       " 1788408,\n",
-       " 6102181,\n",
-       " 5487797,\n",
-       " 6124442,\n",
-       " 2479548,\n",
-       " 2783695,\n",
-       " 2699249,\n",
-       " 246612,\n",
-       " 2850359,\n",
-       " 6119995,\n",
-       " 2371387,\n",
-       " 2825981,\n",
-       " 2798752,\n",
-       " 2801803,\n",
-       " 2112800,\n",
-       " 2875621,\n",
-       " 2364383,\n",
-       " 2785295,\n",
-       " 2368382,\n",
-       " 2343534,\n",
-       " 2519810,\n",
-       " 261374,\n",
-       " 2298695,\n",
-       " 2473696,\n",
-       " 2620998,\n",
-       " 2098946,\n",
-       " 2315308,\n",
-       " 2843731,\n",
-       " 2347339,\n",
-       " 2520692,\n",
-       " 1830985,\n",
-       " 2349258,\n",
-       " 2788294,\n",
-       " 2363782,\n",
-       " 2526272,\n",
-       " 2535965,\n",
-       " 2364308,\n",
-       " 2331664,\n",
-       " 6117302,\n",
-       " 2788301,\n",
-       " 2359425,\n",
-       " 2516014,\n",
-       " 2719491,\n",
-       " 2295779,\n",
-       " 2298108,\n",
-       " 1804609,\n",
-       " 6124577,\n",
-       " 2075438,\n",
-       " 2117391,\n",
-       " 2349240,\n",
-       " 231286,\n",
-       " 2825987,\n",
-       " 2699232,\n",
-       " 5512440,\n",
-       " 2075423,\n",
-       " 2338987,\n",
-       " 2077807,\n",
-       " 2647344,\n",
-       " 2116899,\n",
-       " 2362703,\n",
-       " 6118286,\n",
-       " 2776893,\n",
-       " 2117210,\n",
-       " 2332737,\n",
-       " 2860667,\n",
-       " 2346348,\n",
-       " 2371170,\n",
-       " 2331668,\n",
-       " 2699288,\n",
-       " 2486017,\n",
-       " 1804473,\n",
-       " 2630784,\n",
-       " 44840,\n",
-       " 2297194,\n",
-       " 2855436,\n",
-       " 6124978,\n",
-       " 5488606,\n",
-       " 1880445,\n",
-       " 2868859,\n",
-       " 272081,\n",
-       " 2730029,\n",
-       " 2363779,\n",
-       " 1803287,\n",
-       " 2298784,\n",
-       " 2338988,\n",
-       " 2116672,\n",
-       " 2691237,\n",
-       " 6113604,\n",
-       " 2499091,\n",
-       " 2844922,\n",
-       " 2314276,\n",
-       " 2331651,\n",
-       " 1781421,\n",
-       " 1806105,\n",
-       " 2311453,\n",
-       " 2310808,\n",
-       " 2331655,\n",
-       " 2636302,\n",
-       " 2721931,\n",
-       " 2332849,\n",
-       " 2349330,\n",
-       " 2646803,\n",
-       " 1824038,\n",
-       " 2294076,\n",
-       " 2528152,\n",
-       " 2332775,\n",
-       " 2798883,\n",
-       " 2332043,\n",
-       " 2291488,\n",
-       " 6125450,\n",
-       " 2645038,\n",
-       " 2931967,\n",
-       " 2528063,\n",
-       " 2785298,\n",
-       " 2480414,\n",
-       " 271099,\n",
-       " 2843548,\n",
-       " 2285000,\n",
-       " 2488713,\n",
-       " 2809634,\n",
-       " 2699252,\n",
-       " 2137609,\n",
-       " 2644605,\n",
-       " 2784529,\n",
-       " 6124880,\n",
-       " 6122977,\n",
-       " 2636313,\n",
-       " 2362641,\n",
-       " 2788249,\n",
-       " 2332248,\n",
-       " 2289003,\n",
-       " 39888,\n",
-       " 1830444,\n",
-       " 1782965,\n",
-       " 1793391,\n",
-       " 2314478,\n",
-       " 1839384,\n",
-       " 2285411,\n",
-       " 2075405,\n",
-       " 2075718,\n",
-       " 2363146,\n",
-       " 2488721,\n",
-       " 2855439,\n",
-       " 2860104,\n",
-       " 2722489,\n",
-       " 2844957,\n",
-       " 2079238,\n",
-       " 2479056,\n",
-       " 2773809,\n",
-       " 266535,\n",
-       " 2293586,\n",
-       " 2808733,\n",
-       " 6124401,\n",
-       " 6128030,\n",
-       " 2473693,\n",
-       " 2645031,\n",
-       " 2798764,\n",
-       " 2813377,\n",
-       " 2315315,\n",
-       " 2808667,\n",
-       " 1788503,\n",
-       " 2313852,\n",
-       " 2647339,\n",
-       " 1881817,\n",
-       " 2337294,\n",
-       " 2931972,\n",
-       " 2896578,\n",
-       " 2311410,\n",
-       " 2746470,\n",
-       " 2875054,\n",
-       " 2367893,\n",
-       " 2887381,\n",
-       " 2733028,\n",
-       " 2296529,\n",
-       " 2347801,\n",
-       " 2332864,\n",
-       " 1792420,\n",
-       " 2499812,\n",
-       " 2808272,\n",
-       " 2479411,\n",
-       " 1801208,\n",
-       " 2887741,\n",
-       " 6125413,\n",
-       " 2135536,\n",
-       " 2293588,\n",
-       " 2784534,\n",
-       " 2099364,\n",
-       " 5767282,\n",
-       " 2302430,\n",
-       " 2477286,\n",
-       " 2367970,\n",
-       " 2788678,\n",
-       " 2348309,\n",
-       " 2514602,\n",
-       " 2296868,\n",
-       " 2896136,\n",
-       " 6117802,\n",
-       " 2607114,\n",
-       " 2348835,\n",
-       " 2477976,\n",
-       " 2478300,\n",
-       " 2485897,\n",
-       " 2702670,\n",
-       " 2344022,\n",
-       " 2332741,\n",
-       " 2643202,\n",
-       " 2080197,\n",
-       " 1842696,\n",
-       " 2347373,\n",
-       " 2855835,\n",
-       " 2855853,\n",
-       " 2479467,\n",
-       " 2857459,\n",
-       " 2499248,\n",
-       " 2337395,\n",
-       " 2103208,\n",
-       " 2355698,\n",
-       " 2654835,\n",
-       " 2855192,\n",
-       " 2362669,\n",
-       " 2694799,\n",
-       " 2798935,\n",
-       " 2314588,\n",
-       " 2860080,\n",
-       " 2359630,\n",
-       " 6121885,\n",
-       " 2094528,\n",
-       " 5492853,\n",
-       " 6102726,\n",
-       " 2371391,\n",
-       " 2310877,\n",
-       " 2487433,\n",
-       " 1812418,\n",
-       " 2477985,\n",
-       " 2371135,\n",
-       " 2856693,\n",
-       " 2772348,\n",
-       " 2331678,\n",
-       " 2772789,\n",
-       " 2509449,\n",
-       " 2699275,\n",
-       " 2779679,\n",
-       " 2506803,\n",
-       " 2702671,\n",
-       " 2782034,\n",
-       " 2636723,\n",
-       " 2285467,\n",
-       " 2535986,\n",
-       " 2301496,\n",
-       " 2785293,\n",
-       " 2297981,\n",
-       " 2861739,\n",
-       " 2296183,\n",
-       " 2332793,\n",
-       " 2699321,\n",
-       " 2528045,\n",
-       " 2481541,\n",
-       " 2310488,\n",
-       " 2875627,\n",
-       " 2296081,\n",
-       " 2314923,\n",
-       " 2696238,\n",
-       " 2788752,\n",
-       " 264734,\n",
-       " 2359421,\n",
-       " 250887,\n",
-       " 2293513,\n",
-       " 2491981,\n",
-       " 186315,\n",
-       " 2331853,\n",
-       " 2528072,\n",
-       " 5710687,\n",
-       " 2479034,\n",
-       " 2788695,\n",
-       " 2098752,\n",
-       " 2694442,\n",
-       " 2860662,\n",
-       " 2933802,\n",
-       " 2296873,\n",
-       " 2519947,\n",
-       " 42813,\n",
-       " 2773071,\n",
-       " 2467054,\n",
-       " 2738646,\n",
-       " 2722470,\n",
-       " 2520642,\n",
-       " 2513439,\n",
-       " 2310844,\n",
-       " 2333335,\n",
-       " 2296107,\n",
-       " 2315640,\n",
-       " 2366732,\n",
-       " 2773805,\n",
-       " 6190053,\n",
-       " 2856655,\n",
-       " 2360143,\n",
-       " 2879425,\n",
-       " 2507076,\n",
-       " 2371314,\n",
-       " 2620993,\n",
-       " 2699299,\n",
-       " 2315920,\n",
-       " 2370713,\n",
-       " 2507023,\n",
-       " 2464058,\n",
-       " 2315488,\n",
-       " 2526381,\n",
-       " 2465705,\n",
-       " 2855626,\n",
-       " 253985,\n",
-       " 2630759,\n",
-       " 2845701,\n",
-       " 2298753,\n",
-       " 2933775,\n",
-       " 2478474,\n",
-       " 2359423,\n",
-       " 2799085,\n",
-       " 41876,\n",
-       " 2795863,\n",
-       " 2285499,\n",
-       " 2487400,\n",
-       " 2355264,\n",
-       " 5492062,\n",
-       " 2285009,\n",
-       " 1813168,\n",
-       " 2296640,\n",
-       " 2735877,\n",
-       " 1829518,\n",
-       " 2296670,\n",
-       " 2795861,\n",
-       " 2730030,\n",
-       " 2347532,\n",
-       " 2331935,\n",
-       " 2349379,\n",
-       " 2332804,\n",
-       " 2645792,\n",
-       " 2314263,\n",
-       " 2463473,\n",
-       " 2499273,\n",
-       " 2699308,\n",
-       " 2799458,\n",
-       " 2643862,\n",
-       " 2636345,\n",
-       " 2488733,\n",
-       " 2078807,\n",
-       " 2699240,\n",
-       " 2809620,\n",
-       " 2785681,\n",
-       " 2742324,\n",
-       " 2285345,\n",
-       " 2632879,\n",
-       " 2491438,\n",
-       " 2362690,\n",
-       " 6124026,\n",
-       " 2783732,\n",
-       " 2347526,\n",
-       " 2346368,\n",
-       " 2731117,\n",
-       " 2355040,\n",
-       " 2719920,\n",
-       " 2861244,\n",
-       " 2814378,\n",
-       " 41381,\n",
-       " 2730026,\n",
-       " 2752282,\n",
-       " 2332373,\n",
-       " 232265,\n",
-       " 2138144,\n",
-       " 1800688,\n",
-       " 2315126,\n",
-       " 2295841,\n",
-       " 2730050,\n",
-       " 2491586,\n",
-       " 2875149,\n",
-       " 2855869,\n",
-       " 6126412,\n",
-       " 1797073,\n",
-       " 2719101,\n",
-       " 2363154,\n",
-       " 2288996,\n",
-       " 2370699,\n",
-       " 2788278,\n",
-       " 2812845,\n",
-       " 2702662,\n",
-       " 2316193,\n",
-       " 2528218,\n",
-       " 6185062,\n",
-       " 2731145,\n",
-       " 2477319,\n",
-       " 2528137,\n",
-       " 2349299,\n",
-       " 2137039,\n",
-       " 2125944,\n",
-       " 5489358,\n",
-       " 2724082,\n",
-       " 2643875,\n",
-       " 2718852,\n",
-       " 2795850,\n",
-       " 2857077,\n",
-       " 2108729,\n",
-       " 2846375,\n",
-       " 2532455,\n",
-       " 2294098,\n",
-       " 2493059,\n",
-       " 2670137,\n",
-       " 2332733,\n",
-       " 2477270,\n",
-       " 2813782,\n",
-       " 2702728,\n",
-       " 2860127,\n",
-       " 2133135,\n",
-       " 2520020,\n",
-       " 2862338,\n",
-       " 2661694,\n",
-       " 2349368,\n",
-       " 2347201,\n",
-       " 2857429,\n",
-       " 2856265,\n",
-       " 2332725,\n",
-       " 2349273,\n",
-       " 2648718,\n",
-       " 2731110,\n",
-       " 1851378,\n",
-       " 2699245,\n",
-       " 2284993,\n",
-       " 2585089,\n",
-       " 2661727,\n",
-       " 2856709,\n",
-       " 2485879,\n",
-       " 2670147,\n",
-       " 2492222,\n",
-       " 2862308,\n",
-       " 2488545,\n",
-       " 2347587,\n",
-       " 2315911,\n",
-       " 266244,\n",
-       " 2370336,\n",
-       " 2081236,\n",
-       " 2772737,\n",
-       " 2706772,\n",
-       " 2295683,\n",
-       " 2646685,\n",
-       " 2933444,\n",
-       " 5887947,\n",
-       " 1779006,\n",
-       " 2818178,\n",
-       " 2795857,\n",
-       " 2075002,\n",
-       " 2139500,\n",
-       " 2363852,\n",
-       " 2313845,\n",
-       " 2289039,\n",
-       " 2110287,\n",
-       " 2120940,\n",
-       " 2594813,\n",
-       " 2478205,\n",
-       " 1819146,\n",
-       " 2116309,\n",
-       " 2514594,\n",
-       " 2630811,\n",
-       " 2773803,\n",
-       " 248867,\n",
-       " 2895990,\n",
-       " 2716681,\n",
-       " 2773530,\n",
-       " 2846078,\n",
-       " 2818158,\n",
-       " 1815137,\n",
-       " 2645048,\n",
-       " 2143058,\n",
-       " 2108174,\n",
-       " 44712,\n",
-       " 2114008,\n",
-       " 2855167,\n",
-       " 2098445,\n",
-       " 2599707,\n",
-       " 2463426,\n",
-       " 236225,\n",
-       " 244156,\n",
-       " 1826610,\n",
-       " 2723135,\n",
-       " 2331733,\n",
-       " 2799136,\n",
-       " 2920949,\n",
-       " 226007,\n",
-       " 2607335,\n",
-       " 2077214,\n",
-       " 2071756,\n",
-       " 264251,\n",
-       " 270652,\n",
-       " 2374871,\n",
-       " 2103003,\n",
-       " 2315884,\n",
-       " 1823235,\n",
-       " 5972065,\n",
-       " 1842078,\n",
-       " 2294089,\n",
-       " 2655629,\n",
-       " 1803170,\n",
-       " 2112789,\n",
-       " 2092256,\n",
-       " 1897783,\n",
-       " 2620825,\n",
-       " 1792077,\n",
-       " 2347754,\n",
-       " 2311107,\n",
-       " 2644040,\n",
-       " 2362660,\n",
-       " 2857094,\n",
-       " 2096096,\n",
-       " 2367754,\n",
-       " 2719544,\n",
-       " 2364329,\n",
-       " 2292358,\n",
-       " 2314734,\n",
-       " 261362,\n",
-       " 2486211,\n",
-       " 2702706,\n",
-       " 2104748,\n",
-       " 2699923,\n",
-       " 1796126,\n",
-       " 2723690,\n",
-       " 2362925,\n",
-       " 2636712,\n",
-       " 2359610,\n",
-       " 2784523,\n",
-       " 5590505,\n",
-       " 2719961,\n",
-       " ...]"
-      ]
-     },
-     "execution_count": 74,
+     "execution_count": 73,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
-   "execution_count": 74
+   "execution_count": 73
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-03-05T23:18:13.546412Z",
-     "start_time": "2025-03-05T23:17:10.243392Z"
+     "end_time": "2025-03-09T03:16:16.835438Z",
+     "start_time": "2025-03-09T03:16:16.473372Z"
     }
    },
    "cell_type": "code",
    "source": [
-    "# Criterion 2: At least 8 consecutive ascensions\n",
-    "# Sort by player and end time\n",
-    "df = df.sort_values(by=['name', 'realtime'])\n",
-    "\n",
-    "# Identify consecutive ascensions\n",
-    "def longest_consecutive_ascensions(player_games):\n",
-    "    count = 0\n",
-    "    max_streak = 0\n",
-    "    for _, row in player_games.iterrows():\n",
-    "        if row['death'] == \"ascended\":\n",
-    "            count += 1\n",
-    "            max_streak = max(max_streak, count)\n",
-    "        else:\n",
-    "            count = 0\n",
-    "    return max_streak\n",
-    "\n",
-    "# Compute longest streak per player\n",
-    "streaks = df.groupby('name').apply(longest_consecutive_ascensions)\n",
-    "criterion_2 = streaks >= 8\n",
-    "\n",
-    "# Extract players with at least 8 consecutive ascensions\n",
-    "criterion_2 = streaks[criterion_2].index\n",
-    "\n",
-    "print(len(criterion_2))"
+    "temp = set(expert_games)  # Convert to set for faster lookup\n",
+    "processed_df = df[~df[\"gameid\"].isin(temp)]  # Exclude expert games\n",
+    "print(len(temp))"
    ],
-   "id": "5f3d2de07db62136",
+   "id": "2d8475989d8e8312",
    "outputs": [
     {
-     "name": "stderr",
+     "name": "stdout",
      "output_type": "stream",
      "text": [
-      "/tmp/ipykernel_8255/3109394239.py:18: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
-      "  streaks = df.groupby('name').apply(longest_consecutive_ascensions)\n"
+      "28785\n"
      ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "name\n",
-       "Player0       False\n",
-       "Player1       False\n",
-       "Player10      False\n",
-       "Player100     False\n",
-       "Player1000    False\n",
-       "              ...  \n",
-       "Player9995    False\n",
-       "Player9996    False\n",
-       "Player9997    False\n",
-       "Player9998    False\n",
-       "Player9999    False\n",
-       "Length: 48077, dtype: bool"
-      ]
-     },
-     "execution_count": 71,
-     "metadata": {},
-     "output_type": "execute_result"
     }
    ],
-   "execution_count": 71
+   "execution_count": 68
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-03-05T21:31:34.004961Z",
-     "start_time": "2025-03-05T21:31:33.899381Z"
+     "end_time": "2025-03-09T04:56:36.641040Z",
+     "start_time": "2025-03-09T04:56:36.595593Z"
     }
    },
    "cell_type": "code",
    "source": [
-    "ascended_games = df[df['death'] == \"ascended\"]\n",
+    "# Calculate build consistency\n",
+    "def calculate_build_consistency(df):\n",
+    "    # Create combined build column\n",
+    "    df['build'] = df['role'] + '-' + df['race'] + '-' + df['align']\n",
+    "    min_games = 10 \n",
+    "    \n",
+    "    build_stats = []\n",
+    "    for name, group in df.groupby('name'):\n",
+    "        # Skip players with too few games\n",
+    "        if len(group) < 5:\n",
+    "            continue\n",
+    "            \n",
+    "        # Get build counts\n",
+    "        build_counts = group['build'].value_counts()\n",
+    "        top_build = build_counts.index[0]\n",
+    "        top_build_count = build_counts.iloc[0]\n",
+    "        top_build_pct = top_build_count / len(group) * 100\n",
+    "        \n",
+    "        # Calculate build entropy (lower means more consistent)\n",
+    "        build_probs = build_counts / len(group)\n",
+    "        entropy = -sum(p * np.log2(p) for p in build_probs)\n",
+    "        \n",
+    "        build_stats.append({\n",
+    "            'name': name,\n",
+    "            'total_games': len(group),\n",
+    "            'unique_builds': len(build_counts),\n",
+    "            'top_build': top_build,\n",
+    "            'top_build_count': top_build_count,\n",
+    "            'top_build_percentage': top_build_pct,\n",
+    "            'build_entropy': entropy\n",
+    "        })\n",
+    "    \n",
+    "    return pd.DataFrame(build_stats)\n",
     "\n",
-    "criterion_3 = ascended_games[ascended_games['realtime'] <= 18000]['name'].unique()\n",
+    "# Calculate build consistency\n",
+    "build_consistency = calculate_build_consistency(expert_df)\n",
     "\n",
-    "criterion_4 = ascended_games[ascended_games['turns'] < 10000]['name'].unique()\n",
+    "# Identify most consistent players\n",
+    "min_games = 10 \n",
+    "consistent_players = build_consistency[build_consistency['total_games'] >= min_games].sort_values('build_entropy').head(5)\n",
     "\n",
-    "print(len(criterion_3))\n",
-    "print(len(criterion_4))\n"
-   ],
-   "id": "fad8cda00a13024c",
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "106\n",
-      "30\n"
-     ]
-    }
-   ],
-   "execution_count": 35
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-03-05T21:29:57.567232Z",
-     "start_time": "2025-03-05T21:29:57.535026Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "def meets_conduct_criteria(conduct_str):\n",
-    "    if pd.isna(conduct_str):\n",
-    "        return False\n",
-    "    conducts = conduct_str.split(',')\n",
-    "    difficult_conducts = {\"pacifist\", \"foodless\", \"illiterate\"}\n",
-    "    return any(c in conducts for c in difficult_conducts) or len(conducts) >= 7\n",
+    "print(\"Top 10 Most Build-Consistent Players:\")\n",
+    "print(consistent_players[['name', 'total_games', 'unique_builds', 'top_build', \n",
+    "                          'top_build_percentage', 'build_entropy']].reset_index(drop=True))\n",
     "\n",
-    "# Identify players who meet the conduct criteria\n",
-    "criterion_5 = ascended_games[ascended_games['conduct'].apply(meets_conduct_criteria)]['name'].unique()\n",
     "\n",
-    "print(len(criterion_5))"
+    "top_builds = build_consistency['top_build'].value_counts()\n",
+    "\n",
+    "print(\"\\nMost Popular Builds:\")\n",
+    "print(top_builds.head(5))"
    ],
-   "id": "1c813a7669a4d224",
+   "id": "c0ed7dc6e381fa1c",
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "154\n"
+      "Top 10 Most Build-Consistent Players:\n",
+      "          name  total_games  unique_builds    top_build  top_build_percentage  \\\n",
+      "0  Player37300          231             26  Wiz-Elf-Cha             54.978355   \n",
+      "1  Player48483         1396             34  Tou-Hum-Neu             50.859599   \n",
+      "2    Player188          546             31  Hea-Gno-Neu             50.915751   \n",
+      "3  Player50470          974             32  Tou-Hum-Neu             41.273101   \n",
+      "4    Player503         2014             46  Hea-Gno-Neu             35.253227   \n",
+      "\n",
+      "   build_entropy  \n",
+      "0       2.816325  \n",
+      "1       2.859327  \n",
+      "2       2.864928  \n",
+      "3       2.931231  \n",
+      "4       3.292199  \n",
+      "\n",
+      "Most Popular Builds:\n",
+      "top_build\n",
+      "Tou-Hum-Neu    13\n",
+      "Wiz-Elf-Cha    12\n",
+      "Hea-Gno-Neu     5\n",
+      "Kni-Hum-Law     4\n",
+      "Wiz-Gno-Neu     2\n",
+      "Name: count, dtype: int64\n"
      ]
     }
    ],
-   "execution_count": 32
+   "execution_count": 110
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-03-05T23:00:59.381582Z",
-     "start_time": "2025-03-05T23:00:59.283594Z"
+     "end_time": "2025-03-09T04:03:30.191204Z",
+     "start_time": "2025-03-09T04:03:29.923540Z"
     }
    },
    "cell_type": "code",
    "source": [
-    "# Combine conditions for expert filtering\n",
-    "expert_players = set(criterion_1).union(set(criterion_2), set(criterion_3), set(criterion_4), set(criterion_5))\n",
-    "expert_games = df[df['name'].isin(expert_players)]\n"
-   ],
-   "id": "1a6500558450e0b1",
-   "outputs": [],
-   "execution_count": 62
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-03-05T23:03:27.229391Z",
-     "start_time": "2025-03-05T23:03:27.127764Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "import nle.dataset as nld\n",
-    "nld_nao_path = \"/code/nld-nao/nld-nao-unzipped\"\n",
+    "# Improved build consistency visualization (simpler version)\n",
+    "plt.figure(figsize=(10, 6))\n",
     "\n",
-    "dbfilename = \"/code/NetHack-Research/data/raw/nld-nao.db\"\n",
+    "# Filter data for better visualization (minimum 10 games)\n",
+    "filtered_consistency = build_consistency[build_consistency['total_games'] >= 10]\n",
     "\n",
-    "dataset_name = \"nld-nao\"\n",
+    "# Create scatter plot with better styling\n",
+    "plt.scatter(\n",
+    "    filtered_consistency['unique_builds'] / filtered_consistency['total_games'],\n",
+    "    filtered_consistency['build_entropy'],\n",
+    "    alpha=0.7,\n",
+    "    c=filtered_consistency['top_build_percentage'],  # Color by top build percentage\n",
+    "    cmap='viridis',\n",
+    ")\n",
     "\n",
-    "if not nld.db.exists(dbfilename):\n",
-    "    nld.db.create(dbfilename)\n",
-    "    # Add NLD-NAO data, use the `add_altorg_directory`.\n",
-    "    nld.add_altorg_directory(nld_nao_path, \"nld-nao\", dbfilename)\n",
-    "else:\n",
-    "    print(f\"Database already exists: {dbfilename}\")\n",
-    "    \n",
-    "    \n",
-    "db_conn = nld.db.connect(filename=dbfilename)\n",
-    "print(f\"NLD-NAO Dataset has {nld.db.count_games('nld-nao', conn=db_conn)} games.\")"
+    "# Add colorbar\n",
+    "cbar = plt.colorbar()\n",
+    "cbar.set_label('Top Build Percentage (%)')\n",
+    "\n",
+    "# Label axes and title\n",
+    "plt.xlabel('Build Diversity')\n",
+    "plt.ylabel('Build Entropy (lower = more consistent)')\n",
+    "plt.title('Build Consistency (min 10 games)')\n",
+    "\n",
+    "# Add grid and tight layout\n",
+    "plt.grid(True, alpha=0.3, linestyle='--')\n",
+    "plt.tight_layout()\n",
+    "plt.show()"
    ],
-   "id": "1a8e359a95fd788c",
+   "id": "ca59e0621ed73eb7",
    "outputs": [
     {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Database already exists: /code/NetHack-Research/data/raw/nld-nao.db\n",
-      "NLD-NAO Dataset has 1511228 games.\n"
-     ]
-    }
-   ],
-   "execution_count": 63
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-01-06T20:54:59.556389Z",
-     "start_time": "2025-01-06T20:54:59.550959Z"
+     "data": {
+      "text/plain": [
+       "<Figure size 1000x600 with 2 Axes>"
+      ],
+      "image/png": ""
+     },
+     "metadata": {},
+     "output_type": "display_data"
     }
-   },
-   "cell_type": "code",
-   "source": [
-    "# Too Soon: Players who do not demonstrate learning, such that they are able to ascend in the beginning of their history of gameplays.\n",
-    "# Define: Ascension <= X games (analytically) \n",
-    "\n"
    ],
-   "id": "c71c1d28d500e5ae",
-   "outputs": [],
-   "execution_count": 17
+   "execution_count": 75
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-03-05T20:35:17.529301Z",
-     "start_time": "2025-03-05T20:35:17.150367Z"
+     "end_time": "2025-03-09T04:08:00.937705Z",
+     "start_time": "2025-03-09T04:08:00.886197Z"
     }
    },
    "cell_type": "code",
    "source": [
-    "# Too Quick: Players who ascend in a single game in a very short amount of time, indicating a speed run or gameplay objectives that are not representative of most players.\n",
-    "# A speed run is 10-20K turns to finish\n",
-    "\n",
-    "from scipy.stats import zscore\n",
-    "# Filter to games that end in ascension \n",
-    "ascended_df = df[df['death'].str.contains('ascended', na=False)].copy()\n",
-    "\n",
-    "# Of the games that end in ascension, filter those games that satisfy speed run definition \n",
-    "speed_runs = ascended_df[(ascended_df['realtime'] >= 10000) & (ascended_df['turns'] <= 15000)].copy()\n",
-    "\n",
-    "# Calculate z-score of all turns and speed run turns \n",
-    "ascended_df['z_score_turns'] = zscore(ascended_df['turns'])\n",
-    "speed_runs['z_score_turns'] = zscore(speed_runs['turns'])\n",
+    "# Find the most common builds among expert players\n",
+    "def calculate_build_frequency(df, expert_names):\n",
+    "    expert_games = df[df['name'].isin(expert_names)]\n",
+    "    expert_games['build'] = expert_games['role'] + '-' + expert_games['race'] + '-' + expert_games['align']\n",
+    "    \n",
+    "    # Count builds\n",
+    "    build_counts = expert_games['build'].value_counts().reset_index()\n",
+    "    build_counts.columns = ['build', 'count']\n",
+    "    \n",
+    "    # Split the build back into components\n",
+    "    build_counts[['role', 'race', 'align']] = build_counts['build'].str.split('-', expand=True)\n",
+    "    \n",
+    "    return build_counts, expert_games\n",
     "\n",
-    "# Calculate outliers according to 3 standard deviations from the mean\n",
-    "outliers = ascended_df[(abs(ascended_df['z_score_turns']) > 3)]"
-   ],
-   "id": "99e935ef461e8276",
-   "outputs": [],
-   "execution_count": 4
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-01-06T22:46:11.613917Z",
-     "start_time": "2025-01-06T22:46:11.608708Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "speed_run_player_names = speed_runs['name'].unique()\n",
-    "print(f\"Number of speed run players: {len(speed_run_player_names)}\")\n",
-    "print(speed_run_player_names)"
+    "# Get top expert builds\n",
+    "expert_builds, expert_games = calculate_build_frequency(df,expert_players)"
    ],
-   "id": "b5f69567c3d2a733",
+   "id": "9758cddfd573fd66",
    "outputs": [
     {
-     "name": "stdout",
+     "name": "stderr",
      "output_type": "stream",
      "text": [
-      "Number of speed run players: 64\n",
-      "['Player10094' 'Player10658' 'Player11576' 'Player14226' 'Player14993'\n",
-      " 'Player15632' 'Player15731' 'Player15820' 'Player17117' 'Player17290'\n",
-      " 'Player17912' 'Player19010' 'Player20844' 'Player2096' 'Player2147'\n",
-      " 'Player25258' 'Player2539' 'Player26207' 'Player2837' 'Player2848'\n",
-      " 'Player33174' 'Player33955' 'Player34287' 'Player37300' 'Player37576'\n",
-      " 'Player38596' 'Player39095' 'Player40006' 'Player40509' 'Player41013'\n",
-      " 'Player41502' 'Player4383' 'Player45180' 'Player45237' 'Player46189'\n",
-      " 'Player46255' 'Player48682' 'Player48801' 'Player49993' 'Player515'\n",
-      " 'Player52192' 'Player53035' 'Player53955' 'Player56585' 'Player57758'\n",
-      " 'Player58948' 'Player59031' 'Player60095' 'Player6030' 'Player6485'\n",
-      " 'Player65824' 'Player66684' 'Player66758' 'Player67' 'Player67229'\n",
-      " 'Player68225' 'Player78' 'Player7874' 'Player8224' 'Player83'\n",
-      " 'Player8391' 'Player8910' 'Player924' 'Player937']\n"
+      "/tmp/ipykernel_22395/80680807.py:4: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  expert_games['build'] = expert_games['role'] + '-' + expert_games['race'] + '-' + expert_games['align']\n"
      ]
     }
    ],
-   "execution_count": 100
+   "execution_count": 80
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-06T22:46:13.669574Z",
-     "start_time": "2025-01-06T22:46:12.852233Z"
+     "end_time": "2025-03-09T04:08:11.190090Z",
+     "start_time": "2025-03-09T04:08:10.945579Z"
     }
    },
    "cell_type": "code",
    "source": [
-    "# plot speed runs with seaborn \n",
-    "plt.figure(figsize=(12, 6))\n",
+    "# visualization of top expert builds\n",
+    "plt.figure(figsize=(12, 8))\n",
+    "top_n = 10\n",
+    "top_builds = expert_builds.head(top_n)\n",
+    "\n",
+    "# Sort by count for better visualization\n",
+    "top_builds = top_builds.sort_values('count')\n",
     "\n",
-    "sns.kdeplot(ascended_df['z_score_turns'], fill=True, label='All Games', bw_adjust=2)\n",
-    "sns.kdeplot(speed_runs['z_score_turns'], fill=True, label='Speed Runs', bw_adjust=2, color='orange')\n",
+    "# Create the horizontal bar chart with better colors and formatting\n",
+    "bars = plt.barh(\n",
+    "    top_builds['build'], \n",
+    "    top_builds['count'], \n",
+    "    color='steelblue',\n",
+    "    alpha=0.8,\n",
+    "    edgecolor='darkblue',\n",
+    "    linewidth=1\n",
+    ")\n",
     "\n",
-    "plt.axvline(3, color='red', linestyle='--', linewidth=1.5, label='Z=3 (Outlier Threshold)')\n",
-    "plt.axvline(-3, color='red', linestyle='--', linewidth=1.5, label='Z=-3 (Outlier Threshold)')\n",
+    "# Add count labels to the end of each bar\n",
+    "for bar in bars:\n",
+    "    width = bar.get_width()\n",
+    "    plt.text(width + 50, \n",
+    "             bar.get_y() + bar.get_height()/2, \n",
+    "             f'{int(width):,}',\n",
+    "             va='center',\n",
+    "             fontweight='bold')\n",
     "\n",
-    "plt.xlim(-5, 10) \n",
-    "plt.xlabel(\"Z-Score for Turns\", fontsize=14)\n",
-    "plt.ylabel(\"Density\", fontsize=14)\n",
-    "plt.title(\"KDE of Z-Scores for Turns with Speed Runs Highlighted\", fontsize=16)\n",
-    "plt.legend(fontsize=12, loc='upper right')\n",
-    "plt.grid(True, linestyle='--', alpha=0.5)\n",
+    "# Improve styling\n",
+    "plt.xlabel('Number of Games', fontsize=12)\n",
+    "plt.ylabel('Character Build', fontsize=12)\n",
+    "plt.title(f'Top {top_n} Expert Builds', fontsize=14)\n",
+    "plt.grid(axis='x', alpha=0.3, linestyle='--')\n",
     "\n",
-    "# save plot \n",
-    "plt.savefig('/code/NetHack-Research/reports/figures/kde-speed-run.png', dpi=300, bbox_inches='tight')\n",
+    "# Remove top and right spines\n",
+    "plt.gca().spines['top'].set_visible(False)\n",
+    "plt.gca().spines['right'].set_visible(False)\n",
     "\n",
+    "# Add a subtle background color\n",
+    "plt.gca().set_facecolor('#f8f8f8')\n",
+    "\n",
+    "plt.tight_layout()\n",
     "plt.show()"
    ],
-   "id": "2819c52e915aeb34",
+   "id": "44cbf95a8393684b",
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "<Figure size 1200x600 with 1 Axes>"
+       "<Figure size 1200x800 with 1 Axes>"
       ],
-      "image/png": "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SiLmLRbmTbHK3N1J1CXJmKadUkIh5P76OABA7YZtgNttckHJJVzeJvP5I/Caekh+4vNuW766lgjyXBwAZCbh1m9uz80ugZKIeYuFeVOsuOdecC6+GRcK804uM69xDwB2e+Jfu21YYB2H6pmO67dYmLdYmLdYmDfFKmWb+zfffBNjx45FVVUVzj77bCxfvrxLj3v33XdRXl6Oq6++OsEVEhHtm88fQXYSGmwzedjcExEREaWElGzu33vvPUybNg3XXHMN5syZg4qKCkyZMgU+n2+fj6uursbDDz+Mww47LEmVEhHtXZ0/Ytpl8JLFosjIsivtwwOJiIiIyBwp2dy/8sorOOecczBhwgQMGjQI9957LxwOB9566629PkbTNNx888247rrr0Lt37yRWS0TUudbD8jP3MnhtvA4r6lrY3BMRERGZKeWa+0gkgpUrV2LUqFHtt8myjFGjRmHJkiV7fdyzzz6L/Px8nH322ckoM2MEAnxDLhLmnTyqpqMxpJp6zn04rCbldTwOCw/LTwFcv8XCvMXCvMXCvClWKXe8aENDAzRNQ35+fofb8/PzsX79+k4f89///hf//Oc/8a9//euAXtvp3DW8QlU1RCIabDYFFovSfns0qiEa1WC3W6Aouz4biURUqKoOh8MKWZbabw+FotB1A06nDdKumxEMRmEYxh4DMwKBCCRJgtO5a2+fYQDBYASyLMGx215AXTcQCkVhsciw2XZFqWk6wmEVVqsCq3VX7Z0tkyRJiETUjFomYB85hYPtX7tcNmBnrWm9TN3ISZIkBAKRjFomIDVzatFaJ93mZ9tht1ugqho0zYDNZulQeySiwTD2vL31MnbGHkPxWht2CXb7rtc0jNafmSRJsNn2vF1RpA416rqBaFSDosiw7HaZPk3Toao6LBa5Qx6qqkPTdFitSoc82pYp121DfTDa/vNPp5wy6XdPVXVEImpGLdM+c9qttrbtedovUzdyCoVU6LqeUcuUiTnFa5nC4dZteSYtUybmFK9lUlUdNpuSUcuUiTnFZ1se38seSkaKXWuhpqYGo0ePxqxZszB8+PD22x955BEsXrwY//jHPzrcv6WlBWeccQbuvvtujBkzBgBw2223oampCX/+85+79dp1dc1IrZ9G4rlcNrE+HYxE4HryUQBA4IabAZtY00iFy9tEq2uacdEbS3D7CYPQN89l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hN0FiCj5iCgFiCg5iCo5iCpeqHI2VMXT+n85G5rihia7oEkuaLITuuIEYIO0czl3/bzbfjY7K/vFvyW0frHrto7/BnZbzvbbpY7fl3b9nLt6bELbrAin04pgMLr7T26P35c9buvKnQC0vRkyOv5zt393/H3e835Gh39jj+93fJ72u3W2mvziZ7d72R1+zr/4Ge6R384H/PK2vebW4XcB7b+xu+7T8bV2v22P+3RW+y8euz8ulw2BQKRL9xXB/tqXrmxx9/ee38yWwOWyIhCIHtiTdLKAnS3THutpp/c5sJ/GfteR3W7c130ybVYO0LqcBQXxm0GTcrtCI5EIVq5cid/+9rftt8myjFGjRmHJkiWdPmbp0qW45JJLOtx2zDHH4OOPP+7Wayfz98VW83/IXvV7SHoweS+6F/G8qrshu6C7+sOweGBYsmEoXuhWDwzFjc7efshaCxBsaR+Gl3AhFchuXYHsde8BjpRbBRLKYpWBVN+z1w3OukZMKAxBrZaw2exiSGj2nf+170uWATha/zOyD/yNUUzaVvUEfr5j7Pyv7aUS99GhC0A/AP0gAXArQeRrOzAy+3sAQESyI8vwAaoPUH9IWBXXb/oDPm0embDnJyIisbjtChb98YS4PV/KdTYNDQ3QNG2Pw+/z8/Oxfv36Th9TV1eHgoKCPe5fV1fXrdfOz0/i5N6CC4AhFyTv9ZJEApDy45CaZgAAnCaXYZZMOnj9yJ3/EZGgrmz9Xzw/pN6X6Ul6HSIiolhwEhkRERERERFRmku55j43NxeKosDn83W43efz7bF3vk1BQcEee+n3dX8iIiIiIiKiTJJyzb3NZsOQIUOwYMGC9tt0XceCBQswfPjwTh9zyCGHYOHChR1umz9/Pg455JBElkpERERERESUElKuuQeAyZMnY/bs2ZgzZw7WrVuHe+65B8FgEGeddRYA4JZbbsFjjz3Wfv9Jkybhq6++wssvv4x169bh6aefxooVK3DhhReatQhERERERERESZNyA/UA4JRTTkF9fT2mT5+O2tpaVFZWYsaMGe2H2W/btg2yvOtziUMPPRSPPvoonnzySTz++OPo168fnn32WV7jnoiIiIiIiISQkte5JyIiIiIiIqKuS8nD8omIiIiIiIio69jcExEREREREaU5NvdEREREREREaY7NPREREREREVGaY3NPe4hEIvif//kflJeXY9WqVWaXQwlQXV2NP/7xjxg7diyGDRuGE044AdOnT0ckEjG7NIqTN998E2PHjkVVVRXOPvtsLF++3OySKAFeeOEFTJgwAcOHD8dRRx2Fq6++GuvXrze7LEqSF198EeXl5XjggQfMLoUSpKamBjfffDOOOOIIDBs2DKeffjq+++47s8uiBNA0DU8++WSH92bPPvssOPs8MyxevBhXXnkljjnmGJSXl+Pjjz/u8H3DMPDUU0/hmGOOwbBhw3DJJZdg48aN3X4dNve0h0ceeQRFRUVml0EJtH79ehiGgalTp+Ldd9/F7bffjlmzZuGJJ54wuzSKg/feew/Tpk3DNddcgzlz5qCiogJTpkyBz+czuzSKs6+//hoXXHABZs+ejVdeeQWqqmLKlCkIBAJml0YJtnz5csyaNQvl5eVml0IJ0tjYiIkTJ8JqteKll17Cu+++i1tvvRVer9fs0igBXnrpJfztb3/DXXfdhffeew8333wzZsyYgddff93s0igOAoEAysvLcffdd3f6/Zdeegmvv/467rnnHsyePRtOpxNTpkxBOBzu1uuk5HXuyTxffPEF5s2bh6effhpffvml2eVQgowePRqjR49u/3fv3r2xYcMG/O1vf8Ott95qYmUUD6+88grOOeccTJgwAQBw77334vPPP8dbb72FK664wuTqKJ5mzpzZ4d8PPfQQjjrqKKxcuRKHH364SVVRovn9fvzhD3/A/fffj+eee87scihBXnrpJfTo0QPTpk1rv613794mVkSJtGTJEhx//PH41a9+BQDo1asX3n33XR55lyHGjBmDMWPGdPo9wzDw2muv4aqrrsIJJ5wAoHVn66hRo/Dxxx/j1FNP7fLrcM89taurq8Odd96JRx55BA6Hw+xyKMmam5u5NyADRCIRrFy5EqNGjWq/TZZljBo1CkuWLDGxMkqG5uZmAOC6nOGmTp2KMWPGdFjPKfN8+umnGDp0KK6//nocddRROPPMMzF79myzy6IEGT58OBYuXIgNGzYAAFavXo1vvvmmw84YykzV1dWora3tsE3Pzs7GwQcf3O33btxzTwBaPzG67bbbcN5556GqqgrV1dVml0RJ9NNPP+GNN97gXvsM0NDQAE3TkJ+f3+H2/Px8noud4XRdx4MPPohDDz0UZWVlZpdDCfLuu+/i+++/xz//+U+zS6EE27x5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DRuG0aNH48orr4zL8hERkdi4556IiOgXHn74YSxcuBDHHnssbrzxxi4/LicnBwCwYcOGLj/G5/PhwgsvxPr161FZWYmJEydC13WsX78eM2bMwKWXXtr+QcH777+Pm266CTabDePGjUN+fj7mzZuHZ599FnPnzsXrr78Ou93e4fl37NiBc889F16vF6eccgrC4TCysrIAAH/9618xdepUeDweHHfcccjLy8OKFSvw/PPPY9GiRXjttddgs9n2WnvPnj1x7bXX4uOPP8bq1asxadIkeDweAGj/f7xrNsMHH3yAefPm4Ve/+hXOP/98tLS0dPj+//7v/+Lrr7/Gcccdh2OOOQaffPIJnn76aUSj0Q6/P4899hhmzJiBPn364LTTToPb7UZNTQ2++eYbzJ8/v0szHYiIiPbKICIionZz5swxysrKjBNPPNFobGzs1mNXrFhhDB482BgyZIhx5513Gp988olRU1Ozz8dcd911RllZmfH444/v8b3a2lojGo0ahmEYzc3NxogRI4yhQ4caq1atar+PpmnGDTfcYJSVlRnPPPNMh8eXlZUZZWVlxm233Waoqtrhe2vXrjUGDx5snHHGGUZ9fX2H773wwgtGWVmZMXPmzC4t96233mqUlZUZmzdv7nB7vGvuqoULFxplZWXGrbfe2uH2Cy+80CgrK+vyMrz11ltGWVmZUVFRYcybN2+vjxk7dmyHnH0+n3HYYYcZw4cPN8LhcPvtI0eONI455hgjEAjs8VwNDQ3dXUwiIqIOeFg+ERHRTt999x3uuusuuFwuPPvss+17n7tqyJAheOihh5CVlYW///3vuOqqq3DsscdizJgxuP3227FixYoO96+trcWHH36IPn367DEUDgAKCgpgsbQeZPfxxx+jubkZEyZMQEVFRft9ZFnGH/7wB1gsFsyZM2eP57BarfjDH/4ARVE63D5r1iyoqoo777wTubm5Hb532WWXIS8vD//+97+7tfy/FO+azXL88cdj1KhRe/3+1Vdf3WHeQF5eHo4//nj4/f49juKwWq2dLlfbUR9ERESx4mH5REREAOrq6nDttdciEong6aefxkEHHdTp/Z5++uk9brv44ovbPwg4/fTTcdJJJ2HevHn45ptvsHLlSixZsgRvv/02/vWvf+Guu+7CxIkTAQArVqyAYRg44ogjOj1Hf3erVq0CAIwcOXKP75WWlqJXr17YuHEjWlpaOhzC3qtXL+Tl5e3xmGXLlgEAvvrqKyxYsGCP71sslm6dXpCMms0ybNiwfX6/szkKxcXFANDhagynnHIK/vrXv+K0007DKaecgiOOOALDhw+Hw+GIb8FERCQkNvdERCS8aDSK66+/Hj///DOuvvpqnHjiiXu97zPPPLPHbePHj++wl99ut2Ps2LHtg9fC4TBmzpyJp556Cg888ABOOOEEFBYWtjd+bY3gvrSd511QUNDp94uKirBx40b4/f4OjfLe7t/Y2AgAeP755/f72rGKd81myc/P3+f3O5sH0HbEhaZp7bf96U9/Qq9evfD222/jueeew3PPPQe73Y5x48bh1ltvTakPNIiIKP2wuSciIuHdd999+Oabb3Dcccfh+uuv3+d916xZ0+3nt9vtuPrqqzF//nwsXrwY3377LX7961+3fyBQU1Oz3+doayDr6uo6/X5tbS0AwO12d7hdkqR9Pt8333yTsGF18a75QLU9r6qq7c13m933sO/tcQfKYrFgypQpmDJlCmpqarB48eL2Izrq6uowc+bMuLwOERGJiefcExGR0P7+97/j73//O/r3749HH300YY0lALhcrg7/Hjp0KGRZxqJFi/a45N0vtV3L/euvv97je9u2bcPmzZvRu3fvLjfqbYeatx2enwjxrvlAeb1eAHt+mKLrOlavXp2UGtoUFxfjtNNOw4wZM9C3b1/Mnz8foVAoqTUQEVFmYXNPRETC+vbbb3HfffchKysLzz777AE3me+++y4WLFgAwzD2+N7SpUuxaNEiWCwWHHLIIQBaDz8/6aSTsGnTpk4P9/f5fFBVFQBwwgknIDs7G2+//TbWrl3bfh/DMPDoo49CVVWMHz++y7Wef/75sFgsuO+++7B169Y9vt/U1ITvv/++y8/XmXjXfKCqqqoAYI8hfq+88kqH69snQiQSwbfffrvH7YFAAIFAABaLBbLMt2VERBQ7HpZPRERCamlpwfXXX49oNIrhw4fjvffe2+f9R44cud/rkC9duhSvvfYaiouLcfjhh6OkpATRaBTr1q3DvHnzoOs6brrppg7n2N99991Yu3Ytnn/+eXz55Zc48sgjYRgGNm7ciLlz52L+/PnweDzIysrCfffdh5tuugnnnHMOxo0bh7y8PMyfPx8rV67EsGHDcNlll3V5+cvKynD33Xfjnnvuwcknn4wxY8agd+/e8Pv9qK6uxtdff43x48dj6tSpXX7OX4p3zQfqrLPOwowZM/D0009j1apV6NOnD1asWIEffvgBI0eO7PQIg3gJhUKYOHEi+vXrh6FDh6KkpASBQACff/45amtrcemll8JmsyXs9YmIKPOxuSciIiHt2LGj/Zzvr7/+er+N3bXXXrvf5v7SSy9F3759MXfuXHz33Xf49NNPEY1GUVhYiJNOOgnnnXcejjrqqA6PycvLw+zZszFz5kx88MEHeOONN2C329GrVy9cccUVcDqd7fcdN24cCgsL8cILL+Cjjz5CMBhEz549cfXVV+Pyyy+H3W7v1s/gnHPOQUVFBf7yl79g8eLF+Oyzz5CVlYXS0lJccsklOPPMM7v1fJ2Jd80HoqCgAK+99hoeeughzJs3DwsXLsQRRxyB2bNn47nnnkvoazudTtx8881YuHAh/vvf/8Ln88Hr9aJ///74/e9/j1NPPTWhr09ERJlPMjo7dpCIiIiIiIiI0gZP7iIiIiIiIiJKc2zuiYiIiIiIiNIcm3siIiIiIiKiNMfmnoiIiIiIiCjNsbknIiIiIiIiSnNs7omIiIiIiIjSHJt7IiIiIiIiojTH5p6IiIiIiIgozbG5JyIiIiIiIkpzbO6JiIiIiIiI0hybeyIiIiIiIqI0x+aeiIiIiIiIKM39f44rT1XYHNF3AAAAAElFTkSuQmCC"
+      "image/png": ""
      },
      "metadata": {},
      "output_type": "display_data"
     }
    ],
-   "execution_count": 101
+   "execution_count": 81
   },
   {
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2025-01-06T22:46:45.340411Z",
-     "start_time": "2025-01-06T22:46:36.403656Z"
+     "end_time": "2025-03-09T03:06:41.456054Z",
+     "start_time": "2025-03-09T03:06:41.198084Z"
     }
    },
    "cell_type": "code",
@@ -1631,7 +2496,7 @@
     "# Too Frequent: Players who are able to ascend with high frequency in their history of games  relative to the average player. \n",
     "# Define Ascension Frequency >= X (statistical top, e.g. top 1-5% of players) \n",
     "\n",
-    "player_stats = df.groupby('name').agg(\n",
+    "player_stats = expert_df.groupby('name').agg(\n",
     "    total_games = ('name', 'count'),\n",
     "    total_ascensions = ('death', lambda x: x.str.contains('ascended', na=False).sum())\n",
     ").reset_index()\n",
@@ -1658,13 +2523,13 @@
       "text/plain": [
        "<Figure size 1000x600 with 1 Axes>"
       ],
-      "image/png": ""
+      "image/png": ""
      },
      "metadata": {},
      "output_type": "display_data"
     }
    ],
-   "execution_count": 102
+   "execution_count": 58
   },
   {
    "metadata": {
diff --git a/notebooks/2-28-2025_Random-Sample.ipynb b/notebooks/2-28-2025_Random-Sample.ipynb
index 1d3defc..d33a460 100644
--- a/notebooks/2-28-2025_Random-Sample.ipynb
+++ b/notebooks/2-28-2025_Random-Sample.ipynb
@@ -140,16 +140,9 @@
     "import numpy as np\n",
     "\n",
     "# Define output HDF5 file\n",
-    "HDF5_FILE = \"/code/NetHack-Research/data/raw/data-mon-hum-neu-any.hdf5\"\n",
+    "HDF5_FILE = \"/data/processed/data-mon-hum-neu-any.hdf5\"\n",
     "\n",
     "def save_to_hdf5(minibatch, output_file):\n",
-    "    \"\"\"\n",
-    "    Saves the minibatch data in an HDF5 format, organizing trajectories by game ID.\n",
-    "\n",
-    "    Args:\n",
-    "        minibatch (dict): The extracted trajectory data from NLD-NAO.\n",
-    "        output_file (str): Path to save the HDF5 file.\n",
-    "    \"\"\"\n",
     "    with h5py.File(output_file, \"w\") as hdf5_file:\n",
     "        unique_game_ids = np.unique(minibatch[\"gameids\"])\n",
     "\n",
@@ -1201,7 +1194,7 @@
     "\n",
     "try:\n",
     "    # Directly load the dataset from your local file\n",
-    "    dataset_path = \"/code/NetHack-Research/data/raw/data-mon-hum-neu-any.hdf5\"\n",
+    "    dataset_path = \"/data/processed/data-mon-hum-neu-any.hdf5\"\n",
     "    hdf5_file, trajectories = load_nld_aa_small_dataset(mode=\"in_memory\")\n",
     "\n",
     "    print(f\"Successfully loaded dataset with {len(trajectories)} episodes\")\n",
diff --git a/notebooks/Persistence_Extraction.ipynb b/notebooks/Persistence_Extraction.ipynb
new file mode 100644
index 0000000..8cdc6ac
--- /dev/null
+++ b/notebooks/Persistence_Extraction.ipynb
@@ -0,0 +1,654 @@
+{
+ "cells": [
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T06:10:35.417387Z",
+     "start_time": "2025-03-11T06:10:35.413880Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "import pandas as pd\n",
+    "import matplotlib.pyplot as plt\n",
+    "import numpy as np\n",
+    "import seaborn as sns"
+   ],
+   "id": "a8242e33a5995644",
+   "outputs": [],
+   "execution_count": 1
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:42:26.550935Z",
+     "start_time": "2025-03-11T08:42:19.365035Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Full dataset\n",
+    "csv_path = \"/code/NetHack-Research/data/processed/new_full_data.csv\"\n",
+    "\n",
+    "# Load CSV to Pandas Dataframe\n",
+    "df = pd.read_csv(csv_path)\n",
+    "data = df.sort_values(['name', 'starttime'])"
+   ],
+   "id": "initial_id",
+   "outputs": [],
+   "execution_count": 151
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T07:32:30.098618Z",
+     "start_time": "2025-03-11T07:32:30.095461Z"
+    }
+   },
+   "cell_type": "code",
+   "source": "### TEMPORAL METRICS ",
+   "id": "9ff58ad5ab11c180",
+   "outputs": [],
+   "execution_count": 97
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:42:43.857719Z",
+     "start_time": "2025-03-11T08:42:43.720798Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Add game sequence number for each player\n",
+    "data['game_count'] = data.groupby('name').cumcount() + 1"
+   ],
+   "id": "fe2d1316851e12ce",
+   "outputs": [],
+   "execution_count": 152
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:42:46.528591Z",
+     "start_time": "2025-03-11T08:42:45.784472Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Calculate game duration in minutes\n",
+    "data['duration_minutes'] = (pd.to_datetime(data['endtime']) - pd.to_datetime(data['starttime'])).dt.total_seconds() / 60"
+   ],
+   "id": "4997585e2b5d7897",
+   "outputs": [],
+   "execution_count": 153
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:42:59.687609Z",
+     "start_time": "2025-03-11T08:42:47.737106Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Calculate Inter-Session Game Time\n",
+    "data['next_game_time'] = data.groupby('name')['starttime'].shift(-1)\n",
+    "data['inter_session_time'] = (pd.to_datetime(data['next_game_time']) - pd.to_datetime(data['starttime'])).dt.total_seconds() / 3600\n",
+    "\n",
+    "# Replace NaN values with a large finite value to migitate problems training \n",
+    "max_value = data['inter_session_time'].max()\n",
+    "data['inter_session_time'] = data['inter_session_time'].fillna(max_value * 2)\n",
+    "\n",
+    "data['rolling_inter_session'] = data.groupby('name')['inter_session_time'].transform(lambda x: x.rolling(3, min_periods=1).mean())\n",
+    "\n",
+    "# Create quick return indicator (session within 12 hours instead of 24)\n",
+    "data['quick_return'] = (data['inter_session_time'] < 12).astype(int)\n",
+    "\n",
+    "# Drop Next_game_time\n",
+    "# TODO: drop next_game_time\n",
+    "data = data.drop(columns='next_game_time')"
+   ],
+   "id": "624332a06c83afeb",
+   "outputs": [],
+   "execution_count": 154
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:43:03.299687Z",
+     "start_time": "2025-03-11T08:43:02.693646Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Ensure 'starttime' is in datetime format\n",
+    "data['starttime'] = pd.to_datetime(data['starttime'])\n",
+    "\n",
+    "# Get first game date per player\n",
+    "data['first_game_date'] = data.groupby('name')['starttime'].transform('min')\n",
+    "\n",
+    "# Compute days since first game\n",
+    "data['days_since_first_game'] = (data['starttime'] - data['first_game_date']).dt.total_seconds() / (24 * 3600)\n",
+    "\n",
+    "# Ensure non-negative values (just as a safety check)\n",
+    "data['days_since_first_game'] = data['days_since_first_game'].clip(lower=0)\n",
+    "\n",
+    "# Drop first_game_date after computation\n",
+    "data.drop(columns=['first_game_date'], inplace=True)"
+   ],
+   "id": "14ae13a6745474b",
+   "outputs": [],
+   "execution_count": 155
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:43:07.111495Z",
+     "start_time": "2025-03-11T08:43:05.222397Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Calculate days active (number of unique days played)\n",
+    "data['game_date'] = pd.to_datetime(data['starttime']).dt.date\n",
+    "temp_days = data.groupby('name')['game_date'].nunique().reset_index()\n",
+    "temp_days.columns = ['name', 'unique_days_active']\n",
+    "data = pd.merge(data, temp_days, on='name', how='left')\n",
+    "# TODO: Drop game_date"
+   ],
+   "id": "38a968cbbb63468b",
+   "outputs": [],
+   "execution_count": 156
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:43:28.121325Z",
+     "start_time": "2025-03-11T08:43:08.358436Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "import numpy as np\n",
+    "import pandas as pd\n",
+    "\n",
+    "# Ensure 'starttime' is in datetime format\n",
+    "data['starttime'] = pd.to_datetime(data['starttime'])\n",
+    "\n",
+    "# Extract game date (only date, not time)\n",
+    "data['game_date'] = data['starttime'].dt.date\n",
+    "\n",
+    "# Compute total unique days active per player\n",
+    "data['unique_days_active'] = data.groupby('name')['game_date'].transform('nunique')\n",
+    "\n",
+    "# Compute total games per player\n",
+    "data['total_games'] = data.groupby('name')['name'].transform('count')\n",
+    "\n",
+    "# Compute play density safely (avoid division by zero)\n",
+    "data['play_density'] = data['total_games'] / data['unique_days_active'].replace(0, np.nan)\n",
+    "\n",
+    "# Apply log transformation to normalize the distribution\n",
+    "data['log_play_density'] = np.log1p(data['play_density'])\n",
+    "\n",
+    "# Compute rolling play density over the last 7 played days (not just consecutive game sessions)\n",
+    "data['rolling_play_density'] = data.groupby('name')['game_count'].transform(\n",
+    "    lambda x: x.rolling(window=7, min_periods=1).sum()\n",
+    ")\n",
+    "\n",
+    "data['smoothed_play_density'] = data.groupby('name')['rolling_play_density'].transform(lambda x: x.ewm(span=5, adjust=False).mean())\n",
+    "\n",
+    "# Drop temporary columns if not needed\n",
+    "data.drop(columns=['total_games', 'unique_days_active', 'game_date', 'rolling_play_density', 'play_density'], inplace=True)"
+   ],
+   "id": "4b3658d8ba585597",
+   "outputs": [],
+   "execution_count": 157
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:43:52.148527Z",
+     "start_time": "2025-03-11T08:43:52.146011Z"
+    }
+   },
+   "cell_type": "code",
+   "source": "## PROGRESSION METRICS",
+   "id": "2d6bc59080f89b0",
+   "outputs": [],
+   "execution_count": 158
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:43:53.001719Z",
+     "start_time": "2025-03-11T08:43:52.891291Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Calculate cumulative max level reached\n",
+    "data['cum_max_level'] = data.groupby('name')['maxlvl'].cummax()"
+   ],
+   "id": "8f251e82b9637ccb",
+   "outputs": [],
+   "execution_count": 159
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:44:03.047373Z",
+     "start_time": "2025-03-11T08:43:54.875704Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Calculate level progression rate\n",
+    "data['level_progression_rate'] = data['maxlvl'] / data['game_count']\n",
+    "# Smooth it out\n",
+    "data['cum_level_progression_rate'] = data.groupby('name')['level_progression_rate'].transform(lambda x: x.expanding().mean())"
+   ],
+   "id": "1bed6d3244a3a66e",
+   "outputs": [],
+   "execution_count": 160
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:44:14.790204Z",
+     "start_time": "2025-03-11T08:44:04.244233Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "data['points_per_turn'] = data['points'] / data['turns'].where(data['turns'] > 0, np.nan)\n",
+    "data['log_points_per_turn'] = np.log1p(data.groupby('name')['points_per_turn'].transform(lambda x: x.rolling(5, min_periods=1).mean()))"
+   ],
+   "id": "f8845e540184e6c5",
+   "outputs": [],
+   "execution_count": 161
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:44:17.494153Z",
+     "start_time": "2025-03-11T08:44:17.342844Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Calculate relative performance (compared to player's average)\n",
+    "data['avg_points'] = data.groupby('name')['points'].transform('mean')\n",
+    "data['relative_performance'] = data['points'] / (data['avg_points'].replace(0, np.nan) + 1e-5)\n",
+    "\n",
+    "upper_limit = data['relative_performance'].quantile(0.95)\n",
+    "data['relative_performance'] = data['relative_performance'].clip(0, upper_limit)"
+   ],
+   "id": "4136b175522ffd05",
+   "outputs": [],
+   "execution_count": 162
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:44:31.567010Z",
+     "start_time": "2025-03-11T08:44:21.156883Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "import numpy as np\n",
+    "# Compute previous max level per player (for progression tracking)\n",
+    "data['prev_max_level'] = data.groupby('name')['cum_max_level'].shift(1).fillna(0)\n",
+    "\n",
+    "# Compute level improvement per game\n",
+    "data['level_improvement'] = data['cum_max_level'] - data['prev_max_level']\n",
+    "\n",
+    "# Ensure cumulative progression velocity starts at 0\n",
+    "data['cum_progression_velocity'] = data.groupby('name')['level_improvement'].cumsum()\n",
+    "data.loc[data['game_count'] == 1, 'cum_progression_velocity'] = 0\n",
+    "data['rolling_progression_velocity'] = data.groupby('name')['level_improvement'].transform(lambda x: x.rolling(5, min_periods=1).mean())\n",
+    "# Drop temporary column if needed\n",
+    "data.drop(columns=['prev_max_level'], inplace=True)"
+   ],
+   "id": "c8ea7c4d2c663fff",
+   "outputs": [],
+   "execution_count": 163
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:44:36.163188Z",
+     "start_time": "2025-03-11T08:44:35.712081Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Create standardized variables for composite score\n",
+    "persistence_components = [\n",
+    "    'cum_progression_velocity',\n",
+    "    'cum_level_progression_rate',\n",
+    "    'smoothed_play_density',\n",
+    "    'rolling_progression_velocity',\n",
+    "    'log_points_per_turn'\n",
+    "]\n",
+    "\n",
+    "# Ensure all components exist\n",
+    "for component in persistence_components:\n",
+    "    if component not in data.columns:\n",
+    "        print(f\"Warning: Component {component} not found in dataframe\")\n",
+    "        persistence_components.remove(component)\n",
+    "\n",
+    "# Standardize each component\n",
+    "for component in persistence_components:\n",
+    "    mean_val = data[component].mean()\n",
+    "    std_val = data[component].std()\n",
+    "    if std_val > 0:\n",
+    "        data[f'{component}_std'] = (data[component] - mean_val) / std_val\n",
+    "    else:\n",
+    "        data[f'{component}_std'] = 0\n",
+    "\n",
+    "# Calculate composite persistence score\n",
+    "std_components = [f'{component}_std' for component in persistence_components]\n",
+    "data['persistence_score'] = data[std_components].mean(axis=1)\n",
+    "\n",
+    "# Calculate cumulative persistence score\n",
+    "data['cumulative_persistence'] = data.groupby('name')['persistence_score'].cumsum()\n",
+    "data['avg_persistence'] = data.groupby('name')['persistence_score'].transform('mean')\n",
+    "\n",
+    "print(f\"Engineered {len(data.columns) - len(df.columns)} new features for persistence analysis\")"
+   ],
+   "id": "13d9a509dd90c6b4",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Engineered 26 new features for persistence analysis\n"
+     ]
+    }
+   ],
+   "execution_count": 164
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:45:04.418971Z",
+     "start_time": "2025-03-11T08:44:42.750471Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "from sklearn.preprocessing import StandardScaler\n",
+    "scaler = StandardScaler()\n",
+    "data['game_number_centered'] = scaler.fit_transform(data[['game_count']])\n",
+    "data['game_number_squared'] = data['game_number_centered'] ** 2\n",
+    "\n",
+    "# Calculate rolling statistics by standard deviation (e.g., 3-game windows)\n",
+    "window_size = 3\n",
+    "data['rolling_maxlvl_std'] = data.groupby('name')['maxlvl'].transform(lambda x: x.rolling(window=window_size, min_periods=1).std())\n",
+    "data['rolling_turns_std'] = data.groupby('name')['turns'].transform(lambda x: x.rolling(window=window_size, min_periods=1).std())"
+   ],
+   "id": "f806a9fb6530ecb0",
+   "outputs": [],
+   "execution_count": 165
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T07:36:00.207567Z",
+     "start_time": "2025-03-11T07:35:38.772153Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Compute CV with safe division\n",
+    "data['rolling_maxlvl_mean'] = data.groupby('name')['maxlvl'].transform(lambda x: x.rolling(window=window_size, min_periods=1).mean())\n",
+    "data['rolling_turns_mean'] = data.groupby('name')['turns'].transform(lambda x: x.rolling(window=window_size, min_periods=1).mean())\n",
+    "data['rolling_maxlvl_cv'] = data['rolling_maxlvl_std'] / data['rolling_maxlvl_mean'].replace(0, np.nan).fillna(1)\n",
+    "data['rolling_turns_cv'] = data['rolling_turns_std'] / data['rolling_turns_mean'].replace(0, np.nan).fillna(1)"
+   ],
+   "id": "918826b2017aea21",
+   "outputs": [],
+   "execution_count": 113
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:51:50.937577Z",
+     "start_time": "2025-03-11T08:51:48.834374Z"
+    }
+   },
+   "cell_type": "code",
+   "source": "data.fillna(0, inplace=True)",
+   "id": "57df419a9a5a2cbb",
+   "outputs": [],
+   "execution_count": 172
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:54:17.659982Z",
+     "start_time": "2025-03-11T08:54:17.610632Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "scaler = StandardScaler()\n",
+    "data[['game_number_centered', 'game_number_squared']] = scaler.fit_transform(data[['game_number_centered', 'game_number_squared']])\n"
+   ],
+   "id": "638bb2dfbfc42495",
+   "outputs": [],
+   "execution_count": 176
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:56:49.225268Z",
+     "start_time": "2025-03-11T08:56:48.417101Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "\n",
+    "\n",
+    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
+    "X = data[['cumulative_persistence', 'persistence_score', 'game_number_centered']]\n",
+    "vif_data = pd.DataFrame()\n",
+    "vif_data[\"Feature\"] = X.columns\n",
+    "vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(len(X.columns))]\n",
+    "print(vif_data)"
+   ],
+   "id": "2fa3361962c6a63d",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "                  Feature       VIF\n",
+      "0  cumulative_persistence  2.537115\n",
+      "1       persistence_score  1.144682\n",
+      "2    game_number_centered  2.588748\n"
+     ]
+    }
+   ],
+   "execution_count": 182
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:59:04.140461Z",
+     "start_time": "2025-03-11T08:58:11.473708Z"
+    }
+   },
+   "cell_type": "code",
+   "source": "data.to_csv(\"/code/NetHack-Research/data/processed/features.csv\", index=False)",
+   "id": "bcc517071da09b34",
+   "outputs": [],
+   "execution_count": 184
+  },
+  {
+   "metadata": {},
+   "cell_type": "code",
+   "source": [
+    "import pandas as pd\n",
+    "import statsmodels.formula.api as smf\n",
+    "\n",
+    "# Select relevant columns\n",
+    "lgm_data = data[['name', 'game_count', 'persistence_score', 'cumulative_persistence', 'game_number_centered']]\n",
+    "\n",
+    "# Ensure proper data types\n",
+    "lgm_data = lgm_data.dropna()  # Drop missing values if needed\n",
+    "lgm_data = lgm_data.sort_values(['name', 'game_count'])  # Ensure time order\n"
+   ],
+   "id": "188c18fd1becdb5b",
+   "outputs": [],
+   "execution_count": null
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2025-03-11T08:39:26.764047Z",
+     "start_time": "2025-03-11T08:30:30.185986Z"
+    }
+   },
+   "cell_type": "code",
+   "source": [
+    "# Define LGM formula\n",
+    "lgm_formula = \"persistence_score ~ game_number_centered + game_number_squared\"\n",
+    "\n",
+    "# Fit the model with random intercepts and slopes\n",
+    "lgm_model = smf.mixedlm(lgm_formula, lgm_data, groups=lgm_data[\"name\"], \n",
+    "                         re_formula=\"1 + game_number_centered\")\n",
+    "\n",
+    "lgm_results = lgm_model.fit()\n",
+    "\n",
+    "# Print summary of model results\n",
+    "print(lgm_results.summary())"
+   ],
+   "id": "898ddc88f1c8ec63",
+   "outputs": [
+    {
+     "ename": "KeyboardInterrupt",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mKeyboardInterrupt\u001B[0m                         Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[148], line 8\u001B[0m\n\u001B[1;32m      4\u001B[0m \u001B[38;5;66;03m# Fit the model with random intercepts and slopes\u001B[39;00m\n\u001B[1;32m      5\u001B[0m lgm_model \u001B[38;5;241m=\u001B[39m smf\u001B[38;5;241m.\u001B[39mmixedlm(lgm_formula, lgm_data, groups\u001B[38;5;241m=\u001B[39mlgm_data[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mname\u001B[39m\u001B[38;5;124m\"\u001B[39m], \n\u001B[1;32m      6\u001B[0m                          re_formula\u001B[38;5;241m=\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m1 + game_number_centered\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[0;32m----> 8\u001B[0m lgm_results \u001B[38;5;241m=\u001B[39m \u001B[43mlgm_model\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     10\u001B[0m \u001B[38;5;66;03m# Print summary of model results\u001B[39;00m\n\u001B[1;32m     11\u001B[0m \u001B[38;5;28mprint\u001B[39m(lgm_results\u001B[38;5;241m.\u001B[39msummary())\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/regression/mixed_linear_model.py:2191\u001B[0m, in \u001B[0;36mMixedLM.fit\u001B[0;34m(self, start_params, reml, niter_sa, do_cg, fe_pen, cov_pen, free, full_output, method, **fit_kwargs)\u001B[0m\n\u001B[1;32m   2189\u001B[0m \u001B[38;5;66;03m# Try optimizing one or more times\u001B[39;00m\n\u001B[1;32m   2190\u001B[0m \u001B[38;5;28;01mfor\u001B[39;00m j \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mrange\u001B[39m(\u001B[38;5;28mlen\u001B[39m(method)):\n\u001B[0;32m-> 2191\u001B[0m     rslt \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43msuper\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m(\u001B[49m\u001B[43mstart_params\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mpacked\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   2192\u001B[0m \u001B[43m                       \u001B[49m\u001B[43mskip_hessian\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43;01mTrue\u001B[39;49;00m\u001B[43m,\u001B[49m\n\u001B[1;32m   2193\u001B[0m \u001B[43m                       \u001B[49m\u001B[43mmethod\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmethod\u001B[49m\u001B[43m[\u001B[49m\u001B[43mj\u001B[49m\u001B[43m]\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   2194\u001B[0m \u001B[43m                       \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mfit_kwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   2195\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m rslt\u001B[38;5;241m.\u001B[39mmle_retvals[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mconverged\u001B[39m\u001B[38;5;124m'\u001B[39m]:\n\u001B[1;32m   2196\u001B[0m         \u001B[38;5;28;01mbreak\u001B[39;00m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/base/model.py:566\u001B[0m, in \u001B[0;36mLikelihoodModel.fit\u001B[0;34m(self, start_params, method, maxiter, full_output, disp, fargs, callback, retall, skip_hessian, **kwargs)\u001B[0m\n\u001B[1;32m    563\u001B[0m     \u001B[38;5;28;01mdel\u001B[39;00m kwargs[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124muse_t\u001B[39m\u001B[38;5;124m\"\u001B[39m]\n\u001B[1;32m    565\u001B[0m optimizer \u001B[38;5;241m=\u001B[39m Optimizer()\n\u001B[0;32m--> 566\u001B[0m xopt, retvals, optim_settings \u001B[38;5;241m=\u001B[39m \u001B[43moptimizer\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_fit\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mscore\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mstart_params\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    567\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mfargs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwargs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    568\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mhessian\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mhess\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    569\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mmethod\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmethod\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    570\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mdisp\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdisp\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    571\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mmaxiter\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmaxiter\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    572\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mcallback\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcallback\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    573\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mretall\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mretall\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    574\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mfull_output\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfull_output\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    575\u001B[0m \u001B[38;5;66;03m# Restore cov_type, cov_kwds and use_t\u001B[39;00m\n\u001B[1;32m    576\u001B[0m optim_settings\u001B[38;5;241m.\u001B[39mupdate(kwds)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/base/optimizer.py:243\u001B[0m, in \u001B[0;36mOptimizer._fit\u001B[0;34m(self, objective, gradient, start_params, fargs, kwargs, hessian, method, maxiter, full_output, disp, callback, retall)\u001B[0m\n\u001B[1;32m    240\u001B[0m     fit_funcs\u001B[38;5;241m.\u001B[39mupdate(extra_fit_funcs)\n\u001B[1;32m    242\u001B[0m func \u001B[38;5;241m=\u001B[39m fit_funcs[method]\n\u001B[0;32m--> 243\u001B[0m xopt, retvals \u001B[38;5;241m=\u001B[39m \u001B[43mfunc\u001B[49m\u001B[43m(\u001B[49m\u001B[43mobjective\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mgradient\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mstart_params\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfargs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwargs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    244\u001B[0m \u001B[43m                     \u001B[49m\u001B[43mdisp\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdisp\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mmaxiter\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmaxiter\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcallback\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcallback\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    245\u001B[0m \u001B[43m                     \u001B[49m\u001B[43mretall\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mretall\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfull_output\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfull_output\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    246\u001B[0m \u001B[43m                     \u001B[49m\u001B[43mhess\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mhessian\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    248\u001B[0m optim_settings \u001B[38;5;241m=\u001B[39m {\u001B[38;5;124m'\u001B[39m\u001B[38;5;124moptimizer\u001B[39m\u001B[38;5;124m'\u001B[39m: method, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mstart_params\u001B[39m\u001B[38;5;124m'\u001B[39m: start_params,\n\u001B[1;32m    249\u001B[0m                   \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mmaxiter\u001B[39m\u001B[38;5;124m'\u001B[39m: maxiter, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mfull_output\u001B[39m\u001B[38;5;124m'\u001B[39m: full_output,\n\u001B[1;32m    250\u001B[0m                   \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mdisp\u001B[39m\u001B[38;5;124m'\u001B[39m: disp, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mfargs\u001B[39m\u001B[38;5;124m'\u001B[39m: fargs, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mcallback\u001B[39m\u001B[38;5;124m'\u001B[39m: callback,\n\u001B[1;32m    251\u001B[0m                   \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mretall\u001B[39m\u001B[38;5;124m'\u001B[39m: retall, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mextra_fit_funcs\u001B[39m\u001B[38;5;124m\"\u001B[39m: extra_fit_funcs}\n\u001B[1;32m    252\u001B[0m optim_settings\u001B[38;5;241m.\u001B[39mupdate(kwargs)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/base/optimizer.py:538\u001B[0m, in \u001B[0;36m_fit_bfgs\u001B[0;34m(f, score, start_params, fargs, kwargs, disp, maxiter, callback, retall, full_output, hess)\u001B[0m\n\u001B[1;32m    536\u001B[0m norm \u001B[38;5;241m=\u001B[39m kwargs\u001B[38;5;241m.\u001B[39msetdefault(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mnorm\u001B[39m\u001B[38;5;124m'\u001B[39m, np\u001B[38;5;241m.\u001B[39minf)\n\u001B[1;32m    537\u001B[0m epsilon \u001B[38;5;241m=\u001B[39m kwargs\u001B[38;5;241m.\u001B[39msetdefault(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mepsilon\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;241m1.4901161193847656e-08\u001B[39m)\n\u001B[0;32m--> 538\u001B[0m retvals \u001B[38;5;241m=\u001B[39m \u001B[43moptimize\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfmin_bfgs\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mstart_params\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mscore\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43margs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfargs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    539\u001B[0m \u001B[43m                             \u001B[49m\u001B[43mgtol\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mgtol\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mnorm\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mnorm\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mepsilon\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mepsilon\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    540\u001B[0m \u001B[43m                             \u001B[49m\u001B[43mmaxiter\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmaxiter\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfull_output\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfull_output\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    541\u001B[0m \u001B[43m                             \u001B[49m\u001B[43mdisp\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdisp\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mretall\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mretall\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcallback\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcallback\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    542\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m full_output:\n\u001B[1;32m    543\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m retall:\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_optimize.py:1292\u001B[0m, in \u001B[0;36mfmin_bfgs\u001B[0;34m(f, x0, fprime, args, gtol, norm, epsilon, maxiter, full_output, disp, retall, callback, xrtol, c1, c2, hess_inv0)\u001B[0m\n\u001B[1;32m   1280\u001B[0m opts \u001B[38;5;241m=\u001B[39m {\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mgtol\u001B[39m\u001B[38;5;124m'\u001B[39m: gtol,\n\u001B[1;32m   1281\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mnorm\u001B[39m\u001B[38;5;124m'\u001B[39m: norm,\n\u001B[1;32m   1282\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124meps\u001B[39m\u001B[38;5;124m'\u001B[39m: epsilon,\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m   1288\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mc2\u001B[39m\u001B[38;5;124m'\u001B[39m: c2,\n\u001B[1;32m   1289\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mhess_inv0\u001B[39m\u001B[38;5;124m'\u001B[39m: hess_inv0}\n\u001B[1;32m   1291\u001B[0m callback \u001B[38;5;241m=\u001B[39m _wrap_callback(callback)\n\u001B[0;32m-> 1292\u001B[0m res \u001B[38;5;241m=\u001B[39m \u001B[43m_minimize_bfgs\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mx0\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfprime\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcallback\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcallback\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mopts\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1294\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m full_output:\n\u001B[1;32m   1295\u001B[0m     retlist \u001B[38;5;241m=\u001B[39m (res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mx\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mfun\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mjac\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mhess_inv\u001B[39m\u001B[38;5;124m'\u001B[39m],\n\u001B[1;32m   1296\u001B[0m                res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mnfev\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mnjev\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mstatus\u001B[39m\u001B[38;5;124m'\u001B[39m])\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_optimize.py:1398\u001B[0m, in \u001B[0;36m_minimize_bfgs\u001B[0;34m(fun, x0, args, jac, callback, gtol, norm, eps, maxiter, disp, return_all, finite_diff_rel_step, xrtol, c1, c2, hess_inv0, **unknown_options)\u001B[0m\n\u001B[1;32m   1395\u001B[0m pk \u001B[38;5;241m=\u001B[39m \u001B[38;5;241m-\u001B[39mnp\u001B[38;5;241m.\u001B[39mdot(Hk, gfk)\n\u001B[1;32m   1396\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[1;32m   1397\u001B[0m     alpha_k, fc, gc, old_fval, old_old_fval, gfkp1 \u001B[38;5;241m=\u001B[39m \\\n\u001B[0;32m-> 1398\u001B[0m              \u001B[43m_line_search_wolfe12\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mmyfprime\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mxk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mpk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mgfk\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1399\u001B[0m \u001B[43m                                  \u001B[49m\u001B[43mold_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mold_old_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mamin\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m1e-100\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1400\u001B[0m \u001B[43m                                  \u001B[49m\u001B[43mamax\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m1e100\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mc1\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mc1\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mc2\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mc2\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1401\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m _LineSearchError:\n\u001B[1;32m   1402\u001B[0m     \u001B[38;5;66;03m# Line search failed to find a better solution.\u001B[39;00m\n\u001B[1;32m   1403\u001B[0m     warnflag \u001B[38;5;241m=\u001B[39m \u001B[38;5;241m2\u001B[39m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_optimize.py:1134\u001B[0m, in \u001B[0;36m_line_search_wolfe12\u001B[0;34m(f, fprime, xk, pk, gfk, old_fval, old_old_fval, **kwargs)\u001B[0m\n\u001B[1;32m   1120\u001B[0m \u001B[38;5;250m\u001B[39m\u001B[38;5;124;03m\"\"\"\u001B[39;00m\n\u001B[1;32m   1121\u001B[0m \u001B[38;5;124;03mSame as line_search_wolfe1, but fall back to line_search_wolfe2 if\u001B[39;00m\n\u001B[1;32m   1122\u001B[0m \u001B[38;5;124;03msuitable step length is not found, and raise an exception if a\u001B[39;00m\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m   1129\u001B[0m \n\u001B[1;32m   1130\u001B[0m \u001B[38;5;124;03m\"\"\"\u001B[39;00m\n\u001B[1;32m   1132\u001B[0m extra_condition \u001B[38;5;241m=\u001B[39m kwargs\u001B[38;5;241m.\u001B[39mpop(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mextra_condition\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;28;01mNone\u001B[39;00m)\n\u001B[0;32m-> 1134\u001B[0m ret \u001B[38;5;241m=\u001B[39m \u001B[43mline_search_wolfe1\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfprime\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mxk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mpk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mgfk\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1135\u001B[0m \u001B[43m                         \u001B[49m\u001B[43mold_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mold_old_fval\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1136\u001B[0m \u001B[43m                         \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1138\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m ret[\u001B[38;5;241m0\u001B[39m] \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m \u001B[38;5;129;01mand\u001B[39;00m extra_condition \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[1;32m   1139\u001B[0m     xp1 \u001B[38;5;241m=\u001B[39m xk \u001B[38;5;241m+\u001B[39m ret[\u001B[38;5;241m0\u001B[39m] \u001B[38;5;241m*\u001B[39m pk\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_linesearch.py:94\u001B[0m, in \u001B[0;36mline_search_wolfe1\u001B[0;34m(f, fprime, xk, pk, gfk, old_fval, old_old_fval, args, c1, c2, amax, amin, xtol)\u001B[0m\n\u001B[1;32m     90\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m np\u001B[38;5;241m.\u001B[39mdot(gval[\u001B[38;5;241m0\u001B[39m], pk)\n\u001B[1;32m     92\u001B[0m derphi0 \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39mdot(gfk, pk)\n\u001B[0;32m---> 94\u001B[0m stp, fval, old_fval \u001B[38;5;241m=\u001B[39m \u001B[43mscalar_search_wolfe1\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m     95\u001B[0m \u001B[43m        \u001B[49m\u001B[43mphi\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mderphi\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mold_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mold_old_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mderphi0\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m     96\u001B[0m \u001B[43m        \u001B[49m\u001B[43mc1\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mc1\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mc2\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mc2\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mamax\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mamax\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mamin\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mamin\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mxtol\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mxtol\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     98\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m stp, fc[\u001B[38;5;241m0\u001B[39m], gc[\u001B[38;5;241m0\u001B[39m], fval, old_fval, gval[\u001B[38;5;241m0\u001B[39m]\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_linesearch.py:171\u001B[0m, in \u001B[0;36mscalar_search_wolfe1\u001B[0;34m(phi, derphi, phi0, old_phi0, derphi0, c1, c2, amax, amin, xtol)\u001B[0m\n\u001B[1;32m    168\u001B[0m maxiter \u001B[38;5;241m=\u001B[39m \u001B[38;5;241m100\u001B[39m\n\u001B[1;32m    170\u001B[0m dcsrch \u001B[38;5;241m=\u001B[39m DCSRCH(phi, derphi, c1, c2, xtol, amin, amax)\n\u001B[0;32m--> 171\u001B[0m stp, phi1, phi0, task \u001B[38;5;241m=\u001B[39m \u001B[43mdcsrch\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    172\u001B[0m \u001B[43m    \u001B[49m\u001B[43malpha1\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mphi0\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mphi0\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mderphi0\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mderphi0\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mmaxiter\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmaxiter\u001B[49m\n\u001B[1;32m    173\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    175\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m stp, phi1, phi0\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_dcsrch.py:256\u001B[0m, in \u001B[0;36mDCSRCH.__call__\u001B[0;34m(self, alpha1, phi0, derphi0, maxiter)\u001B[0m\n\u001B[1;32m    254\u001B[0m     alpha1 \u001B[38;5;241m=\u001B[39m stp\n\u001B[1;32m    255\u001B[0m     phi1 \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mphi(stp)\n\u001B[0;32m--> 256\u001B[0m     derphi1 \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mderphi\u001B[49m\u001B[43m(\u001B[49m\u001B[43mstp\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    257\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m    258\u001B[0m     \u001B[38;5;28;01mbreak\u001B[39;00m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_linesearch.py:88\u001B[0m, in \u001B[0;36mline_search_wolfe1.<locals>.derphi\u001B[0;34m(s)\u001B[0m\n\u001B[1;32m     87\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mderphi\u001B[39m(s):\n\u001B[0;32m---> 88\u001B[0m     gval[\u001B[38;5;241m0\u001B[39m] \u001B[38;5;241m=\u001B[39m \u001B[43mfprime\u001B[49m\u001B[43m(\u001B[49m\u001B[43mxk\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m+\u001B[39;49m\u001B[43m \u001B[49m\u001B[43ms\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mpk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     89\u001B[0m     gc[\u001B[38;5;241m0\u001B[39m] \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;241m1\u001B[39m\n\u001B[1;32m     90\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m np\u001B[38;5;241m.\u001B[39mdot(gval[\u001B[38;5;241m0\u001B[39m], pk)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:284\u001B[0m, in \u001B[0;36mScalarFunction.grad\u001B[0;34m(self, x)\u001B[0m\n\u001B[1;32m    282\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m np\u001B[38;5;241m.\u001B[39marray_equal(x, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mx):\n\u001B[1;32m    283\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_update_x_impl(x)\n\u001B[0;32m--> 284\u001B[0m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_update_grad\u001B[49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    285\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mg\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:267\u001B[0m, in \u001B[0;36mScalarFunction._update_grad\u001B[0;34m(self)\u001B[0m\n\u001B[1;32m    265\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21m_update_grad\u001B[39m(\u001B[38;5;28mself\u001B[39m):\n\u001B[1;32m    266\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mg_updated:\n\u001B[0;32m--> 267\u001B[0m         \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_update_grad_impl\u001B[49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    268\u001B[0m         \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mg_updated \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mTrue\u001B[39;00m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:175\u001B[0m, in \u001B[0;36mScalarFunction.__init__.<locals>.update_grad\u001B[0;34m()\u001B[0m\n\u001B[1;32m    174\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mupdate_grad\u001B[39m():\n\u001B[0;32m--> 175\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mg \u001B[38;5;241m=\u001B[39m \u001B[43mgrad_wrapped\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mx\u001B[49m\u001B[43m)\u001B[49m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:172\u001B[0m, in \u001B[0;36mScalarFunction.__init__.<locals>.grad_wrapped\u001B[0;34m(x)\u001B[0m\n\u001B[1;32m    170\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mgrad_wrapped\u001B[39m(x):\n\u001B[1;32m    171\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mngev \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;241m1\u001B[39m\n\u001B[0;32m--> 172\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m np\u001B[38;5;241m.\u001B[39matleast_1d(\u001B[43mgrad\u001B[49m\u001B[43m(\u001B[49m\u001B[43mnp\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcopy\u001B[49m\u001B[43m(\u001B[49m\u001B[43mx\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/base/model.py:545\u001B[0m, in \u001B[0;36mLikelihoodModel.fit.<locals>.score\u001B[0;34m(params, *args)\u001B[0m\n\u001B[1;32m    544\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mscore\u001B[39m(params, \u001B[38;5;241m*\u001B[39margs):\n\u001B[0;32m--> 545\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;241m-\u001B[39m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mscore\u001B[49m\u001B[43m(\u001B[49m\u001B[43mparams\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m \u001B[38;5;241m/\u001B[39m nobs\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/regression/mixed_linear_model.py:1630\u001B[0m, in \u001B[0;36mMixedLM.score\u001B[0;34m(self, params, profile_fe)\u001B[0m\n\u001B[1;32m   1624\u001B[0m     params \u001B[38;5;241m=\u001B[39m MixedLMParams\u001B[38;5;241m.\u001B[39mfrom_packed(\n\u001B[1;32m   1625\u001B[0m         params, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mk_fe, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mk_re, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39muse_sqrt,\n\u001B[1;32m   1626\u001B[0m         has_fe\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mFalse\u001B[39;00m)\n\u001B[1;32m   1628\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m profile_fe:\n\u001B[1;32m   1629\u001B[0m     params\u001B[38;5;241m.\u001B[39mfe_params, sing \u001B[38;5;241m=\u001B[39m \\\n\u001B[0;32m-> 1630\u001B[0m         \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mget_fe_params\u001B[49m\u001B[43m(\u001B[49m\u001B[43mparams\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcov_re\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mparams\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mvcomp\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1632\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m sing:\n\u001B[1;32m   1633\u001B[0m         msg \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mRandom effects covariance is singular\u001B[39m\u001B[38;5;124m\"\u001B[39m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/regression/mixed_linear_model.py:1338\u001B[0m, in \u001B[0;36mMixedLM.get_fe_params\u001B[0;34m(self, cov_re, vcomp, tol)\u001B[0m\n\u001B[1;32m   1336\u001B[0m exog \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mexog_li[group_ix]\n\u001B[1;32m   1337\u001B[0m ex_r, ex2_r \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_aex_r[group_ix], \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_aex_r2[group_ix]\n\u001B[0;32m-> 1338\u001B[0m solver \u001B[38;5;241m=\u001B[39m \u001B[43m_smw_solver\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m1.\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mex_r\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mex2_r\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcov_re_inv\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mvc_vari\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1339\u001B[0m u \u001B[38;5;241m=\u001B[39m solver(\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_endex_li[group_ix])\n\u001B[1;32m   1340\u001B[0m xtxy \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39mdot(exog\u001B[38;5;241m.\u001B[39mT, u)\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/regression/mixed_linear_model.py:501\u001B[0m, in \u001B[0;36m_smw_solver\u001B[0;34m(s, A, AtA, Qi, di)\u001B[0m\n\u001B[1;32m    499\u001B[0m d \u001B[38;5;241m=\u001B[39m qmat\u001B[38;5;241m.\u001B[39mshape[\u001B[38;5;241m0\u001B[39m]\n\u001B[1;32m    500\u001B[0m qmat\u001B[38;5;241m.\u001B[39mflat[m\u001B[38;5;241m*\u001B[39m(d\u001B[38;5;241m+\u001B[39m\u001B[38;5;241m1\u001B[39m)::d\u001B[38;5;241m+\u001B[39m\u001B[38;5;241m1\u001B[39m] \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m di\n\u001B[0;32m--> 501\u001B[0m qmati \u001B[38;5;241m=\u001B[39m \u001B[43mnp\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mlinalg\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msolve\u001B[49m\u001B[43m(\u001B[49m\u001B[43mqmat\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mA\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mT\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    503\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21msolver\u001B[39m(rhs):\n\u001B[1;32m    504\u001B[0m     \u001B[38;5;66;03m# A is tall and qmati is wide, so we want\u001B[39;00m\n\u001B[1;32m    505\u001B[0m     \u001B[38;5;66;03m# A * (qmati * rhs) not (A * qmati) * rhs\u001B[39;00m\n\u001B[1;32m    506\u001B[0m     ql \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39mdot(qmati, rhs)\n",
+      "File \u001B[0;32m<__array_function__ internals>:180\u001B[0m, in \u001B[0;36msolve\u001B[0;34m(*args, **kwargs)\u001B[0m\n",
+      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/numpy/linalg/linalg.py:400\u001B[0m, in \u001B[0;36msolve\u001B[0;34m(a, b)\u001B[0m\n\u001B[1;32m    398\u001B[0m signature \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mDD->D\u001B[39m\u001B[38;5;124m'\u001B[39m \u001B[38;5;28;01mif\u001B[39;00m isComplexType(t) \u001B[38;5;28;01melse\u001B[39;00m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mdd->d\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m    399\u001B[0m extobj \u001B[38;5;241m=\u001B[39m get_linalg_error_extobj(_raise_linalgerror_singular)\n\u001B[0;32m--> 400\u001B[0m r \u001B[38;5;241m=\u001B[39m \u001B[43mgufunc\u001B[49m\u001B[43m(\u001B[49m\u001B[43ma\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mb\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43msignature\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43msignature\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mextobj\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mextobj\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    402\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m wrap(r\u001B[38;5;241m.\u001B[39mastype(result_t, copy\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mFalse\u001B[39;00m))\n",
+      "\u001B[0;31mKeyboardInterrupt\u001B[0m: "
+     ]
+    }
+   ],
+   "execution_count": 148
+  },
+  {
+   "metadata": {},
+   "cell_type": "code",
+   "source": [
+    "# Extract player-specific parameters\n",
+    "player_params = []\n",
+    "for player, effects in lgm_model.random_effects.items():\n",
+    "    player_params.append({\n",
+    "        'name': player,\n",
+    "        'random_intercept': effects[0],\n",
+    "        'random_slope': effects[1],\n",
+    "        'total_intercept': lgm_model.fe_params[0] + effects[0],\n",
+    "        'total_slope': lgm_model.fe_params[1] + effects[1]\n",
+    "    })\n",
+    "\n",
+    "player_params_df = pd.DataFrame(player_params)\n",
+    "\n",
+    "# Visualize results\n",
+    "plt.figure(figsize=(12, 8))\n",
+    "plt.scatter(\n",
+    "    player_params_df['total_intercept'],\n",
+    "    player_params_df['total_slope'],\n",
+    "    alpha=0.6\n",
+    ")\n",
+    "plt.axhline(y=0, color='gray', linestyle='--', alpha=0.5)\n",
+    "plt.axvline(x=0, color='gray', linestyle='--', alpha=0.5)\n",
+    "plt.xlabel('Initial Persistence (Intercept)')\n",
+    "plt.ylabel('Persistence Growth (Slope)')\n",
+    "plt.title(f'Player Persistence Trajectories')\n",
+    "plt.grid(True, alpha=0.3)\n",
+    "\n",
+    "# Highlight most persistent players (high intercept, positive slope)\n",
+    "top_persistent = player_params_df[\n",
+    "    (player_params_df['total_intercept'] > player_params_df['total_intercept'].median()) &\n",
+    "    (player_params_df['total_slope'] > 0)\n",
+    "].nlargest(10, 'total_slope')\n",
+    "\n",
+    "for _, player in top_persistent.iterrows():\n",
+    "    plt.annotate(\n",
+    "        player['name'],\n",
+    "        (player['total_intercept'], player['total_slope']),\n",
+    "        xytext=(5, 5),\n",
+    "        textcoords='offset points',\n",
+    "        bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"white\", ec=\"gray\", alpha=0.8)\n",
+    "    )\n",
+    "\n",
+    "plt.savefig('persistence_lgm_results.png', dpi=300, bbox_inches='tight')\n",
+    "plt.show()\n",
+    "\n",
+    "# Save the top persistent players\n",
+    "print(\"Top persistent players identified by LGM:\")\n",
+    "print(top_persistent[['name', 'total_intercept', 'total_slope']])\n",
+    "top_persistent.to_csv('top_persistent_players.csv', index=False)"
+   ],
+   "id": "d02e5a97c1d02e92",
+   "outputs": [],
+   "execution_count": null
+  },
+  {
+   "metadata": {},
+   "cell_type": "code",
+   "outputs": [],
+   "execution_count": null,
+   "source": "",
+   "id": "c445474dee18b327"
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 2
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython2",
+   "version": "2.7.6"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 5
+}
diff --git a/references/combos.txt b/references/combos.txt
new file mode 100644
index 0000000..e3ce920
--- /dev/null
+++ b/references/combos.txt
@@ -0,0 +1,50 @@
+arc hum law
+arc hum neu
+arc dwa law
+arc gno neu
+
+bar hum neu
+bar hum cha
+bar orc cha
+
+cav hum law
+cav hum neu
+cav dwa law
+cav gno neu
+
+hea hum neu
+hea gno neu
+
+kni hum law
+
+mon hum neu
+mon hum law
+mon hum cha
+
+pri hum neu
+pri hum law
+pri hum cha
+pri elf cha
+
+ran hum neu
+ran hum cha
+ran elf cha
+ran gno neu
+ran orc cha
+
+rog hum cha
+rog orc cha
+
+sam hum law
+
+tou hum neu
+
+val hum neu
+val hum law
+val dwa law
+
+wiz hum neu
+wiz hum cha
+wiz elf cha
+wiz gno neu
+wiz orc cha
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
index 8de6e36..b48d0b9 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -13,12 +13,28 @@ flake8
 python-dotenv~=1.0.1
 
 
-
-
 # Local Package:
 # tells pip to install the local package in editable mode:
 -e .
 nle~=1.1.0
 setuptools~=75.2.0
 pandas~=2.2.3
-seaborn
\ No newline at end of file
+
+cython
+psutil
+opencv-python
+scikit-build
+pybind11==2.10.3
+numba==0.56.4
+tqdm==4.64.0
+wandb==0.12.21
+numpy==1.23.1
+gym==0.23.0
+pyrallis==0.3.1
+h5py==3.8.0
+nle==0.9.0
+rliable==1.0.8
+matplotlib==3.6.2
+seaborn==0.12.1
+Pillow==9.2.0
+torch
\ No newline at end of file
diff --git a/src/data/generate.sh b/src/data/generate.sh
new file mode 100755
index 0000000..a576837
--- /dev/null
+++ b/src/data/generate.sh
@@ -0,0 +1,13 @@
+#!/bin/bash
+export DATA_PATH="/code/nld-nao/nld-nao-unzipped"
+export SAVE_PATH="/code/NetHack-Research/data/processed/hdf5_data/"
+COMBOS="/code/NetHack-Research/references/combos.txt"
+
+# Read each line for combos
+while IFS=" " read -r role race alignment; do
+    python3 generate_hdf5.py \
+        --data_path="$DATA_PATH" \
+        --save_path="$SAVE_PATH" \
+        --role="$role" --race="$race" --alignment="$alignment" \
+        --num_episodes=700
+done < "$COMBOS"
diff --git a/generate_dataset.py b/src/data/generate_hdf5.py
similarity index 84%
rename from generate_dataset.py
rename to src/data/generate_hdf5.py
index bcbc257..8fabe89 100644
--- a/generate_dataset.py
+++ b/src/data/generate_hdf5.py
@@ -1,12 +1,13 @@
 import os
 import h5py
+import pickle
 import numpy as np
 import nle.dataset as nld
 
 import zipfile
 import random
 import pyrallis
-from dataclasses import dataclass
+from dataclasses import dataclass, field
 from typing import Optional
 
 from tqdm.auto import tqdm
@@ -16,11 +17,13 @@ from collections import defaultdict
 @dataclass
 class Config:
     data_path: str = "/code/nld-nao/nld-nao-unzipped"
-    save_path: str = "/code/NetHack-Research/data/raw/converted_data"
+    save_path: str = "/code/NetHack-Research/data/processed/hdf5_data"
+
     race: Optional[str] = None
     role: Optional[str] = None
     alignment: Optional[str] = None
     gender: Optional[str] = None
+
     sampling: Optional[str] = None
     num_episodes: Optional[int] = None
     num_bins: int = 50
@@ -28,6 +31,17 @@ class Config:
     clean_db_after: bool = False
     compress_after: bool = False
 
+    expert_gameids: list = field(default_factory=list)
+
+    def __post_init__(self):
+        expert_games_path = "/code/NetHack-Research/data/processed/experts.pkl"
+        try:
+            with open(expert_games_path, "rb") as fp:
+                self.expert_gameids = pickle.load(fp)
+            print(f"Loaded {len(self.expert_gameids)} expert gameids from {expert_games_path}")
+        except FileNotFoundError:
+            print(f"Warning: {expert_games_path} not found! Processing all games.")
+
 
 def stratified_sample(x, scores, num_samples, num_bins=100):
     num_total = len(x)
@@ -89,11 +103,13 @@ def name(role, race, align, gender):
 @pyrallis.wrap()
 def main(config: Config):
     os.makedirs(config.save_path, exist_ok=True)
-
     dbfilename = "/code/NetHack-Research/data/raw/nld-nao.db"
+
     if not nld.db.exists(dbfilename):
         nld.db.create(dbfilename)
         nld.add_altorg_directory(config.data_path, "nld-nao", dbfilename)
+    else:
+        print(f"Database already exists.")
 
     dataset = nld.TtyrecDataset(
         "nld-nao",
@@ -101,8 +117,11 @@ def main(config: Config):
         seq_length=1,
         dbfilename=dbfilename,
     )
-    # retrieving and filtering metadata from the dataset
-    metadata = {game_id: dict(dataset.get_meta(game_id)) for game_id in dataset._gameids}
+
+    # metadata = {game_id: dict(dataset.get_meta(game_id)) for game_id in dataset._gameids}
+
+    # Only process the specific gameids, rather than the entire dataset
+    metadata = {game_id: dict(dataset.get_meta(game_id)) for game_id in config.expert_gameids}
     metadata = {
         k: v for k, v in metadata.items() if (
                 optional_eq(v.get("role", "").lower(), config.role) and
@@ -113,6 +132,11 @@ def main(config: Config):
     }
     file_name = name(config.role, config.race, config.alignment, config.gender)
 
+    # skip unrecognized race-role-alignment trajectories
+    if file_name == "any-any-any-any":
+        print(f"Skipping generic 'any-any-any-any' file generation")
+        return
+
     game_ids = np.array(list(metadata.keys()))
     assert len(game_ids) != 0, "dataset does not have episodes with such configuration"
 
@@ -162,4 +186,4 @@ def main(config: Config):
 
 
 if __name__ == "__main__":
-    main()
\ No newline at end of file
+    main()
diff --git a/src/features/build_features.py b/src/features/build_features.py
deleted file mode 100644
index e69de29..0000000
diff --git a/src/features/expert_extraction.py b/src/features/expert_extraction.py
new file mode 100644
index 0000000..97499e8
--- /dev/null
+++ b/src/features/expert_extraction.py
@@ -0,0 +1,166 @@
+import pandas as pd
+import pickle
+import numpy as np
+
+
+class ExpertExtraction:
+    def __init__(self, csv_path):
+        self.csv_path = csv_path
+        self.df = pd.read_csv(csv_path)
+
+    def filter_expert_players(self):
+        # Isolate Ascended Games
+        ascended_games = self.df[self.df['death'] == "ascended"]
+
+        # Criterion 1: At least 20 total ascensions
+        total_ascensions = ascended_games.groupby('name').size()
+        criterion_1 = set(total_ascensions[total_ascensions >= 20].index)
+
+        # Criterion 2: At least 8 consecutive ascensions
+        self.df = self.df.sort_values(by=['name', 'realtime'])
+        streaks = self.df.groupby('name').apply(self._longest_consecutive_ascensions)
+        criterion_2 = set(streaks[streaks >= 8].index)
+
+        # Criterion 3: At least one ascension in the top 2% fastest real-time
+        criterion_3 = set(ascended_games[ascended_games['realtime'] <= 18000]['name'].unique())
+
+        # Criterion 4: Ascension under 10,000 turns
+        criterion_4 = set(ascended_games[ascended_games['turns'] < 10000]['name'].unique())
+
+        # Criterion 5: Achieved a difficult conduct (pacifist, foodless, illiterate, or 7+ conducts)
+        criterion_5 = set(
+            ascended_games[ascended_games['conduct'].apply(self._meets_conduct_criteria)]['name'].unique())
+
+        # Combine all criteria according to logical-OR and logical-AND
+
+        # Combine conditions for expert data
+        expert_players = criterion_1.union(criterion_2, criterion_3, criterion_4, criterion_5)
+
+        # Strict Expert generation
+        strict_experts = set(criterion_1) & set(criterion_2) & (set(criterion_3) | set(criterion_4) | set(criterion_5))
+
+        print(f"Number of expert players: {len(expert_players)}")
+        print(f"Number of strict expert players: {len(strict_experts)}")
+
+        return expert_players, strict_experts
+
+    def extract_expert_games(self):
+        min_games = 10
+        expert_players, strict_experts = self.filter_expert_players()
+
+        expert_df = self.df[self.df['name'].isin(expert_players)]
+
+        strict_expert_df = self.df[self.df['name'].isin(strict_experts)]
+
+        build_consistency = self._calc_build_consistency(strict_expert_df)
+
+        # Get top most consistent players
+        top_consistent_players = \
+            (build_consistency.query(f'total_games >= {min_games}').sort_values('build_entropy').head(5)['name'])
+
+        # Filter to games from the most consistent players
+        consistent_df = strict_expert_df[strict_expert_df['name'].isin(top_consistent_players)]
+
+        # Obtain a list of the gameids for all expert games
+        expert_gameids = expert_df["gameid"].unique().tolist()
+        consistent_expert_gameids = consistent_df["gameid"].unique().tolist()
+
+        print(f"Unique expert games: {len(expert_gameids)}")
+        print(f"Unique strict expert games: {len(consistent_expert_gameids)}")
+
+        return expert_gameids, consistent_expert_gameids
+
+    def save_expert_games(self, output_path="/code/NetHack-Research/data/processed/experts.pkl"):
+        expert_games, strict_expert_games = self.extract_expert_games()
+        with open(output_path, 'wb') as fp:
+            pickle.dump(strict_expert_games, fp)
+
+    def save_processed_data(self, output_path="/code/NetHack-Research/data/processed/new_full_data.csv"):
+        # Convert to a set for lookup
+        expert_games, strict_games = self.extract_expert_games()
+        temp_set = set(expert_games)
+
+        # Exclude expert games
+        non_expert_df = self.df[~self.df["gameid"].isin(temp_set)]
+        non_expert_df.to_csv(output_path, index=False)
+
+        print(f"Remaining games dataset saved to {output_path}")
+
+    @staticmethod
+    def _longest_consecutive_ascensions(player_games):
+        count, max_streak = 0, 0
+        for _, row in player_games.iterrows():
+            if row['death'] == "ascended":
+                count += 1
+                max_streak = max(max_streak, count)
+            else:
+                count = 0
+
+        return max_streak
+
+    @staticmethod
+    def _meets_conduct_criteria(conduct_str):
+        if pd.isna(conduct_str):
+            return False
+        conducts = conduct_str.split(',')
+        difficult_conducts = {"pacifist", "foodless", "illiterate"}
+
+        return any(c in conducts for c in difficult_conducts) or len(conducts) >= 7
+
+    @staticmethod
+    def _calc_build_consistency(df):
+        # Create combined build column
+        df['build'] = df['role'] + '-' + df['race'] + '-' + df['align']
+
+        build_stats = []
+        for name, group in df.groupby('name'):
+            # Skip players with too few games
+            if len(group) < 5:
+                continue
+
+            # Get build counts
+            build_counts = group['build'].value_counts()
+            top_build = build_counts.index[0]
+            top_build_count = build_counts.iloc[0]
+            top_build_pct = top_build_count / len(group) * 100
+
+            # Calculate build entropy (lower means more consistent)
+            build_probs = build_counts / len(group)
+            entropy = -sum(p * np.log2(p) for p in build_probs)
+
+            build_stats.append({
+                'name': name,
+                'total_games': len(group),
+                'unique_builds': len(build_counts),
+                'top_build': top_build,
+                'top_build_count': top_build_count,
+                'top_build_percentage': top_build_pct,
+                'build_entropy': entropy
+            })
+
+        return pd.DataFrame(build_stats)
+
+    @staticmethod
+    def _calc_build_frequency(df, expert_names):
+        expert_games = df[df['name'].isin(expert_names)]
+        expert_games['build'] = expert_games['role'] + '-' + expert_games['race'] + '-' + expert_games['align']
+
+        # Count builds
+        build_counts = expert_games['build'].value_counts().reset_index()
+        build_counts.columns = ['build', 'count']
+
+        # Split the build back into components
+        build_counts[['role', 'race', 'align']] = build_counts['build'].str.split('-', expand=True)
+
+        return build_counts, expert_games
+
+
+if __name__ == "__main__":
+    csv_path = "/code/NetHack-Research/data/processed/processed_data.csv"
+    extractor = ExpertExtraction(csv_path)
+
+    # Extract experts and save gameids for behavioral cloning experiments
+    extractor.save_expert_games("/code/NetHack-Research/data/processed/experts.pkl")
+
+    # Save remaining games for persistence processing
+    extractor.save_processed_data("/code/NetHack-Research/data/processed/new_full_data.csv")
diff --git a/src/features/feature_engineering.py b/src/features/feature_engineering.py
new file mode 100644
index 0000000..4b43a96
--- /dev/null
+++ b/src/features/feature_engineering.py
@@ -0,0 +1,239 @@
+import pandas as pd
+import numpy as np
+from datetime import timedelta
+
+
+def engineer_persistence_features(df):
+    """
+    Engineer features for persistence analysis in NetHack using a Latent Growth Model approach.
+
+    Parameters:
+    -----------
+    df : pandas.DataFrame
+        DataFrame containing NetHack gameplay data, sorted by player name and starttime
+
+    Returns:
+    --------
+    pandas.DataFrame
+        DataFrame with engineered persistence features
+    """
+    print("Engineering persistence features...")
+
+    # Make a copy to avoid modifying the original dataframe
+    data = df.copy()
+
+    # === TEMPORAL SEQUENCE FEATURES ===
+
+    # Ensure data is sorted properly
+    data = data.sort_values(['name', 'starttime'])
+
+    # Add game sequence number for each player
+    data['game_number'] = data.groupby('name').cumcount() + 1
+
+    # Calculate game duration in minutes
+    data['game_duration_minutes'] = (pd.to_datetime(data['endtime']) -
+                                     pd.to_datetime(data['starttime'])).dt.total_seconds() / 60
+
+    # Calculate time between games (for each player)
+    data['next_game_time'] = data.groupby('name')['starttime'].shift(-1)
+    data['time_to_next_game_hours'] = (pd.to_datetime(data['next_game_time']) -
+                                       pd.to_datetime(data['starttime'])).dt.total_seconds() / 3600
+
+    # Handle NaN values for the last game of each player
+    data['time_to_next_game_hours'] = data['time_to_next_game_hours'].fillna(np.inf)
+
+    # Create quick return indicator (within 24 hours)
+    data['quick_return'] = (data['time_to_next_game_hours'] < 24).astype(int)
+
+    # Calculate days since first game for each player
+    data['first_game_date'] = data.groupby('name')['starttime'].transform('min')
+    data['days_since_first_game'] = (pd.to_datetime(data['starttime']) -
+                                     pd.to_datetime(data['first_game_date'])).dt.total_seconds() / (24 * 3600)
+
+    # Calculate days active (number of unique days played)
+    data['game_date'] = pd.to_datetime(data['starttime']).dt.date
+    temp_days = data.groupby('name')['game_date'].nunique().reset_index()
+    temp_days.columns = ['name', 'unique_days_active']
+    data = pd.merge(data, temp_days, on='name', how='left')
+
+    # Calculate play density (games per day active)
+    temp_density = data.groupby('name').size().reset_index()
+    temp_density.columns = ['name', 'total_games']
+    temp_density = pd.merge(temp_density, temp_days, on='name')
+    temp_density['play_density'] = temp_density['total_games'] / temp_density['unique_days_active']
+    data = pd.merge(data, temp_density[['name', 'play_density']], on='name', how='left')
+
+    # === PROGRESSION METRICS ===
+    # Calculate cumulative max level reached
+    data['cumulative_max_level'] = data.groupby('name')['maxlvl'].cummax()
+
+    # Calculate level progression rate
+    data['level_progression_rate'] = data['maxlvl'] / data['game_number']
+
+    # Calculate normalized score (points per turn)
+    data['points_per_turn'] = data['points'] / data['turns'].replace(0, 1)
+
+    # Calculate relative performance (compared to player's average)
+    data['avg_points'] = data.groupby('name')['points'].transform('mean')
+    data['relative_performance'] = data['points'] / data['avg_points'].replace(0, 1)
+
+    # Calculate progression velocity (change in max level)
+    data['prev_max_level'] = data.groupby('name')['cumulative_max_level'].shift(1).fillna(0)
+    data['level_improvement'] = data['cumulative_max_level'] - data['prev_max_level']
+
+    # === BUILD CONSISTENCY FEATURES ===
+
+    # Create combined build column
+    data['build'] = data['role'] + '-' + data['race'] + '-' + data['align']
+
+    # Calculate build consistency
+    # 1. Previous build
+    data['prev_build'] = data.groupby('name')['build'].shift(1)
+    data['same_build_as_prev'] = (data['build'] == data['prev_build']).astype(int)
+
+    # 2. Build streak (consecutive same builds)
+    data['build_change'] = (data['build'] != data['prev_build']).astype(int)
+    data['build_streak_id'] = data.groupby('name')['build_change'].cumsum()
+
+    # Count occurrences of each build_streak_id
+    build_streak_counts = data.groupby(['name', 'build_streak_id']).size().reset_index(name='streak_length')
+    data = pd.merge(
+        data,
+        build_streak_counts,
+        on=['name', 'build_streak_id'],
+        how='left'
+    )
+
+    # 3. Calculate top build percentage
+    build_counts = data.groupby(['name', 'build']).size().reset_index(name='build_count')
+    player_counts = data.groupby('name').size().reset_index(name='player_total')
+    build_stats = pd.merge(build_counts, player_counts, on='name')
+    build_stats['build_percentage'] = (build_stats['build_count'] / build_stats['player_total']) * 100
+
+    # Get top build for each player
+    top_builds = build_stats.loc[build_stats.groupby('name')['build_count'].idxmax()]
+    top_builds = top_builds[['name', 'build', 'build_percentage']]
+    top_builds.columns = ['name', 'top_build', 'top_build_percentage']
+
+    data = pd.merge(data, top_builds, on='name', how='left')
+    data['is_top_build'] = (data['build'] == data['top_build']).astype(int)
+
+    # === DEATH & RECOVERY FEATURES ===
+
+    # Create death type categories
+    death_categories = {
+        'quit': 'voluntary',
+        'escaped': 'success',
+        'ascended': 'success',
+        'killed by': 'monster',
+        'petrified by': 'monster',
+        'poisoned by': 'monster',
+        'drowned': 'environment',
+        'burned by': 'environment',
+        'zapped': 'self',
+        'fell': 'environment',
+        'slipped': 'environment'
+    }
+
+    # Categorize deaths
+    for category, keywords in death_categories.items():
+        if category == 'quit' or category == 'escaped' or category == 'ascended':
+            data.loc[data['death'] == category, 'death_category'] = keywords
+        else:
+            data.loc[data['death'].str.contains(category, case=False, na=False), 'death_category'] = keywords
+
+    # Fill any uncategorized deaths
+    data['death_category'] = data['death_category'].fillna('other')
+
+    # Check if player returned after a negative outcome (not quit/success)
+    data['negative_outcome'] = (~data['death_category'].isin(['voluntary', 'success'])).astype(int)
+    data['prev_negative'] = data.groupby('name')['negative_outcome'].shift(1).fillna(0)
+    data['returned_after_negative'] = (data['prev_negative'] == 1).astype(int)
+
+    # === CONDUCT DIFFICULTY FEATURES ===
+
+    # Parse conducts into separate columns
+    common_conducts = ['foodless', 'vegan', 'vegetarian', 'atheist', 'weaponless',
+                       'pacifist', 'illiterate', 'polypileless', 'polyselfless', 'wishless']
+
+    for conduct in common_conducts:
+        data[f'conduct_{conduct}'] = data['conduct'].str.contains(conduct, case=False, na=False).astype(int)
+
+    # Count total conducts per game
+    data['total_conducts'] = data[['conduct_' + c for c in common_conducts]].sum(axis=1)
+
+    # Calculate conduct difficulty score (weighted sum)
+    conduct_weights = {
+        'foodless': 3,
+        'pacifist': 3,
+        'illiterate': 2.5,
+        'weaponless': 2,
+        'atheist': 2,
+        'wishless': 1.5,
+        'polypileless': 1,
+        'polyselfless': 1,
+        'vegan': 1,
+        'vegetarian': 0.5
+    }
+
+    data['conduct_difficulty'] = sum(data[f'conduct_{c}'] * w for c, w in conduct_weights.items())
+
+    # Calculate average conduct difficulty for each player
+    data['avg_conduct_difficulty'] = data.groupby('name')['conduct_difficulty'].transform('mean')
+    data['relative_conduct_difficulty'] = data['conduct_difficulty'] / data['avg_conduct_difficulty'].replace(0, 1)
+
+    # === LGM-SPECIFIC FEATURES ===
+
+    # Create centered and squared terms for growth modeling
+    data['game_number_centered'] = data.groupby('name')['game_number'].transform(
+        lambda x: x - x.mean()
+    )
+    data['game_number_squared'] = data['game_number_centered'] ** 2
+
+    # Calculate rolling statistics (e.g., 3-game windows)
+    window_size = 3
+    data['rolling_max_level'] = data.groupby('name')['maxlvl'].rolling(
+        window=window_size, min_periods=1
+    ).mean().reset_index(level=0, drop=True)
+
+    data['rolling_points'] = data.groupby('name')['points'].rolling(
+        window=window_size, min_periods=1
+    ).mean().reset_index(level=0, drop=True)
+
+    # === PERSISTENCE COMPOSITE SCORE ===
+
+    # Create standardized variables for composite score
+    persistence_components = [
+        'quick_return',
+        'level_progression_rate',
+        'streak_length',
+        'returned_after_negative',
+        'relative_conduct_difficulty'
+    ]
+
+    # Ensure all components exist
+    for component in persistence_components:
+        if component not in data.columns:
+            print(f"Warning: Component {component} not found in dataframe")
+            persistence_components.remove(component)
+
+    # Standardize each component
+    for component in persistence_components:
+        mean_val = data[component].mean()
+        std_val = data[component].std()
+        if std_val > 0:
+            data[f'{component}_std'] = (data[component] - mean_val) / std_val
+        else:
+            data[f'{component}_std'] = 0
+
+    # Calculate composite persistence score
+    std_components = [f'{component}_std' for component in persistence_components]
+    data['persistence_score'] = data[std_components].mean(axis=1)
+
+    # Calculate cumulative persistence score
+    data['cumulative_persistence'] = data.groupby('name')['persistence_score'].cumsum()
+    data['avg_persistence'] = data.groupby('name')['persistence_score'].transform('mean')
+
+    print(f"Engineered {len(data.columns) - len(df.columns)} new features for persistence analysis")
+
+    return data
\ No newline at end of file
diff --git a/src/features/persistence_features.py b/src/features/persistence_features.py
new file mode 100644
index 0000000..b0638d5
--- /dev/null
+++ b/src/features/persistence_features.py
@@ -0,0 +1,105 @@
+import numpy as np
+import pandas as pd
+from tabulate import tabulate
+
+
+def categorize_deaths(data):
+    """
+    Categorizes deaths into predefined categories.
+    """
+    death_map = {
+        'quit': 'voluntary', 'escaped': 'success', 'ascended': 'success',
+        'killed by': 'monster', 'petrified by': 'monster', 'poisoned by': 'monster',
+        'turned to': 'environment', 'drowned': 'environment', 'burned by': 'environment',
+        'fell': 'environment', 'slipped': 'environment', 'zapped': 'self',
+        'choked': 'self'
+    }
+
+    data['death_category'] = 'other'
+    for keyword, category in death_map.items():
+        data.loc[data['death'].str.contains(keyword, case=False, na=False), 'death_category'] = category
+
+    return data
+
+
+def track_failure_streaks(data):
+    """
+    Tracks failure streaks and assigns unique streak IDs.
+    Also, captures the last failure streak before ascension properly.
+    """
+    # Identify failure events
+    data['failure'] = (data['death_category'] != 'success').astype(int)
+
+    # Identify new failure streaks
+    data['new_failure_streak'] = data.groupby('name')['failure'].diff().fillna(0) > 0
+    data['failure_streak_id'] = data.groupby('name')['new_failure_streak'].cumsum()
+
+    # Compute failure streak lengths
+    failure_streak_lengths = data[data['failure'] == 1].groupby(['name', 'failure_streak_id']).size().reset_index(
+        name='failure_streak_length')
+
+    # Merge failure streak lengths
+    data = data.merge(failure_streak_lengths, on=['name', 'failure_streak_id'], how='left')
+    data['failure_streak_length'] = data['failure_streak_length'].fillna(0)
+
+    # Identify ascension events
+    data['ascended'] = (data['death_category'] == 'success') & (data['death'] == 'ascended')
+
+    # Track the last failure streak before ascension per player
+    data['failure_streak_before_ascension'] = 0
+    for player in data['name'].unique():
+        player_data = data[data['name'] == player]
+        last_failure_streak = 0
+        for idx, row in player_data.iterrows():
+            if row['ascended']:  # If the player ascended, assign the last failure streak
+                data.at[idx, 'failure_streak_before_ascension'] = last_failure_streak
+            if row['failure']:  # Update the last failure streak if it’s a failure
+                last_failure_streak = row['failure_streak_length']
+
+    return data
+
+
+def track_success_after_failure(data):
+    data['rolling_failures'] = data.groupby('name')['failure'].transform(
+        lambda x: x.rolling(window=5, min_periods=1).sum())
+    data['success_after_failure'] = (data['death_category'] == 'success') & (data['rolling_failures'] > 3)
+    data['rolling_success_after_failure'] = data.groupby('name')['success_after_failure'].transform(
+        lambda x: x.rolling(5, min_periods=1).sum())
+    data['rolling_success_after_failure'] /= data.groupby('name')['gameid'].transform('count')
+
+    return data
+
+
+def compute_persistence_score(data):
+    data['persistence_score'] = np.sqrt(data['failure_streak_before_ascension'])
+    data.loc[data['success_after_failure'], 'persistence_score'] += 0.5
+
+    max_persistence = data['persistence_score'].max()
+    if max_persistence > 0:
+        data['persistence_score'] = data['persistence_score'] / max_persistence
+
+    return data
+
+
+def process_persistence_features(data):
+    """
+    Applies all persistence-related feature transformations to the dataset.
+    """
+    data = categorize_deaths(data)
+    data = track_failure_streaks(data)
+    data = track_success_after_failure(data)
+    data = compute_persistence_score(data)
+
+    return data
+
+
+if __name__ == "__main__":
+    csv_path = "/code/NetHack-Research/data/processed/new_full_data.csv"
+
+    df = pd.read_csv(csv_path)
+
+    data = process_persistence_features(df)
+
+    print(tabulate(data[['name', 'failure_streak_before_ascension', 'persistence_score']].head(20),
+                   headers='keys', tablefmt='pretty'))
+
diff --git a/src/models/.gitkeep b/src/models/.gitkeep
deleted file mode 100644
index e69de29..0000000
diff --git a/src/models/bco.py b/src/models/bco.py
index 33a9587..182f355 100644
--- a/src/models/bco.py
+++ b/src/models/bco.py
@@ -1,5 +1,5 @@
 import pyrallis
-from dataclasses import dataclass, asdict
+from dataclasses import dataclass, asdict, field
 import random
 import wandb
 import os
@@ -18,15 +18,12 @@ from multiprocessing import set_start_method
 from katakomba.env import NetHackChallenge, OfflineNetHackChallengeWrapper
 from katakomba.nn.chaotic_dwarf import TopLineEncoder, BottomLinesEncoder, ScreenEncoder
 from katakomba.utils.render import SCREEN_SHAPE, render_screen_image
-from katakomba.utils.datasets import SequentialBuffer
 from katakomba.utils.misc import Timeit
-from typing import Optional, Tuple, List, Dict
+from typing import Optional, Tuple, List, Dict, Any
 
-# Import our custom adapter
-from nao_dataset_adapter import extend_offline_wrapper
-
-# Extend the wrapper to support human data
-extend_offline_wrapper()
+# Import our custom modules
+from src.utils.dataset import StateOnlyDataset
+from src.utils.buffer import StateOnlySequentialBuffer
 
 torch.backends.cudnn.benchmark = True
 DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
@@ -34,17 +31,15 @@ DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
 
 @dataclass
 class TrainConfig:
-    character: str = "mon-hum-neu"
+    character: str = "tou-hum-neu"  # Default character
     data_mode: str = "compressed"
-    data_dir: Optional[str] = None  # Custom directory for HDF5 files
-
-    # Set to "human" to use NLD-NAO human data
-    data_scale: str = "human"
+    size: str = "small"
+    data_path: str = "/code/NetHack-Research/data/processed/hdf5_data/"
 
     # Wandb logging
     project: str = "NetHack"
-    group: str = "human_bc_inverse"
-    name: str = "bc_inverse"
+    group: str = "inverse_bc"
+    name: str = "inverse_bc"
     version: int = 0
 
     # Model
@@ -53,10 +48,13 @@ class TrainConfig:
     use_prev_action: bool = True
     rnn_dropout: float = 0.0
 
-    # Inverse model settings
+    # Inverse Model
+    use_inverse_model: bool = True
+    inverse_model_path: Optional[str] = None
+    train_inverse_model: bool = False
+    inverse_model_lr: float = 1e-4
     inverse_model_weight: float = 1.0
-    use_difference_vector: bool = False
-    inverse_model_warmup: int = 1000
+    use_difference_vector: bool = False  # For the inverse model
 
     # Training
     update_steps: int = 25_000
@@ -73,6 +71,11 @@ class TrainConfig:
     eval_seed: int = 50
     train_seed: int = 42
 
+    # These will be set in main.py
+    role: Any = None
+    race: Any = None
+    align: Any = None
+
     def __post_init__(self):
         self.group = f"{self.group}-v{str(self.version)}"
         self.name = f"{self.name}-{self.character}-{str(uuid.uuid4())[:8]}"
@@ -105,46 +108,6 @@ def dict_to_tensor(data: Dict[str, np.ndarray], device: str) -> Dict[str, torch.
     return {k: torch.as_tensor(v, device=device) for k, v in data.items()}
 
 
-class InverseModel(nn.Module):
-    def __init__(
-            self,
-            h_dim: int,
-            action_space: int,
-            use_difference_vector: bool = False
-    ):
-        super(InverseModel, self).__init__()
-        self.h_dim = h_dim
-        self.use_difference_vector = use_difference_vector
-        if not use_difference_vector:
-            self.h_dim *= 2
-        self.action_space = action_space
-
-        self.fwd_model = nn.Sequential(
-            nn.Linear(self.h_dim, 128),
-            nn.ELU(inplace=True),
-            nn.Linear(128, 128),
-            nn.ELU(inplace=True),
-            nn.Linear(128, action_space),
-        )
-
-    def forward(self, obs):
-        """
-        Input:
-            obs: encoded states of shape [T, B, h_dim]
-
-        Output:
-            action_logits: predicted actions of shape [T-1, B, action_space]
-        """
-        T, B, _ = obs.shape
-        if self.use_difference_vector:
-            x = obs[1:] - obs[:-1]  # [T-1, B, h_dim]
-        else:
-            x = torch.cat([obs[:-1], obs[1:]], dim=-1)  # [T-1, B, 2*h_dim]
-
-        action_logits = self.fwd_model(x)  # [T-1, B, action_space]
-        return action_logits
-
-
 class Actor(nn.Module):
     def __init__(
             self,
@@ -152,8 +115,7 @@ class Actor(nn.Module):
             rnn_hidden_dim: int = 512,
             rnn_layers: int = 1,
             rnn_dropout: float = 0.0,
-            use_prev_action: bool = True,
-            use_difference_vector: bool = False
+            use_prev_action: bool = True
     ):
         super().__init__()
         # Action dimensions and prev actions
@@ -186,13 +148,6 @@ class Actor(nn.Module):
         )
         self.head = nn.Linear(rnn_hidden_dim, self.num_actions)
 
-        # Inverse model for action prediction
-        self.inverse_model = InverseModel(
-            h_dim=rnn_hidden_dim,
-            action_space=self.num_actions,
-            use_difference_vector=use_difference_vector
-        )
-
     def forward(self, inputs, state=None):
         B, T, C, H, W = inputs["screen_image"].shape
         topline = inputs["tty_chars"][..., 0, :]
@@ -218,13 +173,9 @@ class Actor(nn.Module):
 
         encoded_state = torch.cat(encoded_state, dim=1)
         core_output, new_state = self.rnn(encoded_state.view(B, T, -1), state)
-        policy_logits = self.head(core_output)
+        logits = self.head(core_output)
 
-        # Get inverse model predictions
-        core_output_t = core_output.transpose(0, 1)  # [T, B, h_dim]
-        inverse_logits = self.inverse_model(core_output_t)  # [T-1, B, action_space]
-
-        return policy_logits, inverse_logits, new_state, core_output
+        return logits, new_state
 
     @torch.no_grad()
     def vec_act(self, obs, state=None, device="cpu"):
@@ -233,11 +184,49 @@ class Actor(nn.Module):
             "screen_image": torch.tensor(obs["screen_image"][:, None], device=device),
             "prev_actions": torch.tensor(obs["prev_actions"][:, None], dtype=torch.long, device=device)
         }
-        policy_logits, _, new_state, _ = self(inputs, state)
-        actions = torch.argmax(policy_logits.squeeze(1), dim=-1)
+        logits, new_state = self(inputs, state)
+        actions = torch.argmax(logits.squeeze(1), dim=-1)
         return actions.cpu().numpy(), new_state
 
 
+class InverseModel(nn.Module):
+    """Inverse model that predicts actions from state transitions"""
+
+    def __init__(self, h_dim, action_space, use_difference_vector=False):
+        super().__init__()
+        self.h_dim = h_dim
+        self.use_difference_vector = use_difference_vector
+        if not use_difference_vector:
+            self.h_dim *= 2
+        self.action_space = action_space
+
+        self.fwd_model = nn.Sequential(
+            nn.Linear(self.h_dim, 128),
+            nn.ELU(inplace=True),
+            nn.Linear(128, 128),
+            nn.ELU(inplace=True),
+            nn.Linear(128, action_space),
+        )
+
+    def forward(self, obs):
+        """
+        Args:
+            obs: Tensor of shape [T, B, H] where T is time, B is batch size, H is hidden dim
+                 These are the encoded state representations.
+        Returns:
+            pred_a: Predicted action logits
+        """
+        T, B, *_ = obs.shape
+        if self.use_difference_vector:
+            x = obs[1:] - obs[:-1]
+        else:
+            x = torch.cat([obs[:-1], obs[1:]], dim=-1)
+        pred_a = self.fwd_model(x)
+        # Add dummy action predictions for the last timestep
+        off_by_one = torch.ones((1, B, self.action_space), device=x.device) * -1e9
+        return torch.cat([pred_a, off_by_one], dim=0)
+
+
 @torch.no_grad()
 def vec_evaluate(
         vec_env: AsyncVectorEnv,
@@ -249,12 +238,16 @@ def vec_evaluate(
     actor.eval()
     # set seed for reproducibility (reseed=False by default)
     vec_env.seed(seed)
+    # all this work is needed to mitigate bias for shorter
+    # episodes during vectorized evaluation, for more see:
+    # https://github.com/DLR-RM/stable-baselines3/issues/402
     n_envs = vec_env.num_envs
     episode_rewards = []
     episode_lengths = []
     episode_depths = []
 
     episode_counts = np.zeros(n_envs, dtype="int")
+    # Divides episodes among different sub environments in the vector as evenly as possible
     episode_count_targets = np.array([(num_episodes + i) // n_envs for i in range(n_envs)], dtype="int")
 
     current_rewards = np.zeros(n_envs)
@@ -265,6 +258,7 @@ def vec_evaluate(
     rnn_states = None
     pbar = tqdm(total=num_episodes)
     while (episode_counts < episode_count_targets).any():
+        # faster to do this here for entire batch, than in wrappers for each env
         observations["screen_image"] = render_screen_image(
             tty_chars=observations["tty_chars"][:, np.newaxis, ...],
             tty_colors=observations["tty_colors"][:, np.newaxis, ...],
@@ -312,8 +306,37 @@ def vec_evaluate(
     return result
 
 
-@pyrallis.wrap()
+def extract_encoded_states(actor, batch, device):
+    """Extract encoded states from the actor's encoders"""
+    B, T, C, H, W = batch["screen_image"].shape
+    topline = batch["tty_chars"][..., 0, :]
+    bottom_line = batch["tty_chars"][..., -2:, :]
+
+    encoded_state = [
+        actor.topline_encoder(
+            topline.float(memory_format=torch.contiguous_format).view(T * B, -1)
+        ),
+        actor.bottomline_encoder(
+            bottom_line.float(memory_format=torch.contiguous_format).view(T * B, -1)
+        ),
+        actor.screen_encoder(
+            batch["screen_image"]
+            .float(memory_format=torch.contiguous_format)
+            .view(T * B, C, H, W)
+        ),
+    ]
+
+    if actor.use_prev_action and "prev_actions" in batch:
+        encoded_state.append(
+            F.one_hot(batch["prev_actions"], actor.num_actions).view(T * B, -1)
+        )
+
+    encoded_state = torch.cat(encoded_state, dim=1)
+    return encoded_state.view(T, B, -1)
+
+
 def train(config: TrainConfig):
+    """Main training function for behavioral cloning with inverse model integration"""
     print(f"Device: {DEVICE}")
     wandb.init(
         config=asdict(config),
@@ -345,50 +368,75 @@ def train(config: TrainConfig):
         copy=False
     )
 
-    # Load dataset using the extended wrapper
-    dataset = tmp_env.get_dataset(
-        scale=config.data_scale,
+    # Create our actor model
+    actor = Actor(
+        action_dim=eval_env.single_action_space.n,
+        use_prev_action=config.use_prev_action,
+        rnn_hidden_dim=config.rnn_hidden_dim,
+        rnn_layers=config.rnn_layers,
+        rnn_dropout=config.rnn_dropout,
+    ).to(DEVICE)
+
+    # Create inverse model if needed
+    inverse_model = None
+    if config.use_inverse_model:
+        print("Creating inverse model")
+        inverse_model = InverseModel(
+            h_dim=actor.h_dim,
+            action_space=eval_env.single_action_space.n,
+            use_difference_vector=config.use_difference_vector
+        ).to(DEVICE)
+
+        # Load pretrained inverse model if provided
+        if config.inverse_model_path and os.path.exists(config.inverse_model_path):
+            print(f"Loading inverse model from {config.inverse_model_path}")
+            inverse_model.load_state_dict(torch.load(config.inverse_model_path))
+
+    # Create dataset and buffer
+    state_only_dataset = StateOnlyDataset(
+        role=config.role,
+        race=config.race,
+        align=config.align,
         mode=config.data_mode,
-        data_dir=config.data_dir
+        inverse_model=inverse_model,
+        device=DEVICE
     )
 
-    buffer = SequentialBuffer(
-        dataset=dataset,
+    buffer = StateOnlySequentialBuffer(
+        dataset=state_only_dataset,
         seq_len=config.seq_len,
         batch_size=config.batch_size,
+        inverse_model=inverse_model,
+        device=DEVICE,
         seed=config.train_seed,
-        add_next_step=True  # We need next steps for the inverse model
+        add_next_step=False
     )
 
     tp = ThreadPoolExecutor(max_workers=config.render_processes)
 
-    actor = Actor(
-        action_dim=eval_env.single_action_space.n,
-        use_prev_action=config.use_prev_action,
-        rnn_hidden_dim=config.rnn_hidden_dim,
-        rnn_layers=config.rnn_layers,
-        rnn_dropout=config.rnn_dropout,
-        use_difference_vector=config.use_difference_vector
-    ).to(DEVICE)
+    print("Number of parameters:", sum(p.numel() for p in actor.parameters()))
 
+    # Set up optimizers
     no_decay_params, decay_params = filter_wd_params(actor)
     optim = torch.optim.AdamW([
         {"params": no_decay_params, "weight_decay": 0.0},
         {"params": decay_params, "weight_decay": config.weight_decay}
     ], lr=config.learning_rate)
-    print("Number of parameters:", sum(p.numel() for p in actor.parameters()))
+
+    # Separate optimizer for inverse model if we're training it
+    inverse_optim = None
+    if config.use_inverse_model and config.train_inverse_model:
+        inv_no_decay, inv_decay = filter_wd_params(inverse_model)
+        inverse_optim = torch.optim.AdamW([
+            {"params": inv_no_decay, "weight_decay": 0.0},
+            {"params": inv_decay, "weight_decay": config.weight_decay}
+        ], lr=config.inverse_model_lr)
 
     scaler = torch.cuda.amp.GradScaler()
 
     rnn_state = None
     prev_actions = torch.zeros((config.batch_size, 1), dtype=torch.long, device=DEVICE)
 
-    # Define cross-entropy loss function for the inverse model
-    ce_loss = nn.CrossEntropyLoss()
-
-    # Keep track of best inverse actions for updating the dataset
-    best_inverse_actions = {}
-
     for step in trange(1, config.update_steps + 1, desc="Training"):
         with Timeit() as timer:
             batch = buffer.sample()
@@ -409,4 +457,132 @@ def train(config: TrainConfig):
             step=step,
         )
 
-        with Timeit() as timer
\ No newline at end of file
+        with Timeit() as timer:
+            with torch.cuda.amp.autocast():
+                # Prepare inputs with previous actions
+                if "prev_actions" not in batch:
+                    batch["prev_actions"] = torch.cat(
+                        [prev_actions.long(), batch["actions"][:, :-1].long()], dim=1
+                    )
+
+                # Forward pass through actor
+                logits, rnn_state = actor(
+                    inputs={
+                        "screen_image": batch["screen_image"],
+                        "tty_chars": batch["tty_chars"],
+                        "prev_actions": batch["prev_actions"]
+                    },
+                    state=rnn_state,
+                )
+                rnn_state = [a.detach() for a in rnn_state]
+
+                # Calculate policy loss
+                dist = Categorical(logits=logits)
+                policy_loss = -dist.log_prob(batch["actions"]).mean()
+
+                # Update prev_actions for next iteration
+                prev_actions = batch["actions"][:, -1].unsqueeze(-1)
+
+                # Calculate inverse model loss if needed
+                inverse_loss = torch.tensor(0.0, device=DEVICE)
+                if config.use_inverse_model and config.train_inverse_model:
+                    # Extract encoded states for inverse model
+                    encoded_states = extract_encoded_states(actor, batch, DEVICE)
+
+                    # Forward pass through inverse model
+                    inverse_logits = inverse_model(encoded_states)
+
+                    # Calculate loss (ignore last timestep)
+                    inverse_loss = F.cross_entropy(
+                        inverse_logits[:-1].reshape(-1, inverse_logits.shape[-1]),
+                        batch["actions"][:, 1:].reshape(-1)
+                    )
+
+                # Combine losses
+                if config.use_inverse_model and config.train_inverse_model:
+                    loss = policy_loss + config.inverse_model_weight * inverse_loss
+                else:
+                    loss = policy_loss
+
+        wandb.log({"times/forward_pass": timer.elapsed_time_gpu}, step=step)
+
+        with Timeit() as timer:
+            scaler.scale(loss).backward()
+
+            if config.clip_grad_norm is not None:
+                scaler.unscale_(optim)
+                torch.nn.utils.clip_grad_norm_(actor.parameters(), config.clip_grad_norm)
+
+                if inverse_optim is not None:
+                    scaler.unscale_(inverse_optim)
+                    torch.nn.utils.clip_grad_norm_(inverse_model.parameters(), config.clip_grad_norm)
+
+            scaler.step(optim)
+            if inverse_optim is not None:
+                scaler.step(inverse_optim)
+
+            scaler.update()
+            optim.zero_grad(set_to_none=True)
+            if inverse_optim is not None:
+                inverse_optim.zero_grad(set_to_none=True)
+
+        wandb.log({"times/backward_pass": timer.elapsed_time_gpu}, step=step)
+
+        # Log metrics
+        log_dict = {
+            "loss/policy": policy_loss.detach().item(),
+            "transitions": config.batch_size * config.seq_len * step,
+        }
+
+        if config.use_inverse_model and config.train_inverse_model:
+            log_dict.update({
+                "loss/inverse": inverse_loss.detach().item(),
+                "loss/total": loss.detach().item(),
+            })
+
+        wandb.log(log_dict, step=step)
+
+        # Evaluation
+        if step % config.eval_every == 0:
+            with Timeit() as timer:
+                eval_stats = vec_evaluate(
+                    eval_env, actor, config.eval_episodes, config.eval_seed, device=DEVICE
+                )
+            raw_returns = eval_stats.pop("reward_raw")
+            raw_depths = eval_stats.pop("depth_raw")
+            normalized_scores = tmp_env.get_normalized_score(raw_returns)
+
+            wandb.log({
+                "times/evaluation_gpu": timer.elapsed_time_gpu,
+                "times/evaluation_cpu": timer.elapsed_time_cpu,
+            }, step=step)
+
+            wandb.log(dict(
+                eval_stats,
+                **{"transitions": config.batch_size * config.seq_len * step},
+            ), step=step)
+
+            # Save checkpoints if path is provided
+            if config.checkpoints_path is not None:
+                # Save actor model
+                torch.save(actor.state_dict(), os.path.join(config.checkpoints_path, f"actor_{step}.pt"))
+
+                # Save inverse model if used
+                if config.use_inverse_model:
+                    torch.save(inverse_model.state_dict(), os.path.join(config.checkpoints_path, f"inverse_{step}.pt"))
+
+                # Save evaluation results
+                np.save(os.path.join(config.checkpoints_path, f"{step}_returns.npy"), raw_returns)
+                np.save(os.path.join(config.checkpoints_path, f"{step}_depths.npy"), raw_depths)
+                np.save(os.path.join(config.checkpoints_path, f"{step}_normalized_scores.npy"), normalized_scores)
+
+            # Also saving to wandb files for easier use in the future
+            np.save(os.path.join(wandb.run.dir, f"{step}_returns.npy"), raw_returns)
+            np.save(os.path.join(wandb.run.dir, f"{step}_depths.npy"), raw_depths)
+            np.save(os.path.join(wandb.run.dir, f"{step}_normalized_scores.npy"), normalized_scores)
+
+    # Close resources
+    buffer.close()
+
+    # Return final models
+    return actor, inverse_model
diff --git a/src/models/latent-growth-model.py b/src/models/latent-growth-model.py
new file mode 100644
index 0000000..be42016
--- /dev/null
+++ b/src/models/latent-growth-model.py
@@ -0,0 +1,151 @@
+import pandas as pd
+import numpy as np
+import statsmodels.formula.api as smf
+import matplotlib.pyplot as plt
+from tabulate import tabulate
+from sklearn.preprocessing import StandardScaler
+from sklearn.cluster import KMeans
+
+csv_file = "/code/NetHack-Research/data/processed/features.csv"
+data = pd.read_csv(csv_file)
+
+data['starttime'] = pd.to_datetime(data['starttime'])
+# Convert starttime into elapsed days since first game
+data['time_since_first_game'] = (data['starttime'] -
+                                 data.groupby('name')['starttime'].transform('min')).dt.total_seconds() / (24 * 3600)
+
+# Standardize elapsed time
+scaler = StandardScaler()
+data['time_since_first_game_scaled'] = scaler.fit_transform(data[['time_since_first_game']])
+data['time_since_first_game_squared'] = data['time_since_first_game_scaled'] ** 2
+
+def calculate_build_consistency(df):
+    # Create combined build column
+    df['build'] = df['role'] + '-' + df['race'] + '-' + df['align']
+
+    build_stats = []
+    for name, group in df.groupby('name'):
+        # Skip players with too few games
+        if len(group) < 5:
+            continue
+
+        # Get build counts
+        build_counts = group['build'].value_counts()
+        top_build = build_counts.index[0]
+        top_build_count = build_counts.iloc[0]
+        top_build_pct = top_build_count / len(group) * 100
+
+        # Calculate build entropy (lower means more consistent)
+        build_probs = build_counts / len(group)
+        entropy = -sum(p * np.log2(p) for p in build_probs)
+
+        build_stats.append({
+            'name': name,
+            'total_games': len(group),
+            'unique_builds': len(build_counts),
+            'top_build': top_build,
+            'top_build_count': top_build_count,
+            'top_build_percentage': top_build_pct,
+            'build_entropy': entropy
+        })
+
+    return pd.DataFrame(build_stats)
+
+
+# Calculate build consistency
+build_consistency = calculate_build_consistency(data)
+
+# Identify most consistent players
+min_games = 100
+players = 100
+
+# Get top most consistent players
+top_consistent_players = \
+    (build_consistency.query(f'total_games >= {min_games}').sort_values('build_entropy').head(players)['name'])
+
+# Filter to games from the most consistent players
+df = data[data['name'].isin(top_consistent_players)]
+
+lgm_data = df[['name', 'starttime', 'persistence_score', 'cumulative_persistence',
+               'time_since_first_game_scaled', 'time_since_first_game_squared']]
+
+# Ensure proper data types
+lgm_data = lgm_data.dropna()  # Drop missing values if needed
+lgm_data = lgm_data.sort_values(['name', 'starttime'])  # Ensure time order
+
+# Define LGM formula
+# Update model formula
+lgm_formula = "persistence_score ~ time_since_first_game_scaled + time_since_first_game_squared"
+
+# Fit the model with random intercepts and slopes
+lgm_model = smf.mixedlm(lgm_formula, lgm_data, groups=lgm_data["name"], re_formula="1 + time_since_first_game_scaled")
+
+lgm_results = lgm_model.fit(method="lbfgs")
+
+# Print summary of model results
+print(lgm_results.summary())
+
+# Extract player-specific parameters
+player_params = []
+for player, effects in lgm_results.random_effects.items():
+    player_params.append({
+        'name': player,
+        'random_intercept': effects[0],
+        'random_slope': effects[1],
+        'total_intercept': lgm_results.fe_params[0] + effects[0],
+        'total_slope': lgm_results.fe_params[1] + effects[1]
+    })
+
+player_params_df = pd.DataFrame(player_params)
+
+# Visualize results
+plt.figure(figsize=(12, 8))
+plt.scatter(
+    player_params_df['total_intercept'],
+    player_params_df['total_slope'],
+    alpha=0.6
+)
+
+plt.axhline(y=0, color='gray', linestyle='--', alpha=0.5)
+plt.axvline(x=0, color='gray', linestyle='--', alpha=0.5)
+plt.xlabel('Initial Persistence (Intercept)')
+plt.ylabel('Persistence Growth (Slope)')
+plt.title(f'Player Persistence Trajectories')
+plt.grid(True, alpha=0.3)
+
+# Highlight most persistent players (high intercept, positive slope)
+top_persistent = player_params_df[
+    (player_params_df['total_intercept'] > player_params_df['total_intercept'].median()) &
+    (player_params_df['total_slope'] > 0)
+].nlargest(10, 'total_slope')
+
+for _, player in top_persistent.iterrows():
+    plt.annotate(
+        player['name'],
+        (player['total_intercept'], player['total_slope']),
+        xytext=(5, 5),
+        textcoords='offset points',
+        bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="gray", alpha=0.8)
+    )
+
+plt.savefig('persistence_lgm_results.png', dpi=300, bbox_inches='tight')
+plt.show()
+
+# Save the top persistent players
+print("Top persistent players identified by LGM:")
+print(top_persistent[['name', 'total_intercept', 'total_slope']])
+top_persistent.to_csv('top_persistent_players.csv', index=False)
+
+
+# Cluster based on persistence-related metrics
+cluster_features = ['avg_persistence', 'cum_progression_velocity', 'smoothed_play_density']
+kmeans = KMeans(n_clusters=3, random_state=42)
+data['persistence_cluster'] = kmeans.fit_predict(data[cluster_features])
+
+# Run separate LGM per cluster
+for cluster in data['persistence_cluster'].unique():
+    cluster_data = data[data['persistence_cluster'] == cluster]
+    lgm_model = smf.mixedlm(lgm_formula, cluster_data, groups=cluster_data["name"], re_formula="1 + time_since_first_game_scaled")
+    lgm_results = lgm_model.fit(method="lbfgs")
+    print(f"Cluster {cluster} LGM Summary:")
+    print(lgm_results.summary())
\ No newline at end of file
diff --git a/src/models/persistence_lgm_results.png b/src/models/persistence_lgm_results.png
new file mode 100644
index 0000000..329d593
Binary files /dev/null and b/src/models/persistence_lgm_results.png differ
diff --git a/src/models/predict_model.py b/src/models/predict_model.py
deleted file mode 100644
index e69de29..0000000
diff --git a/src/models/top_persistent_players.csv b/src/models/top_persistent_players.csv
new file mode 100644
index 0000000..5bf11f1
--- /dev/null
+++ b/src/models/top_persistent_players.csv
@@ -0,0 +1,11 @@
+name,random_intercept,random_slope,total_intercept,total_slope
+Player55968,8.816004178948004,14.033012809353414,8.787551981173827,14.129561063395437
+Player45810,5.967699801796639,10.549558696415955,5.939247604022462,10.646106950457979
+Player39406,3.7751537576625935,6.400539117136068,3.7467015598884164,6.4970873711780905
+Player43980,3.43950667686653,5.931355841374078,3.411054479092353,6.0279040954161
+Player57308,3.4816758814777473,5.878422639225552,3.45322368370357,5.9749708932675745
+Player39378,3.3760145522355396,5.22028529480321,3.3475623544613624,5.316833548845232
+Player16923,2.4870668529226436,4.827601396313804,2.4586146551484664,4.924149650355826
+Player53062,2.3534607695203347,3.8624287194568248,2.3250085717461575,3.958976973498847
+Player15245,2.100518819366984,3.6408910630923237,2.072066621592807,3.737439317134346
+Player10731,1.631480547882688,3.042547568511315,1.6030283501085107,3.139095822553337
diff --git a/src/models/train_model.py b/src/models/train_model.py
deleted file mode 100644
index e69de29..0000000
diff --git a/src/data/expert_processing.py b/src/utils/__init__.py
similarity index 100%
rename from src/data/expert_processing.py
rename to src/utils/__init__.py
diff --git a/src/utils/buffer.py b/src/utils/buffer.py
new file mode 100644
index 0000000..79134d0
--- /dev/null
+++ b/src/utils/buffer.py
@@ -0,0 +1,102 @@
+import random
+import numpy as np
+from itertools import cycle
+from typing import Dict, List, Optional
+import torch
+from tqdm.auto import tqdm
+
+
+# Utility functions for dictionary operations
+def dict_slice(
+        data: Dict[str, np.ndarray],
+        start: int,
+        end: int
+) -> Dict[str, np.ndarray]:
+    return {k: v[start:end] for k, v in data.items()}
+
+
+def dict_concat(datas: List[Dict[str, np.ndarray]]) -> Dict[str, np.ndarray]:
+    return {k: np.concatenate([d[k] for d in datas]) for k in datas[0].keys()}
+
+
+def dict_stack(datas: List[Dict[str, np.ndarray]]) -> Dict[str, np.ndarray]:
+    return {k: np.stack([d[k] for d in datas]) for k in datas[0].keys()}
+
+
+class StateOnlySequentialBuffer:
+    """
+    A modified sequential buffer that works with state-only datasets and
+    can optionally integrate with an inverse model to generate actions.
+    """
+
+    def __init__(
+            self,
+            dataset,  # StateOnlyDataset from the dataset.py
+            batch_size: int,
+            seq_len: int,
+            add_next_step: bool = False,
+            inverse_model: Optional[torch.nn.Module] = None,
+            device: str = "cuda" if torch.cuda.is_available() else "cpu",
+            seed: int = 0
+    ):
+        self.traj = dataset
+        self.traj_idxs = list(range(len(self.traj)))
+        # shuffle starting trajectories indices
+        random.seed(seed)
+        random.shuffle(self.traj_idxs)
+        # iterator over next free trajectories to pick
+        self.free_traj = cycle(self.traj_idxs)
+        # index of the current trajectory for each row in batch
+        self.curr_traj = np.array([next(self.free_traj) for _ in range(batch_size)], dtype=int)
+        # index withing the current trajectory for each row in batch
+        self.curr_idx = np.zeros(batch_size, dtype=int)
+
+        self.batch_size = batch_size
+        # it will return seq_len + 1, but also will start next traj from seq_len + 1, not seq_len + 2 as in nle
+        # this is very useful for DQN-like algorithms training with RNNs
+        self.add_next_step = add_next_step
+        self.seq_len = seq_len + 1 if add_next_step else seq_len
+
+        # Store the inverse model if provided
+        self.inverse_model = inverse_model
+        self.device = device
+
+        # If the dataset already has an inverse model, we'll use that one
+        if inverse_model is None and hasattr(dataset, 'inverse_model') and dataset.inverse_model is not None:
+            self.inverse_model = dataset.inverse_model
+
+        # Pre-compute actions for all trajectories if we have an inverse model
+        if self.inverse_model is not None and not all(hasattr(self.traj[i], "actions") for i in self.traj_idxs):
+            print("Pre-computing actions using inverse model...")
+            for i in tqdm(self.traj_idxs, desc="Generating actions"):
+                # This will generate and cache actions
+                self.traj[i]  # Just access the item to trigger action generation
+
+    def sample(self):
+        batch = []
+        for i in range(self.batch_size):
+            traj_idx = self.curr_traj[i]
+            start_idx = self.curr_idx[i]
+            data = dict_slice(self.traj[traj_idx], start_idx, start_idx + self.seq_len)
+
+            if len(data["actions"]) < self.seq_len:
+                # if next traj will have total_len < seq_len, then get next until data is seq_len
+                while len(data["actions"]) < self.seq_len:
+                    traj_idx = next(self.free_traj)
+                    len_diff = self.seq_len - len(data["actions"])
+
+                    data = dict_concat([
+                        data,
+                        dict_slice(self.traj[traj_idx], 0, len_diff),
+                    ])
+                    self.curr_traj[i] = traj_idx
+                    self.curr_idx[i] = len_diff - 1 if self.add_next_step else len_diff
+            else:
+                self.curr_idx[i] += self.seq_len - 1 if self.add_next_step else self.seq_len
+
+            batch.append(data)
+
+        return dict_stack(batch)
+
+    def close(self, clear_cache=True):
+        return self.traj.close(clear_cache=clear_cache)
\ No newline at end of file
diff --git a/wandb/latest-run b/wandb/latest-run
new file mode 120000
index 0000000..1e5f67e
--- /dev/null
+++ b/wandb/latest-run
@@ -0,0 +1 @@
+run-20250311_050248-510f4e1e-3bf8-4495-81ee-3706e6a79e37
\ No newline at end of file
diff --git a/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/code/main.py b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/code/main.py
new file mode 100644
index 0000000..1b996c7
--- /dev/null
+++ b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/code/main.py
@@ -0,0 +1,110 @@
+#!/usr/bin/env python3
+import os
+import sys
+import argparse
+from src.models.bco import train, TrainConfig
+from multiprocessing import set_start_method
+from katakomba.utils.roles import Role, Race, Alignment
+
+
+def parse_character(character_str):
+    """Parse character string into role, race, alignment objects"""
+    parts = character_str.split("-")
+    if len(parts) != 3:
+        raise ValueError(f"Invalid character format: {character_str}. Expected format: 'role-race-alignment'")
+    return Role(parts[0]), Race(parts[1]), Alignment(parts[2])
+
+
+def main():
+    parser = argparse.ArgumentParser(description="Inverse BC Training for NetHack")
+    parser.add_argument("--character", type=str, default="tou-hum-neu",
+                        help="Character type in format 'role-race-alignment'")
+    parser.add_argument("--data_path", type=str,
+                        default="/code/NetHack-Research/data/processed/hdf5_data/",
+                        help="Path to HDF5 data files")
+    parser.add_argument("--data_mode", type=str, default="compressed",
+                        choices=["compressed", "in_memory", "memmap"],
+                        help="Data loading mode")
+    parser.add_argument("--checkpoints_path", type=str, default="./checkpoints",
+                        help="Path to save checkpoints")
+    parser.add_argument("--batch_size", type=int, default=256,
+                        help="Batch size for training")
+    parser.add_argument("--seq_len", type=int, default=8,
+                        help="Sequence length for training")
+    parser.add_argument("--update_steps", type=int, default=25000,
+                        help="Number of update steps")
+    parser.add_argument("--eval_episodes", type=int, default=25,
+                        help="Number of episodes to evaluate on")
+    parser.add_argument("--eval_every", type=int, default=5000,
+                        help="Evaluation interval (steps)")
+    parser.add_argument("--train_inverse", action="store_true",
+                        help="Train the inverse model along with BC")
+    parser.add_argument("--inverse_weight", type=float, default=1.0,
+                        help="Weight for inverse model loss")
+    parser.add_argument("--use_diff_vector", action="store_true",
+                        help="Use difference vector for inverse model")
+    parser.add_argument("--inverse_model_path", type=str, default=None,
+                        help="Path to pretrained inverse model (optional)")
+    parser.add_argument("--seed", type=int, default=42,
+                        help="Random seed")
+    parser.add_argument("--wandb_project", type=str, default="NetHack",
+                        help="WandB project name")
+    parser.add_argument("--wandb_group", type=str, default="inverse_bc",
+                        help="WandB group name")
+
+    args = parser.parse_args()
+
+    # Parse the character string
+    role, race, align = parse_character(args.character)
+
+    # Create a config with the parsed arguments
+    config = TrainConfig(
+        character=args.character,
+        data_path=args.data_path,
+        data_mode=args.data_mode,
+        project=args.wandb_project,
+        group=args.wandb_group,
+        name=f"inverse_bc-{args.character}",
+        checkpoints_path=args.checkpoints_path,
+        batch_size=args.batch_size,
+        seq_len=args.seq_len,
+        update_steps=args.update_steps,
+        eval_episodes=args.eval_episodes,
+        eval_every=args.eval_every,
+        use_inverse_model=True,  # Always use inverse model for state-only data
+        train_inverse_model=args.train_inverse,
+        inverse_model_weight=args.inverse_weight,
+        use_difference_vector=args.use_diff_vector,
+        inverse_model_path=args.inverse_model_path,
+        train_seed=args.seed,
+        eval_seed=args.seed + 10,
+    )
+
+    # Set role, race, align explicitly since they're needed in the code
+    config.role = role
+    config.race = race
+    config.align = align
+
+    print(f"Starting training with character: {args.character}")
+    print(f"Inverse model training: {'Enabled' if args.train_inverse else 'Disabled'}")
+    print(f"Checkpoints will be saved to: {args.checkpoints_path}")
+
+    try:
+        # Run training
+        actor, inverse_model = train(config)
+
+        print("\nTraining complete!")
+        if config.checkpoints_path:
+            print(f"Final models saved to: {config.checkpoints_path}")
+    except Exception as e:
+        print(f"\nError during training: {e}")
+        import traceback
+        traceback.print_exc()
+        return 1
+
+    return 0
+
+
+if __name__ == "__main__":
+    set_start_method("spawn")
+    sys.exit(main())
\ No newline at end of file
diff --git a/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/config.yaml b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/config.yaml
new file mode 100644
index 0000000..e08ec18
--- /dev/null
+++ b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/config.yaml
@@ -0,0 +1,129 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.12.21
+    code_path: code/main.py
+    framework: torch
+    is_jupyter_run: false
+    is_kaggle_kernel: false
+    python_version: 3.10.12
+    start_time: 1741694341
+    t:
+      1:
+      - 1
+      - 55
+      2:
+      - 1
+      - 55
+      3:
+      - 13
+      - 14
+      - 16
+      4: 3.10.12
+      5: 0.12.21
+      8:
+      - 5
+align:
+  desc: null
+  value: Alignment.NEUTRAL
+batch_size:
+  desc: null
+  value: 256
+character:
+  desc: null
+  value: arc-hum-neu
+checkpoints_path:
+  desc: null
+  value: ./checkpoints/inverse_bc-v0/inverse_bc-arc-hum-neu-arc-hum-neu-5a8847e1
+clip_grad_norm:
+  desc: null
+  value: null
+data_mode:
+  desc: null
+  value: compressed
+data_path:
+  desc: null
+  value: /code/NetHack-Research/data/processed/hdf5_data/
+eval_episodes:
+  desc: null
+  value: 25
+eval_every:
+  desc: null
+  value: 5000
+eval_processes:
+  desc: null
+  value: 8
+eval_seed:
+  desc: null
+  value: 52
+group:
+  desc: null
+  value: inverse_bc-v0
+inverse_model_lr:
+  desc: null
+  value: 0.0001
+inverse_model_path:
+  desc: null
+  value: null
+inverse_model_weight:
+  desc: null
+  value: 1.0
+learning_rate:
+  desc: null
+  value: 0.0003
+name:
+  desc: null
+  value: inverse_bc-arc-hum-neu-arc-hum-neu-5a8847e1
+project:
+  desc: null
+  value: NetHack
+race:
+  desc: null
+  value: Race.HUMAN
+render_processes:
+  desc: null
+  value: 8
+rnn_dropout:
+  desc: null
+  value: 0.0
+rnn_hidden_dim:
+  desc: null
+  value: 1024
+rnn_layers:
+  desc: null
+  value: 1
+role:
+  desc: null
+  value: Role.ARCHEOLOGIST
+seq_len:
+  desc: null
+  value: 8
+size:
+  desc: null
+  value: small
+train_inverse_model:
+  desc: null
+  value: true
+train_seed:
+  desc: null
+  value: 42
+update_steps:
+  desc: null
+  value: 25000
+use_difference_vector:
+  desc: null
+  value: false
+use_inverse_model:
+  desc: null
+  value: true
+use_prev_action:
+  desc: null
+  value: true
+version:
+  desc: null
+  value: 0
+weight_decay:
+  desc: null
+  value: 0.0
diff --git a/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/diff.patch b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/diff.patch
new file mode 100644
index 0000000..1db5532
--- /dev/null
+++ b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/diff.patch
@@ -0,0 +1,6217 @@
+diff --git a/config/config.yaml b/config/config.yaml
+index e69de29..7d26102 100644
+--- a/config/config.yaml
++++ b/config/config.yaml
+@@ -0,0 +1,31 @@
++character: arc-hum-neu
++data_mode: compressed
++data_path: /code/NetHack-Research/data/processed/hdf5_data/
++project: NetHack
++group: inverse_bc
++name: inverse_bc
++version: 0
++
++# Model
++rnn_hidden_dim: 1024
++rnn_layers: 1
++use_prev_action: true
++rnn_dropout: 0.0
++
++# Inverse Model
++use_inverse_model: true
++train_inverse_model: true  # Enable inverse model training
++inverse_model_weight: 1.0
++use_difference_vector: false
++
++# Training
++update_steps: 25000
++batch_size: 256
++seq_len: 8
++learning_rate: 3e-4
++weight_decay: 0.0
++eval_every: 5000
++eval_episodes: 25
++eval_processes: 8
++render_processes: 8
++checkpoints_path: ./checkpoints
+\ No newline at end of file
+diff --git a/config/inverse.config.yaml b/config/inverse.config.yaml
+new file mode 100644
+index 0000000..294af07
+--- /dev/null
++++ b/config/inverse.config.yaml
+@@ -0,0 +1,5 @@
++character: arc-hum-neu
++use_inverse_model: true
++train_inverse_model: true
++inverse_model_weight: 1.0
++data_path: /code/NetHack-Research/data/processed/hdf5_data/
+\ No newline at end of file
+diff --git a/generate.sh b/generate.sh
+deleted file mode 100755
+index 2f8c567..0000000
+--- a/generate.sh
++++ /dev/null
+@@ -1,67 +0,0 @@
+-#!/bin/bash
+-export DATA_PATH="/code/nld-nao/nld-nao-unzipped"
+-export SAVE_PATH="/code/NetHack-Research/data/raw/converted_data/"
+-
+-
+-combos=(
+-    "arc hum law"
+-    "arc hum neu"
+-    "arc dwa law"
+-    "arc gno neu"
+-
+-    "bar hum neu"
+-    "bar hum cha"
+-    "bar orc cha"
+-
+-    "cav hum law"
+-    "cav hum neu"
+-    "cav dwa law"
+-    "cav gno neu"
+-
+-    "hea hum neu"
+-    "hea gno neu"
+-
+-    "kni hum law"
+-
+-    "mon hum neu"
+-    "mon hum law"
+-    "mon hum cha"
+-
+-    "pri hum neu"
+-    "pri hum law"
+-    "pri hum cha"
+-    "pri elf cha"
+-
+-    "ran hum neu"
+-    "ran hum cha"
+-    "ran elf cha"
+-    "ran gno neu"
+-    "ran orc cha"
+-
+-    "rog hum cha"
+-    "rog orc cha"
+-
+-    "sam hum law"
+-
+-    "tou hum neu"
+-
+-    "val hum neu"
+-    "val hum law"
+-    "val dwa law"
+-
+-    "wiz hum neu"
+-    "wiz hum cha"
+-    "wiz elf cha"
+-    "wiz gno neu"
+-    "wiz orc cha"
+-)
+-
+-for tup in "${combos[@]}"
+-do
+-    set -- $tup
+-    python3 generate_dataset.py \
+-        --data_path=$DATA_PATH \
+-        --save_path=$SAVE_PATH \
+-        --role="$1" --race="$2" --alignment="$3" \
+-        --num_episodes=700
+-done
+\ No newline at end of file
+diff --git a/main.py b/main.py
+new file mode 100644
+index 0000000..1b996c7
+--- /dev/null
++++ b/main.py
+@@ -0,0 +1,110 @@
++#!/usr/bin/env python3
++import os
++import sys
++import argparse
++from src.models.bco import train, TrainConfig
++from multiprocessing import set_start_method
++from katakomba.utils.roles import Role, Race, Alignment
++
++
++def parse_character(character_str):
++    """Parse character string into role, race, alignment objects"""
++    parts = character_str.split("-")
++    if len(parts) != 3:
++        raise ValueError(f"Invalid character format: {character_str}. Expected format: 'role-race-alignment'")
++    return Role(parts[0]), Race(parts[1]), Alignment(parts[2])
++
++
++def main():
++    parser = argparse.ArgumentParser(description="Inverse BC Training for NetHack")
++    parser.add_argument("--character", type=str, default="tou-hum-neu",
++                        help="Character type in format 'role-race-alignment'")
++    parser.add_argument("--data_path", type=str,
++                        default="/code/NetHack-Research/data/processed/hdf5_data/",
++                        help="Path to HDF5 data files")
++    parser.add_argument("--data_mode", type=str, default="compressed",
++                        choices=["compressed", "in_memory", "memmap"],
++                        help="Data loading mode")
++    parser.add_argument("--checkpoints_path", type=str, default="./checkpoints",
++                        help="Path to save checkpoints")
++    parser.add_argument("--batch_size", type=int, default=256,
++                        help="Batch size for training")
++    parser.add_argument("--seq_len", type=int, default=8,
++                        help="Sequence length for training")
++    parser.add_argument("--update_steps", type=int, default=25000,
++                        help="Number of update steps")
++    parser.add_argument("--eval_episodes", type=int, default=25,
++                        help="Number of episodes to evaluate on")
++    parser.add_argument("--eval_every", type=int, default=5000,
++                        help="Evaluation interval (steps)")
++    parser.add_argument("--train_inverse", action="store_true",
++                        help="Train the inverse model along with BC")
++    parser.add_argument("--inverse_weight", type=float, default=1.0,
++                        help="Weight for inverse model loss")
++    parser.add_argument("--use_diff_vector", action="store_true",
++                        help="Use difference vector for inverse model")
++    parser.add_argument("--inverse_model_path", type=str, default=None,
++                        help="Path to pretrained inverse model (optional)")
++    parser.add_argument("--seed", type=int, default=42,
++                        help="Random seed")
++    parser.add_argument("--wandb_project", type=str, default="NetHack",
++                        help="WandB project name")
++    parser.add_argument("--wandb_group", type=str, default="inverse_bc",
++                        help="WandB group name")
++
++    args = parser.parse_args()
++
++    # Parse the character string
++    role, race, align = parse_character(args.character)
++
++    # Create a config with the parsed arguments
++    config = TrainConfig(
++        character=args.character,
++        data_path=args.data_path,
++        data_mode=args.data_mode,
++        project=args.wandb_project,
++        group=args.wandb_group,
++        name=f"inverse_bc-{args.character}",
++        checkpoints_path=args.checkpoints_path,
++        batch_size=args.batch_size,
++        seq_len=args.seq_len,
++        update_steps=args.update_steps,
++        eval_episodes=args.eval_episodes,
++        eval_every=args.eval_every,
++        use_inverse_model=True,  # Always use inverse model for state-only data
++        train_inverse_model=args.train_inverse,
++        inverse_model_weight=args.inverse_weight,
++        use_difference_vector=args.use_diff_vector,
++        inverse_model_path=args.inverse_model_path,
++        train_seed=args.seed,
++        eval_seed=args.seed + 10,
++    )
++
++    # Set role, race, align explicitly since they're needed in the code
++    config.role = role
++    config.race = race
++    config.align = align
++
++    print(f"Starting training with character: {args.character}")
++    print(f"Inverse model training: {'Enabled' if args.train_inverse else 'Disabled'}")
++    print(f"Checkpoints will be saved to: {args.checkpoints_path}")
++
++    try:
++        # Run training
++        actor, inverse_model = train(config)
++
++        print("\nTraining complete!")
++        if config.checkpoints_path:
++            print(f"Final models saved to: {config.checkpoints_path}")
++    except Exception as e:
++        print(f"\nError during training: {e}")
++        import traceback
++        traceback.print_exc()
++        return 1
++
++    return 0
++
++
++if __name__ == "__main__":
++    set_start_method("spawn")
++    sys.exit(main())
+\ No newline at end of file
+diff --git a/notebooks/1-15-2024_NLD-AA.ipynb b/notebooks/1-15-2024_NLD-AA.ipynb
+index 034477c..75da5f1 100644
+--- a/notebooks/1-15-2024_NLD-AA.ipynb
++++ b/notebooks/1-15-2024_NLD-AA.ipynb
+@@ -6,8 +6,8 @@
+    "metadata": {
+     "collapsed": true,
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T23:44:05.077505Z",
+-     "start_time": "2025-03-05T23:44:04.905243Z"
++     "end_time": "2025-03-09T02:09:26.428138Z",
++     "start_time": "2025-03-09T02:09:26.174497Z"
+     }
+    },
+    "source": [
+@@ -21,8 +21,8 @@
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T23:44:06.990605Z",
+-     "start_time": "2025-03-05T23:44:06.987347Z"
++     "end_time": "2025-03-09T02:09:27.183606Z",
++     "start_time": "2025-03-09T02:09:27.180168Z"
+     }
+    },
+    "cell_type": "code",
+@@ -38,8 +38,8 @@
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T23:44:07.739017Z",
+-     "start_time": "2025-03-05T23:44:07.727961Z"
++     "end_time": "2025-03-09T02:09:28.643251Z",
++     "start_time": "2025-03-09T02:09:28.639310Z"
+     }
+    },
+    "cell_type": "code",
+@@ -56,8 +56,8 @@
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T23:44:08.647238Z",
+-     "start_time": "2025-03-05T23:44:08.637513Z"
++     "end_time": "2025-03-09T02:09:30.469520Z",
++     "start_time": "2025-03-09T02:09:30.465354Z"
+     }
+    },
+    "cell_type": "code",
+diff --git a/notebooks/1-2-2024_Expert-Filtering.ipynb b/notebooks/1-2-2024_Expert-Filtering.ipynb
+index e603f1a..8111243 100644
+--- a/notebooks/1-2-2024_Expert-Filtering.ipynb
++++ b/notebooks/1-2-2024_Expert-Filtering.ipynb
+@@ -6,8 +6,8 @@
+    "metadata": {
+     "collapsed": true,
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T20:33:33.034959Z",
+-     "start_time": "2025-03-05T20:33:33.032147Z"
++     "end_time": "2025-03-11T03:42:03.548164Z",
++     "start_time": "2025-03-11T03:42:03.544865Z"
+     }
+    },
+    "source": [
+@@ -17,13 +17,13 @@
+     "import seaborn as sns"
+    ],
+    "outputs": [],
+-   "execution_count": 1
++   "execution_count": 3
+   },
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T22:35:33.998621Z",
+-     "start_time": "2025-03-05T22:35:28.344707Z"
++     "end_time": "2025-03-11T03:42:19.751508Z",
++     "start_time": "2025-03-11T03:42:12.019773Z"
+     }
+    },
+    "cell_type": "code",
+@@ -33,56 +33,326 @@
+     "\n",
+     "# Load CSV to Pandas Dataframe\n",
+     "df = pd.read_csv(csv_path)\n",
+-    "df.head()"
++    "df.head(50)"
+    ],
+    "id": "55f10c2a1846d900",
+    "outputs": [
+     {
+      "data": {
+       "text/plain": [
+-       "      name            starttime              endtime   gameid version  points  \\\n",
+-       "0  Player0  2008-03-22 00:07:04  2008-03-22 00:07:40  3520378   3.4.3       0   \n",
+-       "1  Player0  2008-03-22 00:07:43  2008-03-22 00:09:50  3520380   3.4.3       0   \n",
+-       "2  Player0  2008-03-22 22:12:31  2008-03-22 22:14:21  3520795   3.4.3     161   \n",
+-       "3  Player0  2008-03-23 11:21:37  2008-03-23 19:35:39  3521208   3.4.3     250   \n",
+-       "4  Player0  2008-03-23 19:36:30  2008-03-23 19:37:24  3521210   3.4.3       3   \n",
++       "       name            starttime              endtime   gameid version  \\\n",
++       "0   Player0  2008-03-22 00:07:04  2008-03-22 00:07:40  3520378   3.4.3   \n",
++       "1   Player0  2008-03-22 00:07:43  2008-03-22 00:09:50  3520380   3.4.3   \n",
++       "2   Player0  2008-03-22 22:12:31  2008-03-22 22:14:21  3520795   3.4.3   \n",
++       "3   Player0  2008-03-23 11:21:37  2008-03-23 19:35:39  3521208   3.4.3   \n",
++       "4   Player0  2008-03-23 19:36:30  2008-03-23 19:37:24  3521210   3.4.3   \n",
++       "5   Player0  2008-03-23 19:39:08  2008-03-23 19:39:58  3521212   3.4.3   \n",
++       "6   Player0  2009-03-03 11:13:36  2009-03-03 11:23:03  3741776   3.4.3   \n",
++       "7   Player0  2009-03-03 11:23:06  2009-07-16 18:52:26  3827696   3.4.3   \n",
++       "8   Player0  2009-10-17 15:49:11  2010-05-15 08:54:13  4040069   3.4.3   \n",
++       "9   Player0  2010-12-07 15:28:43  2011-01-07 20:20:00  4361193   3.4.3   \n",
++       "10  Player0  2011-01-07 20:49:13  2011-03-07 09:02:49  4405666   3.4.3   \n",
++       "11  Player0  2011-10-08 18:24:25  2011-10-08 18:45:42  4716721   3.4.3   \n",
++       "12  Player0  2011-10-08 23:30:59  2011-10-30 19:27:43  4756163   3.4.3   \n",
++       "13  Player0  2011-11-22 17:07:46  2012-05-13 03:54:32  4943035   3.4.3   \n",
++       "14  Player0  2012-05-18 18:51:08  2012-09-22 10:32:18  5473479   3.4.3   \n",
++       "15  Player0  2012-09-22 10:47:17  2012-09-22 10:51:17  5473482   3.4.3   \n",
++       "16  Player0  2012-10-18 18:03:04  2013-03-15 13:56:47  5640832   3.4.3   \n",
++       "17  Player0  2013-03-15 14:08:25  2013-10-25 18:04:09  5880363   3.4.3   \n",
++       "18  Player0  2014-03-03 16:09:21  2015-03-25 15:14:56  6219503   3.4.3   \n",
++       "19  Player0  2015-12-08 10:08:36  2015-12-08 10:09:21  2237469   3.6.0   \n",
++       "20  Player0  2016-05-30 08:11:38  2017-10-30 20:21:37  2780724   3.6.0   \n",
++       "21  Player1  2010-07-30 08:23:27  2010-07-30 09:02:23  4085412   3.4.3   \n",
++       "22  Player1  2010-07-30 09:02:50  2010-07-31 17:39:29  4086650   3.4.3   \n",
++       "23  Player1  2010-07-31 17:39:41  2010-07-31 17:40:35  4086653   3.4.3   \n",
++       "24  Player1  2010-07-31 17:40:43  2010-07-31 18:18:57  4086664   3.4.3   \n",
++       "25  Player1  2010-07-31 18:19:02  2010-07-31 18:24:20  4086668   3.4.3   \n",
++       "26  Player1  2010-08-02 09:09:27  2010-08-02 14:46:01  4088569   3.4.3   \n",
++       "27  Player1  2010-08-02 14:46:06  2010-08-02 14:58:10  4088575   3.4.3   \n",
++       "28  Player1  2010-08-02 14:58:14  2010-08-02 15:35:18  4088585   3.4.3   \n",
++       "29  Player1  2010-08-02 15:35:24  2010-08-02 15:42:43  4088588   3.4.3   \n",
++       "30  Player1  2010-08-02 15:42:54  2010-08-02 15:59:43  4088592   3.4.3   \n",
++       "31  Player1  2010-08-03 00:46:38  2010-08-03 01:15:03  4088980   3.4.3   \n",
++       "32  Player1  2010-08-03 01:15:11  2010-08-03 01:35:23  4088988   3.4.3   \n",
++       "33  Player1  2010-08-03 01:35:28  2010-08-03 02:47:49  4089071   3.4.3   \n",
++       "34  Player1  2010-08-03 02:48:04  2010-08-03 07:47:56  4089227   3.4.3   \n",
++       "35  Player1  2010-08-03 07:48:02  2010-08-03 08:03:01  4089232   3.4.3   \n",
++       "36  Player1  2010-08-03 08:03:07  2010-08-03 08:52:41  4089253   3.4.3   \n",
++       "37  Player1  2010-08-03 08:52:49  2010-08-03 14:22:09  4089502   3.4.3   \n",
++       "38  Player1  2010-08-03 14:22:28  2010-08-03 14:53:45  4089509   3.4.3   \n",
++       "39  Player1  2010-08-04 02:17:47  2010-08-04 02:37:57  4089909   3.4.3   \n",
++       "40  Player1  2010-08-04 02:38:03  2010-08-04 06:48:42  4090106   3.4.3   \n",
++       "41  Player1  2010-08-04 06:48:48  2010-08-04 07:07:44  4090112   3.4.3   \n",
++       "42  Player1  2010-08-04 07:09:18  2010-08-04 08:14:10  4090137   3.4.3   \n",
++       "43  Player1  2010-08-04 08:14:15  2010-08-05 01:40:15  4091234   3.4.3   \n",
++       "44  Player1  2010-08-05 01:40:21  2010-08-05 04:22:02  4091321   3.4.3   \n",
++       "45  Player1  2010-08-05 04:22:07  2010-08-05 05:50:04  4091348   3.4.3   \n",
++       "46  Player1  2010-08-05 05:50:09  2010-08-05 05:51:38  4091349   3.4.3   \n",
++       "47  Player1  2010-08-05 05:51:46  2010-08-05 07:09:20  4091464   3.4.3   \n",
++       "48  Player1  2010-08-05 07:09:25  2010-08-05 07:16:54  4091466   3.4.3   \n",
++       "49  Player1  2010-08-05 07:16:57  2010-08-11 06:41:32  4095604   3.4.3   \n",
+        "\n",
+-       "   deathdnum  deathlev  maxlvl  hp  ...  gender  align  \\\n",
+-       "0          0         1       1   0  ...     Fem    Neu   \n",
+-       "1          0         1       1  -1  ...     Mal    Cha   \n",
+-       "2          0         3       3  15  ...     Fem    Cha   \n",
+-       "3          2         6       6 -17  ...     Mal    Cha   \n",
+-       "4          7        -5       1  16  ...     Fem    Neu   \n",
++       "    points  deathdnum  deathlev  maxlvl  hp  ...  gender  align  \\\n",
++       "0        0          0         1       1   0  ...     Fem    Neu   \n",
++       "1        0          0         1       1  -1  ...     Mal    Cha   \n",
++       "2      161          0         3       3  15  ...     Fem    Cha   \n",
++       "3      250          2         6       6 -17  ...     Mal    Cha   \n",
++       "4        3          7        -5       1  16  ...     Fem    Neu   \n",
++       "5        5          7        -5       1  10  ...     Fem    Neu   \n",
++       "6        0          0         1       1   0  ...     Fem    Neu   \n",
++       "7       78          0         2       2   0  ...     Mal    Law   \n",
++       "8        0          0         1       1  14  ...     Mal    Cha   \n",
++       "9        0          0         1       1   0  ...     Mal    Law   \n",
++       "10    9378          2         7      28  10  ...     Fem    Neu   \n",
++       "11       0          0         1       1  15  ...     Mal    Neu   \n",
++       "12      11          0         1       1  15  ...     Fem    Law   \n",
++       "13    6009          0         2      23  42  ...     Fem    Neu   \n",
++       "14    1326          0         2       2  -4  ...     Fem    Law   \n",
++       "15      58          0         1       2   0  ...     Fem    Cha   \n",
++       "16     550          0         1       6  25  ...     Mal    Neu   \n",
++       "17       4          0         1       1   7  ...     Fem    Neu   \n",
++       "18     260          0         6       6   3  ...     Mal    Cha   \n",
++       "19     106          0         2       2   0  ...     Mal    Neu   \n",
++       "20      37          0         1       1  -1  ...     Fem    Neu   \n",
++       "21    2091          2         4       4   0  ...     Fem    Cha   \n",
++       "22     144          0         2       3 -17  ...     Fem    Cha   \n",
++       "23       0          0         1       1  -1  ...     Fem    Cha   \n",
++       "24    1806          2         5       5   0  ...     Fem    Cha   \n",
++       "25     190          0         1       2   0  ...     Fem    Cha   \n",
++       "26     761          0         5       5   0  ...     Fem    Cha   \n",
++       "27     657          0         3       4  31  ...     Fem    Cha   \n",
++       "28    1241          0         5       6  -1  ...     Fem    Cha   \n",
++       "29     659          0         4       4  19  ...     Fem    Cha   \n",
++       "30    1565          0         8       8   0  ...     Fem    Cha   \n",
++       "31    1561          0         7       8   0  ...     Fem    Cha   \n",
++       "32    3690          2         8       8  -8  ...     Fem    Cha   \n",
++       "33    4497          4         2       6  -8  ...     Fem    Cha   \n",
++       "34    5750          0        11      11   0  ...     Fem    Cha   \n",
++       "35    2438          2         5       5  -8  ...     Fem    Cha   \n",
++       "36    8229          4         8      10  -1  ...     Fem    Cha   \n",
++       "37    1620          0         6       7  -4  ...     Fem    Cha   \n",
++       "38    3886          0         7       8  -1  ...     Fem    Cha   \n",
++       "39     730          0         3       3   0  ...     Fem    Cha   \n",
++       "40    5577          2         4       5 -10  ...     Fem    Cha   \n",
++       "41    1153          2         4       4  -1  ...     Fem    Cha   \n",
++       "42    1511          0         2       3  -2  ...     Fem    Cha   \n",
++       "43    2598          0         6       7  -4  ...     Fem    Cha   \n",
++       "44    7453          2         6       6   0  ...     Fem    Cha   \n",
++       "45    2248          2         4       4   0  ...     Fem    Cha   \n",
++       "46       7          0         1       1  -3  ...     Fem    Cha   \n",
++       "47     992          0         3       4  -1  ...     Fem    Cha   \n",
++       "48     157          0         2       2  -2  ...     Fem    Cha   \n",
++       "49   85380          2         8      14  -9  ...     Fem    Cha   \n",
+        "\n",
+-       "                             death  \\\n",
+-       "0         killed by kicking a wall   \n",
+-       "1         killed by kicking a wall   \n",
+-       "2                             quit   \n",
+-       "3  killed by a priestess of Brigit   \n",
+-       "4  escaped (in celestial disgrace)   \n",
++       "                                                death  \\\n",
++       "0                            killed by kicking a wall   \n",
++       "1                            killed by kicking a wall   \n",
++       "2                                                quit   \n",
++       "3                     killed by a priestess of Brigit   \n",
++       "4                     escaped (in celestial disgrace)   \n",
++       "5                                            ascended   \n",
++       "6                                killed by a grid bug   \n",
++       "7                                killed by a grid bug   \n",
++       "8                                                quit   \n",
++       "9                            killed by kicking a wall   \n",
++       "10                                               quit   \n",
++       "11                                               quit   \n",
++       "12                                               quit   \n",
++       "13                                               quit   \n",
++       "14                          killed by a black pudding   \n",
++       "15                               killed by a grid bug   \n",
++       "16                              killed by a death ray   \n",
++       "17                                               quit   \n",
++       "18                                               quit   \n",
++       "19                               killed by a grid bug   \n",
++       "20                                   killed by a newt   \n",
++       "21                                  killed by a dwarf   \n",
++       "22                  killed by a guard, while sleeping   \n",
++       "23                            killed by a water demon   \n",
++       "24                               killed by a housecat   \n",
++       "25                                    killed by a fox   \n",
++       "26                                 killed by a kitten   \n",
++       "27                                               quit   \n",
++       "28                              killed by a giant ant   \n",
++       "29                 poisoned by a rotted kobold corpse   \n",
++       "30                                   killed by a pony   \n",
++       "31                                  killed by a rothe   \n",
++       "32                         killed by a gnomish wizard   \n",
++       "33             killed by a giant mimic, while praying   \n",
++       "34                             killed by a rope golem   \n",
++       "35                                   killed by a wand   \n",
++       "36                           killed by a barrow wight   \n",
++       "37                             killed by a gnome lord   \n",
++       "38                 killed by a panther, while praying   \n",
++       "39                                 killed by a kitten   \n",
++       "40                            killed by a soldier ant   \n",
++       "41                          killed by a magic missile   \n",
++       "42                          killed by a magic missile   \n",
++       "43             killed by a rope golem, while helpless   \n",
++       "44                               killed by a fire ant   \n",
++       "45                                  killed by a rothe   \n",
++       "46                                   fell onto a sink   \n",
++       "47                             killed by a little dog   \n",
++       "48             killed by a hallucinogen-distorted fox   \n",
++       "49  killed by a priest of Mars, while paralyzed by...   \n",
+        "\n",
+-       "                                             conduct  turns  \\\n",
+-       "0  foodless,vegan,vegetarian,atheist,weaponless,p...     52   \n",
+-       "1  foodless,vegan,vegetarian,atheist,weaponless,p...     10   \n",
+-       "2  foodless,vegan,vegetarian,atheist,illiterate,p...    308   \n",
+-       "3  foodless,vegan,vegetarian,atheist,weaponless,p...      8   \n",
+-       "4  foodless,vegan,vegetarian,atheist,weaponless,p...      1   \n",
++       "                                              conduct  turns  \\\n",
++       "0   foodless,vegan,vegetarian,atheist,weaponless,p...     52   \n",
++       "1   foodless,vegan,vegetarian,atheist,weaponless,p...     10   \n",
++       "2   foodless,vegan,vegetarian,atheist,illiterate,p...    308   \n",
++       "3   foodless,vegan,vegetarian,atheist,weaponless,p...      8   \n",
++       "4   foodless,vegan,vegetarian,atheist,weaponless,p...      1   \n",
++       "5   foodless,vegan,vegetarian,atheist,weaponless,p...      1   \n",
++       "6   foodless,vegan,vegetarian,atheist,pacifist,ill...     50   \n",
++       "7   foodless,vegan,vegetarian,atheist,illiterate,p...    237   \n",
++       "8   foodless,vegan,vegetarian,atheist,weaponless,p...    392   \n",
++       "9   foodless,vegan,vegetarian,atheist,weaponless,p...     11   \n",
++       "10  atheist,weaponless,illiterate,polypileless,pol...    218   \n",
++       "11  foodless,vegan,vegetarian,atheist,weaponless,p...     25   \n",
++       "12  foodless,vegan,vegetarian,atheist,weaponless,p...     50   \n",
++       "13  vegan,vegetarian,atheist,polypileless,polyself...   1977   \n",
++       "14  foodless,vegan,vegetarian,atheist,polypileless...    760   \n",
++       "15  atheist,illiterate,polypileless,polyselfless,w...     79   \n",
++       "16  atheist,weaponless,polyselfless,artifact_wishless   1094   \n",
++       "17  foodless,vegan,vegetarian,atheist,weaponless,i...     25   \n",
++       "18  foodless,vegan,vegetarian,atheist,weaponless,p...     18   \n",
++       "19  foodless,vegan,vegetarian,atheist,weaponless,p...     40   \n",
++       "20  foodless,vegan,vegetarian,atheist,weaponless,p...    186   \n",
++       "21  atheist,illiterate,polypileless,polyselfless,w...   1152   \n",
++       "22  atheist,illiterate,polypileless,polyselfless,w...    299   \n",
++       "23  foodless,vegan,vegetarian,atheist,weaponless,p...      6   \n",
++       "24  illiterate,polypileless,polyselfless,wishless,...   2226   \n",
++       "25  atheist,illiterate,polypileless,polyselfless,w...    448   \n",
++       "26  atheist,polypileless,polyselfless,wishless,art...   1171   \n",
++       "27  atheist,illiterate,polypileless,polyselfless,w...   1356   \n",
++       "28  atheist,illiterate,polypileless,polyselfless,w...   1206   \n",
++       "29  illiterate,polypileless,polyselfless,wishless,...    651   \n",
++       "30  polypileless,polyselfless,wishless,artifact_wi...   1375   \n",
++       "31  atheist,polypileless,polyselfless,wishless,art...   1394   \n",
++       "32  illiterate,polypileless,polyselfless,wishless,...   1935   \n",
++       "33  polypileless,polyselfless,wishless,artifact_wi...   4295   \n",
++       "34  illiterate,polypileless,wishless,artifact_wish...   2649   \n",
++       "35  atheist,illiterate,polypileless,polyselfless,w...   1063   \n",
++       "36  polypileless,polyselfless,wishless,artifact_wi...   3133   \n",
++       "37  polypileless,polyselfless,wishless,artifact_wi...   1007   \n",
++       "38  illiterate,polypileless,polyselfless,wishless,...   1378   \n",
++       "39  illiterate,polypileless,polyselfless,wishless,...    504   \n",
++       "40  polypileless,polyselfless,wishless,artifact_wi...   5149   \n",
++       "41  atheist,illiterate,polypileless,polyselfless,w...   1271   \n",
++       "42  illiterate,polypileless,polyselfless,wishless,...   1957   \n",
++       "43  polypileless,polyselfless,wishless,artifact_wi...   2616   \n",
++       "44  polypileless,wishless,artifact_wishless,genoci...   3847   \n",
++       "45  polypileless,polyselfless,wishless,artifact_wi...   2147   \n",
++       "46  foodless,vegan,vegetarian,atheist,weaponless,p...     98   \n",
++       "47  polypileless,polyselfless,wishless,artifact_wi...   1557   \n",
++       "48  vegan,vegetarian,atheist,illiterate,polypilele...    531   \n",
++       "49  polypileless,wishless,artifact_wishless,genoci...  26789   \n",
+        "\n",
+-       "                                            achieve realtime gender0 align0  \\\n",
+-       "0                                               NaN       30     Fem    Neu   \n",
+-       "1                                               NaN      125     Mal    Cha   \n",
+-       "2                                               NaN      106     Fem    Cha   \n",
+-       "3                                               NaN      632     Mal    Cha   \n",
+-       "4  got_amulet_of_yendor,in_end_game,on_astral_plane       46     Fem    Neu   \n",
++       "                                              achieve realtime gender0 align0  \\\n",
++       "0                                                 NaN       30     Fem    Neu   \n",
++       "1                                                 NaN      125     Mal    Cha   \n",
++       "2                                                 NaN      106     Fem    Cha   \n",
++       "3                                                 NaN      632     Mal    Cha   \n",
++       "4    got_amulet_of_yendor,in_end_game,on_astral_plane       46     Fem    Neu   \n",
++       "5   got_amulet_of_yendor,in_end_game,on_astral_pla...       43     Fem    Neu   \n",
++       "6                                                 NaN       38     Fem    Neu   \n",
++       "7                                                 NaN      133     Mal    Law   \n",
++       "8                                                 NaN      417     Mal    Cha   \n",
++       "9                                                 NaN       97     Mal    Law   \n",
++       "10                                                NaN     4519     Fem    Neu   \n",
++       "11                                                NaN     1128     Mal    Neu   \n",
++       "12                                                NaN     1916     Fem    Law   \n",
++       "13                                                NaN     2788     Fem    Neu   \n",
++       "14                                                NaN     3725     Fem    Law   \n",
++       "15                                                NaN      129     Fem    Cha   \n",
++       "16                                                NaN     7895     Mal    Neu   \n",
++       "17                                                NaN      620     Fem    Neu   \n",
++       "18                                                NaN      622     Mal    Cha   \n",
++       "19                                                NaN       59     Mal    Neu   \n",
++       "20                                                NaN      100     Fem    Neu   \n",
++       "21                                                NaN     2308     Fem    Cha   \n",
++       "22                                                NaN      851     Fem    Cha   \n",
++       "23                                                NaN       50     Fem    Cha   \n",
++       "24                                                NaN     2288     Fem    Cha   \n",
++       "25                                                NaN      309     Fem    Cha   \n",
++       "26                                                NaN     1383     Fem    Cha   \n",
++       "27                                                NaN      713     Fem    Cha   \n",
++       "28                                                NaN      829     Fem    Cha   \n",
++       "29                                                NaN      420     Fem    Cha   \n",
++       "30                                                NaN      993     Fem    Cha   \n",
++       "31                                                NaN     1696     Fem    Cha   \n",
++       "32                                                NaN     1188     Fem    Cha   \n",
++       "33                                                NaN     4319     Fem    Cha   \n",
++       "34                                                NaN    14124     Fem    Cha   \n",
++       "35                                                NaN      895     Fem    Cha   \n",
++       "36                                                NaN     2971     Fem    Cha   \n",
++       "37                                                NaN      934     Fem    Cha   \n",
++       "38                                                NaN     1860     Fem    Cha   \n",
++       "39                                                NaN     1199     Fem    Cha   \n",
++       "40                                                NaN    15015     Fem    Cha   \n",
++       "41                                                NaN     1123     Fem    Cha   \n",
++       "42                                                NaN     3877     Fem    Cha   \n",
++       "43                                                NaN     3923     Fem    Cha   \n",
++       "44                                                NaN     9656     Fem    Cha   \n",
++       "45                                                NaN     5249     Fem    Cha   \n",
++       "46                                                NaN       80     Fem    Cha   \n",
++       "47                                                NaN     4642     Fem    Cha   \n",
++       "48                                                NaN      436     Fem    Cha   \n",
++       "49                     got_luckstone,finished_sokoban    74048     Fem    Cha   \n",
+        "\n",
+-       "                                               flags  \n",
+-       "0  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+-       "1  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+-       "2  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+-       "3  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+-       "4  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "                                                flags  \n",
++       "0   wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "1   wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "2   wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "3   wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "4   wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "5   wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "6   wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "7   wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "8   wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "9                                                 NaN  \n",
++       "10                                        wizard_mode  \n",
++       "11                                        wizard_mode  \n",
++       "12                                        wizard_mode  \n",
++       "13                                        wizard_mode  \n",
++       "14                                        wizard_mode  \n",
++       "15                                        wizard_mode  \n",
++       "16                                        wizard_mode  \n",
++       "17                                        wizard_mode  \n",
++       "18                          wizard_mode,discover_mode  \n",
++       "19                            never_loaded_bones_file  \n",
++       "20                            never_loaded_bones_file  \n",
++       "21  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "22  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "23  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "24  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "25  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "26  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "27  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "28  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "29  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "30  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "31  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "32  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "33  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "34  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "35  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "36  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "37  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "38  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "39  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "40  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "41  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "42  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "43  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "44  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "45  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "46  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "47  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "48  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "49  wizard_mode,discover_mode,never_loaded_bones_file  \n",
+        "\n",
+-       "[5 rows x 27 columns]"
++       "[50 rows x 27 columns]"
+       ],
+       "text/html": [
+        "<div>\n",
+@@ -247,1383 +517,1978 @@
+        "      <td>Neu</td>\n",
+        "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
+        "    </tr>\n",
++       "    <tr>\n",
++       "      <th>5</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2008-03-23 19:39:08</td>\n",
++       "      <td>2008-03-23 19:39:58</td>\n",
++       "      <td>3521212</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>5</td>\n",
++       "      <td>7</td>\n",
++       "      <td>-5</td>\n",
++       "      <td>1</td>\n",
++       "      <td>10</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>ascended</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>1</td>\n",
++       "      <td>got_amulet_of_yendor,in_end_game,on_astral_pla...</td>\n",
++       "      <td>43</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>6</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2009-03-03 11:13:36</td>\n",
++       "      <td>2009-03-03 11:23:03</td>\n",
++       "      <td>3741776</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>0</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>killed by a grid bug</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,pacifist,ill...</td>\n",
++       "      <td>50</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>38</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>7</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2009-03-03 11:23:06</td>\n",
++       "      <td>2009-07-16 18:52:26</td>\n",
++       "      <td>3827696</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>78</td>\n",
++       "      <td>0</td>\n",
++       "      <td>2</td>\n",
++       "      <td>2</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>killed by a grid bug</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,illiterate,p...</td>\n",
++       "      <td>237</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>133</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>8</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2009-10-17 15:49:11</td>\n",
++       "      <td>2010-05-15 08:54:13</td>\n",
++       "      <td>4040069</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>0</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>14</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>quit</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>392</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>417</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>9</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2010-12-07 15:28:43</td>\n",
++       "      <td>2011-01-07 20:20:00</td>\n",
++       "      <td>4361193</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>0</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>killed by kicking a wall</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>11</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>97</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>NaN</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>10</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2011-01-07 20:49:13</td>\n",
++       "      <td>2011-03-07 09:02:49</td>\n",
++       "      <td>4405666</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>9378</td>\n",
++       "      <td>2</td>\n",
++       "      <td>7</td>\n",
++       "      <td>28</td>\n",
++       "      <td>10</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>quit</td>\n",
++       "      <td>atheist,weaponless,illiterate,polypileless,pol...</td>\n",
++       "      <td>218</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>4519</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>wizard_mode</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>11</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2011-10-08 18:24:25</td>\n",
++       "      <td>2011-10-08 18:45:42</td>\n",
++       "      <td>4716721</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>0</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>15</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>quit</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>25</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>1128</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>wizard_mode</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>12</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2011-10-08 23:30:59</td>\n",
++       "      <td>2011-10-30 19:27:43</td>\n",
++       "      <td>4756163</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>11</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>15</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>quit</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>50</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>1916</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>wizard_mode</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>13</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2011-11-22 17:07:46</td>\n",
++       "      <td>2012-05-13 03:54:32</td>\n",
++       "      <td>4943035</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>6009</td>\n",
++       "      <td>0</td>\n",
++       "      <td>2</td>\n",
++       "      <td>23</td>\n",
++       "      <td>42</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>quit</td>\n",
++       "      <td>vegan,vegetarian,atheist,polypileless,polyself...</td>\n",
++       "      <td>1977</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>2788</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>wizard_mode</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>14</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2012-05-18 18:51:08</td>\n",
++       "      <td>2012-09-22 10:32:18</td>\n",
++       "      <td>5473479</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>1326</td>\n",
++       "      <td>0</td>\n",
++       "      <td>2</td>\n",
++       "      <td>2</td>\n",
++       "      <td>-4</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>killed by a black pudding</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,polypileless...</td>\n",
++       "      <td>760</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>3725</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>wizard_mode</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>15</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2012-09-22 10:47:17</td>\n",
++       "      <td>2012-09-22 10:51:17</td>\n",
++       "      <td>5473482</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>58</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>2</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a grid bug</td>\n",
++       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
++       "      <td>79</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>129</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>16</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2012-10-18 18:03:04</td>\n",
++       "      <td>2013-03-15 13:56:47</td>\n",
++       "      <td>5640832</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>550</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>6</td>\n",
++       "      <td>25</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>killed by a death ray</td>\n",
++       "      <td>atheist,weaponless,polyselfless,artifact_wishless</td>\n",
++       "      <td>1094</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>7895</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>wizard_mode</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>17</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2013-03-15 14:08:25</td>\n",
++       "      <td>2013-10-25 18:04:09</td>\n",
++       "      <td>5880363</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>4</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>7</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>quit</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,i...</td>\n",
++       "      <td>25</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>620</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>wizard_mode</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>18</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2014-03-03 16:09:21</td>\n",
++       "      <td>2015-03-25 15:14:56</td>\n",
++       "      <td>6219503</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>260</td>\n",
++       "      <td>0</td>\n",
++       "      <td>6</td>\n",
++       "      <td>6</td>\n",
++       "      <td>3</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>quit</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>18</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>622</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>19</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2015-12-08 10:08:36</td>\n",
++       "      <td>2015-12-08 10:09:21</td>\n",
++       "      <td>2237469</td>\n",
++       "      <td>3.6.0</td>\n",
++       "      <td>106</td>\n",
++       "      <td>0</td>\n",
++       "      <td>2</td>\n",
++       "      <td>2</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>killed by a grid bug</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>40</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>59</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>20</th>\n",
++       "      <td>Player0</td>\n",
++       "      <td>2016-05-30 08:11:38</td>\n",
++       "      <td>2017-10-30 20:21:37</td>\n",
++       "      <td>2780724</td>\n",
++       "      <td>3.6.0</td>\n",
++       "      <td>37</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>-1</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>killed by a newt</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>186</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>100</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>21</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-07-30 08:23:27</td>\n",
++       "      <td>2010-07-30 09:02:23</td>\n",
++       "      <td>4085412</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>2091</td>\n",
++       "      <td>2</td>\n",
++       "      <td>4</td>\n",
++       "      <td>4</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a dwarf</td>\n",
++       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
++       "      <td>1152</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>2308</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>22</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-07-30 09:02:50</td>\n",
++       "      <td>2010-07-31 17:39:29</td>\n",
++       "      <td>4086650</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>144</td>\n",
++       "      <td>0</td>\n",
++       "      <td>2</td>\n",
++       "      <td>3</td>\n",
++       "      <td>-17</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a guard, while sleeping</td>\n",
++       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
++       "      <td>299</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>851</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>23</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-07-31 17:39:41</td>\n",
++       "      <td>2010-07-31 17:40:35</td>\n",
++       "      <td>4086653</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>0</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>-1</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a water demon</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>6</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>50</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>24</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-07-31 17:40:43</td>\n",
++       "      <td>2010-07-31 18:18:57</td>\n",
++       "      <td>4086664</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>1806</td>\n",
++       "      <td>2</td>\n",
++       "      <td>5</td>\n",
++       "      <td>5</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a housecat</td>\n",
++       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
++       "      <td>2226</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>2288</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>25</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-07-31 18:19:02</td>\n",
++       "      <td>2010-07-31 18:24:20</td>\n",
++       "      <td>4086668</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>190</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>2</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a fox</td>\n",
++       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
++       "      <td>448</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>309</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>26</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-02 09:09:27</td>\n",
++       "      <td>2010-08-02 14:46:01</td>\n",
++       "      <td>4088569</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>761</td>\n",
++       "      <td>0</td>\n",
++       "      <td>5</td>\n",
++       "      <td>5</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a kitten</td>\n",
++       "      <td>atheist,polypileless,polyselfless,wishless,art...</td>\n",
++       "      <td>1171</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>1383</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>27</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-02 14:46:06</td>\n",
++       "      <td>2010-08-02 14:58:10</td>\n",
++       "      <td>4088575</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>657</td>\n",
++       "      <td>0</td>\n",
++       "      <td>3</td>\n",
++       "      <td>4</td>\n",
++       "      <td>31</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>quit</td>\n",
++       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
++       "      <td>1356</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>713</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>28</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-02 14:58:14</td>\n",
++       "      <td>2010-08-02 15:35:18</td>\n",
++       "      <td>4088585</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>1241</td>\n",
++       "      <td>0</td>\n",
++       "      <td>5</td>\n",
++       "      <td>6</td>\n",
++       "      <td>-1</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a giant ant</td>\n",
++       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
++       "      <td>1206</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>829</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>29</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-02 15:35:24</td>\n",
++       "      <td>2010-08-02 15:42:43</td>\n",
++       "      <td>4088588</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>659</td>\n",
++       "      <td>0</td>\n",
++       "      <td>4</td>\n",
++       "      <td>4</td>\n",
++       "      <td>19</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>poisoned by a rotted kobold corpse</td>\n",
++       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
++       "      <td>651</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>420</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>30</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-02 15:42:54</td>\n",
++       "      <td>2010-08-02 15:59:43</td>\n",
++       "      <td>4088592</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>1565</td>\n",
++       "      <td>0</td>\n",
++       "      <td>8</td>\n",
++       "      <td>8</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a pony</td>\n",
++       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
++       "      <td>1375</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>993</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>31</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-03 00:46:38</td>\n",
++       "      <td>2010-08-03 01:15:03</td>\n",
++       "      <td>4088980</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>1561</td>\n",
++       "      <td>0</td>\n",
++       "      <td>7</td>\n",
++       "      <td>8</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a rothe</td>\n",
++       "      <td>atheist,polypileless,polyselfless,wishless,art...</td>\n",
++       "      <td>1394</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>1696</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>32</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-03 01:15:11</td>\n",
++       "      <td>2010-08-03 01:35:23</td>\n",
++       "      <td>4088988</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>3690</td>\n",
++       "      <td>2</td>\n",
++       "      <td>8</td>\n",
++       "      <td>8</td>\n",
++       "      <td>-8</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a gnomish wizard</td>\n",
++       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
++       "      <td>1935</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>1188</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>33</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-03 01:35:28</td>\n",
++       "      <td>2010-08-03 02:47:49</td>\n",
++       "      <td>4089071</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>4497</td>\n",
++       "      <td>4</td>\n",
++       "      <td>2</td>\n",
++       "      <td>6</td>\n",
++       "      <td>-8</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a giant mimic, while praying</td>\n",
++       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
++       "      <td>4295</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>4319</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>34</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-03 02:48:04</td>\n",
++       "      <td>2010-08-03 07:47:56</td>\n",
++       "      <td>4089227</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>5750</td>\n",
++       "      <td>0</td>\n",
++       "      <td>11</td>\n",
++       "      <td>11</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a rope golem</td>\n",
++       "      <td>illiterate,polypileless,wishless,artifact_wish...</td>\n",
++       "      <td>2649</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>14124</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>35</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-03 07:48:02</td>\n",
++       "      <td>2010-08-03 08:03:01</td>\n",
++       "      <td>4089232</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>2438</td>\n",
++       "      <td>2</td>\n",
++       "      <td>5</td>\n",
++       "      <td>5</td>\n",
++       "      <td>-8</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a wand</td>\n",
++       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
++       "      <td>1063</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>895</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>36</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-03 08:03:07</td>\n",
++       "      <td>2010-08-03 08:52:41</td>\n",
++       "      <td>4089253</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>8229</td>\n",
++       "      <td>4</td>\n",
++       "      <td>8</td>\n",
++       "      <td>10</td>\n",
++       "      <td>-1</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a barrow wight</td>\n",
++       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
++       "      <td>3133</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>2971</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>37</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-03 08:52:49</td>\n",
++       "      <td>2010-08-03 14:22:09</td>\n",
++       "      <td>4089502</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>1620</td>\n",
++       "      <td>0</td>\n",
++       "      <td>6</td>\n",
++       "      <td>7</td>\n",
++       "      <td>-4</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a gnome lord</td>\n",
++       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
++       "      <td>1007</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>934</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>38</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-03 14:22:28</td>\n",
++       "      <td>2010-08-03 14:53:45</td>\n",
++       "      <td>4089509</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>3886</td>\n",
++       "      <td>0</td>\n",
++       "      <td>7</td>\n",
++       "      <td>8</td>\n",
++       "      <td>-1</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a panther, while praying</td>\n",
++       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
++       "      <td>1378</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>1860</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>39</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-04 02:17:47</td>\n",
++       "      <td>2010-08-04 02:37:57</td>\n",
++       "      <td>4089909</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>730</td>\n",
++       "      <td>0</td>\n",
++       "      <td>3</td>\n",
++       "      <td>3</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a kitten</td>\n",
++       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
++       "      <td>504</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>1199</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>40</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-04 02:38:03</td>\n",
++       "      <td>2010-08-04 06:48:42</td>\n",
++       "      <td>4090106</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>5577</td>\n",
++       "      <td>2</td>\n",
++       "      <td>4</td>\n",
++       "      <td>5</td>\n",
++       "      <td>-10</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a soldier ant</td>\n",
++       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
++       "      <td>5149</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>15015</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>41</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-04 06:48:48</td>\n",
++       "      <td>2010-08-04 07:07:44</td>\n",
++       "      <td>4090112</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>1153</td>\n",
++       "      <td>2</td>\n",
++       "      <td>4</td>\n",
++       "      <td>4</td>\n",
++       "      <td>-1</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a magic missile</td>\n",
++       "      <td>atheist,illiterate,polypileless,polyselfless,w...</td>\n",
++       "      <td>1271</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>1123</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>42</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-04 07:09:18</td>\n",
++       "      <td>2010-08-04 08:14:10</td>\n",
++       "      <td>4090137</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>1511</td>\n",
++       "      <td>0</td>\n",
++       "      <td>2</td>\n",
++       "      <td>3</td>\n",
++       "      <td>-2</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a magic missile</td>\n",
++       "      <td>illiterate,polypileless,polyselfless,wishless,...</td>\n",
++       "      <td>1957</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>3877</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>43</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-04 08:14:15</td>\n",
++       "      <td>2010-08-05 01:40:15</td>\n",
++       "      <td>4091234</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>2598</td>\n",
++       "      <td>0</td>\n",
++       "      <td>6</td>\n",
++       "      <td>7</td>\n",
++       "      <td>-4</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a rope golem, while helpless</td>\n",
++       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
++       "      <td>2616</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>3923</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>44</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-05 01:40:21</td>\n",
++       "      <td>2010-08-05 04:22:02</td>\n",
++       "      <td>4091321</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>7453</td>\n",
++       "      <td>2</td>\n",
++       "      <td>6</td>\n",
++       "      <td>6</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a fire ant</td>\n",
++       "      <td>polypileless,wishless,artifact_wishless,genoci...</td>\n",
++       "      <td>3847</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>9656</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>45</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-05 04:22:07</td>\n",
++       "      <td>2010-08-05 05:50:04</td>\n",
++       "      <td>4091348</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>2248</td>\n",
++       "      <td>2</td>\n",
++       "      <td>4</td>\n",
++       "      <td>4</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a rothe</td>\n",
++       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
++       "      <td>2147</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>5249</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>46</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-05 05:50:09</td>\n",
++       "      <td>2010-08-05 05:51:38</td>\n",
++       "      <td>4091349</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>7</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>-3</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>fell onto a sink</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>98</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>80</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>47</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-05 05:51:46</td>\n",
++       "      <td>2010-08-05 07:09:20</td>\n",
++       "      <td>4091464</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>992</td>\n",
++       "      <td>0</td>\n",
++       "      <td>3</td>\n",
++       "      <td>4</td>\n",
++       "      <td>-1</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a little dog</td>\n",
++       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
++       "      <td>1557</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>4642</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>48</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-05 07:09:25</td>\n",
++       "      <td>2010-08-05 07:16:54</td>\n",
++       "      <td>4091466</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>157</td>\n",
++       "      <td>0</td>\n",
++       "      <td>2</td>\n",
++       "      <td>2</td>\n",
++       "      <td>-2</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a hallucinogen-distorted fox</td>\n",
++       "      <td>vegan,vegetarian,atheist,illiterate,polypilele...</td>\n",
++       "      <td>531</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>436</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>49</th>\n",
++       "      <td>Player1</td>\n",
++       "      <td>2010-08-05 07:16:57</td>\n",
++       "      <td>2010-08-11 06:41:32</td>\n",
++       "      <td>4095604</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>85380</td>\n",
++       "      <td>2</td>\n",
++       "      <td>8</td>\n",
++       "      <td>14</td>\n",
++       "      <td>-9</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>killed by a priest of Mars, while paralyzed by...</td>\n",
++       "      <td>polypileless,wishless,artifact_wishless,genoci...</td>\n",
++       "      <td>26789</td>\n",
++       "      <td>got_luckstone,finished_sokoban</td>\n",
++       "      <td>74048</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "  </tbody>\n",
++       "</table>\n",
++       "<p>50 rows × 27 columns</p>\n",
++       "</div>"
++      ]
++     },
++     "execution_count": 4,
++     "metadata": {},
++     "output_type": "execute_result"
++    }
++   ],
++   "execution_count": 4
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-09T02:55:04.953549Z",
++     "start_time": "2025-03-09T02:55:04.852649Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Criteria 1: At least 20 total ascensions on public servers\n",
++    "ascended_games = df[df['death'] == \"ascended\"]\n",
++    "total_ascensions = ascended_games.groupby('name').size()\n",
++    "criterion_1 = total_ascensions >= 20\n",
++    "\n",
++    "criterion_1 = total_ascensions[criterion_1].index\n",
++    "\n",
++    "\n",
++    "# # Extract all games of these players from the full dataset\n",
++    "# temp = df[df['name'].isin(criterion_1)]\n",
++    "# \n",
++    "# criteria_1 = list(temp['gameid']) \n",
++    "\n"
++   ],
++   "id": "1ab930177a49a1e4",
++   "outputs": [],
++   "execution_count": 38
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-09T02:56:10.632426Z",
++     "start_time": "2025-03-09T02:55:05.843781Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Criterion 2: At least 8 consecutive ascensions\n",
++    "# Sort by player and end time\n",
++    "df = df.sort_values(by=['name', 'realtime'])\n",
++    "\n",
++    "# Identify consecutive ascensions\n",
++    "def longest_consecutive_ascensions(player_games):\n",
++    "    count = 0\n",
++    "    max_streak = 0\n",
++    "    for _, row in player_games.iterrows():\n",
++    "        if row['death'] == \"ascended\":\n",
++    "            count += 1\n",
++    "            max_streak = max(max_streak, count)\n",
++    "        else:\n",
++    "            count = 0\n",
++    "    return max_streak\n",
++    "\n",
++    "# Compute longest streak per player\n",
++    "streaks = df.groupby('name').apply(longest_consecutive_ascensions)\n",
++    "criterion_2 = streaks >= 8\n",
++    "\n",
++    "# Extract players with at least 8 consecutive ascensions\n",
++    "criterion_2 = streaks[criterion_2].index\n",
++    "\n",
++    "print(len(criterion_2))"
++   ],
++   "id": "5f3d2de07db62136",
++   "outputs": [
++    {
++     "name": "stdout",
++     "output_type": "stream",
++     "text": [
++      "272\n"
++     ]
++    },
++    {
++     "name": "stderr",
++     "output_type": "stream",
++     "text": [
++      "/tmp/ipykernel_22395/3333909036.py:18: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
++      "  streaks = df.groupby('name').apply(longest_consecutive_ascensions)\n"
++     ]
++    }
++   ],
++   "execution_count": 39
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-09T02:56:34.296226Z",
++     "start_time": "2025-03-09T02:56:34.168922Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "ascended_games = df[df['death'] == \"ascended\"]\n",
++    "\n",
++    "criterion_3 = ascended_games[ascended_games['realtime'] <= 18000]['name'].unique()\n",
++    "\n",
++    "criterion_4 = ascended_games[ascended_games['turns'] < 10000]['name'].unique()\n",
++    "\n",
++    "print(len(criterion_3))\n",
++    "print(len(criterion_4))\n"
++   ],
++   "id": "fad8cda00a13024c",
++   "outputs": [
++    {
++     "name": "stdout",
++     "output_type": "stream",
++     "text": [
++      "106\n",
++      "30\n"
++     ]
++    }
++   ],
++   "execution_count": 40
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-09T02:56:36.182115Z",
++     "start_time": "2025-03-09T02:56:36.152467Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "def meets_conduct_criteria(conduct_str):\n",
++    "    if pd.isna(conduct_str):\n",
++    "        return False\n",
++    "    conducts = conduct_str.split(',')\n",
++    "    difficult_conducts = {\"pacifist\", \"foodless\", \"illiterate\"}\n",
++    "    return any(c in conducts for c in difficult_conducts) or len(conducts) >= 7\n",
++    "\n",
++    "# Identify players who meet the conduct criteria\n",
++    "criterion_5 = ascended_games[ascended_games['conduct'].apply(meets_conduct_criteria)]['name'].unique()\n",
++    "\n",
++    "print(len(criterion_5))"
++   ],
++   "id": "1c813a7669a4d224",
++   "outputs": [
++    {
++     "name": "stdout",
++     "output_type": "stream",
++     "text": [
++      "154\n"
++     ]
++    }
++   ],
++   "execution_count": 41
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-09T02:56:37.196034Z",
++     "start_time": "2025-03-09T02:56:37.192399Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Combine strict criteria with AND instead of OR\n",
++    "strict_expert_players = set(criterion_1) & set(criterion_2) & (set(criterion_3) | set(criterion_4) | set(criterion_5))\n",
++    "print(len(strict_expert_players))"
++   ],
++   "id": "c723cd7829428b86",
++   "outputs": [
++    {
++     "name": "stdout",
++     "output_type": "stream",
++     "text": [
++      "54\n"
++     ]
++    }
++   ],
++   "execution_count": 42
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-09T04:01:20.350710Z",
++     "start_time": "2025-03-09T04:01:20.288212Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Combine conditions for expert data\n",
++    "expert_players =  set(criterion_1) & set(criterion_2) & (set(criterion_3) | set(criterion_4) | set(criterion_5))\n",
++    "expert_df = df[df['name'].isin(expert_players)]\n",
++    "\n",
++    "expert_games = expert_df[\"gameid\"].unique().tolist()\n",
++    "\n",
++    "expert_df"
++   ],
++   "id": "1a6500558450e0b1",
++   "outputs": [
++    {
++     "data": {
++      "text/plain": [
++       "               name            starttime              endtime   gameid  \\\n",
++       "71069    Player1092  2011-10-31 17:17:41  2011-10-31 17:17:53  4757880   \n",
++       "71337    Player1092  2014-12-04 12:49:28  2014-12-04 12:49:57  6169846   \n",
++       "70433    Player1092  2010-01-04 20:44:53  2010-01-04 20:45:14  3944067   \n",
++       "71130    Player1092  2012-02-18 00:36:43  2012-02-18 00:37:09  4875796   \n",
++       "70926    Player1092  2011-04-13 23:36:28  2011-04-13 23:36:51  4428783   \n",
++       "...             ...                  ...                  ...      ...   \n",
++       "1485895   Player937  2016-01-15 00:43:51  2016-01-15 13:02:36  2269866   \n",
++       "1485989   Player937  2016-09-22 23:36:01  2016-09-24 03:26:38  2416852   \n",
++       "1485962   Player937  2016-07-11 14:04:07  2016-07-11 22:45:17  2372796   \n",
++       "1485865   Player937  2015-12-10 07:51:02  2015-12-11 13:54:28  2239235   \n",
++       "1485900   Player937  2016-01-29 04:45:43  2016-01-29 17:05:07  2276879   \n",
++       "\n",
++       "        version   points  deathdnum  deathlev  maxlvl   hp  ...  gender  \\\n",
++       "71069     3.4.3       20          0         1       1   -1  ...     Mal   \n",
++       "71337     3.4.3        0          0         1       1   -1  ...     Fem   \n",
++       "70433     3.4.3        0          0         1       1   11  ...     Fem   \n",
++       "71130     3.4.3        4          0         1       1    0  ...     Mal   \n",
++       "70926     3.4.3      200          0         5       5   15  ...     Fem   \n",
++       "...         ...      ...        ...       ...     ...  ...  ...     ...   \n",
++       "1485895   3.6.0  2059002          7        -5      51  296  ...     Mal   \n",
++       "1485989   3.6.0  1289508          7        -5      49  372  ...     Fem   \n",
++       "1485962   3.6.0  1545026          7        -5      48  278  ...     Mal   \n",
++       "1485865   3.6.0  2512338          7        -5      50  266  ...     Mal   \n",
++       "1485900   3.6.0  1569368          7        -5      46  297  ...     Fem   \n",
++       "\n",
++       "         align                        death  \\\n",
++       "71069      Law  killed by an electric shock   \n",
++       "71337      Neu   killed by a boiling potion   \n",
++       "70433      Neu                      escaped   \n",
++       "71130      Neu              fell into a pit   \n",
++       "70926      Law                         quit   \n",
++       "...        ...                          ...   \n",
++       "1485895    Neu                     ascended   \n",
++       "1485989    Cha                     ascended   \n",
++       "1485962    Law                     ascended   \n",
++       "1485865    Neu                     ascended   \n",
++       "1485900    Law                     ascended   \n",
++       "\n",
++       "                                                   conduct  turns  \\\n",
++       "71069    foodless,vegan,vegetarian,atheist,weaponless,p...      6   \n",
++       "71337    foodless,vegan,vegetarian,atheist,weaponless,p...      3   \n",
++       "70433    foodless,vegan,vegetarian,atheist,weaponless,p...     50   \n",
++       "71130    foodless,vegan,vegetarian,atheist,illiterate,p...     31   \n",
++       "70926    foodless,vegan,vegetarian,atheist,weaponless,p...     28   \n",
++       "...                                                    ...    ...   \n",
++       "1485895                                                NaN  37781   \n",
++       "1485989  polypileless,polyselfless,wishless,artifact_wi...  65106   \n",
++       "1485962        polypileless,polyselfless,artifact_wishless  28153   \n",
++       "1485865                                       polyselfless  43477   \n",
++       "1485900                                  artifact_wishless  31017   \n",
++       "\n",
++       "                                                   achieve  realtime gender0  \\\n",
++       "71069                                                  NaN         7     Mal   \n",
++       "71337                                                  NaN        15     Fem   \n",
++       "70433                                                  NaN        16     Fem   \n",
++       "71130                                                  NaN        16     Mal   \n",
++       "70926                                                  NaN        20     Fem   \n",
++       "...                                                    ...       ...     ...   \n",
++       "1485895  got_bell_of_opening,entered_gehennom,got_cande...   5563319     Mal   \n",
++       "1485989  got_bell_of_opening,entered_gehennom,got_cande...   5681727     Fem   \n",
++       "1485962  got_bell_of_opening,entered_gehennom,got_cande...   6241259     Mal   \n",
++       "1485865  got_bell_of_opening,entered_gehennom,got_cande...   6715694     Mal   \n",
++       "1485900  got_bell_of_opening,entered_gehennom,got_cande...  11280357     Mal   \n",
++       "\n",
++       "        align0                                              flags  \n",
++       "71069      Law                                                NaN  \n",
++       "71337      Neu                                                NaN  \n",
++       "70433      Neu  wizard_mode,discover_mode,never_loaded_bones_file  \n",
++       "71130      Neu                                                NaN  \n",
++       "70926      Law                                                NaN  \n",
++       "...        ...                                                ...  \n",
++       "1485895    Neu                                                NaN  \n",
++       "1485989    Law                                                NaN  \n",
++       "1485962    Law                                                NaN  \n",
++       "1485865    Neu                            never_loaded_bones_file  \n",
++       "1485900    Law                                                NaN  \n",
++       "\n",
++       "[28785 rows x 27 columns]"
++      ],
++      "text/html": [
++       "<div>\n",
++       "<style scoped>\n",
++       "    .dataframe tbody tr th:only-of-type {\n",
++       "        vertical-align: middle;\n",
++       "    }\n",
++       "\n",
++       "    .dataframe tbody tr th {\n",
++       "        vertical-align: top;\n",
++       "    }\n",
++       "\n",
++       "    .dataframe thead th {\n",
++       "        text-align: right;\n",
++       "    }\n",
++       "</style>\n",
++       "<table border=\"1\" class=\"dataframe\">\n",
++       "  <thead>\n",
++       "    <tr style=\"text-align: right;\">\n",
++       "      <th></th>\n",
++       "      <th>name</th>\n",
++       "      <th>starttime</th>\n",
++       "      <th>endtime</th>\n",
++       "      <th>gameid</th>\n",
++       "      <th>version</th>\n",
++       "      <th>points</th>\n",
++       "      <th>deathdnum</th>\n",
++       "      <th>deathlev</th>\n",
++       "      <th>maxlvl</th>\n",
++       "      <th>hp</th>\n",
++       "      <th>...</th>\n",
++       "      <th>gender</th>\n",
++       "      <th>align</th>\n",
++       "      <th>death</th>\n",
++       "      <th>conduct</th>\n",
++       "      <th>turns</th>\n",
++       "      <th>achieve</th>\n",
++       "      <th>realtime</th>\n",
++       "      <th>gender0</th>\n",
++       "      <th>align0</th>\n",
++       "      <th>flags</th>\n",
++       "    </tr>\n",
++       "  </thead>\n",
++       "  <tbody>\n",
++       "    <tr>\n",
++       "      <th>71069</th>\n",
++       "      <td>Player1092</td>\n",
++       "      <td>2011-10-31 17:17:41</td>\n",
++       "      <td>2011-10-31 17:17:53</td>\n",
++       "      <td>4757880</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>20</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>-1</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>killed by an electric shock</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>6</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>7</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>NaN</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>71337</th>\n",
++       "      <td>Player1092</td>\n",
++       "      <td>2014-12-04 12:49:28</td>\n",
++       "      <td>2014-12-04 12:49:57</td>\n",
++       "      <td>6169846</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>0</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>-1</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>killed by a boiling potion</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>3</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>15</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>NaN</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>70433</th>\n",
++       "      <td>Player1092</td>\n",
++       "      <td>2010-01-04 20:44:53</td>\n",
++       "      <td>2010-01-04 20:45:14</td>\n",
++       "      <td>3944067</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>0</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>11</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>escaped</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>50</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>16</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>wizard_mode,discover_mode,never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>71130</th>\n",
++       "      <td>Player1092</td>\n",
++       "      <td>2012-02-18 00:36:43</td>\n",
++       "      <td>2012-02-18 00:37:09</td>\n",
++       "      <td>4875796</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>4</td>\n",
++       "      <td>0</td>\n",
++       "      <td>1</td>\n",
++       "      <td>1</td>\n",
++       "      <td>0</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>fell into a pit</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,illiterate,p...</td>\n",
++       "      <td>31</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>16</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>NaN</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>70926</th>\n",
++       "      <td>Player1092</td>\n",
++       "      <td>2011-04-13 23:36:28</td>\n",
++       "      <td>2011-04-13 23:36:51</td>\n",
++       "      <td>4428783</td>\n",
++       "      <td>3.4.3</td>\n",
++       "      <td>200</td>\n",
++       "      <td>0</td>\n",
++       "      <td>5</td>\n",
++       "      <td>5</td>\n",
++       "      <td>15</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>quit</td>\n",
++       "      <td>foodless,vegan,vegetarian,atheist,weaponless,p...</td>\n",
++       "      <td>28</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>20</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>NaN</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>...</th>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "      <td>...</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>1485895</th>\n",
++       "      <td>Player937</td>\n",
++       "      <td>2016-01-15 00:43:51</td>\n",
++       "      <td>2016-01-15 13:02:36</td>\n",
++       "      <td>2269866</td>\n",
++       "      <td>3.6.0</td>\n",
++       "      <td>2059002</td>\n",
++       "      <td>7</td>\n",
++       "      <td>-5</td>\n",
++       "      <td>51</td>\n",
++       "      <td>296</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>ascended</td>\n",
++       "      <td>NaN</td>\n",
++       "      <td>37781</td>\n",
++       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
++       "      <td>5563319</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>NaN</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>1485989</th>\n",
++       "      <td>Player937</td>\n",
++       "      <td>2016-09-22 23:36:01</td>\n",
++       "      <td>2016-09-24 03:26:38</td>\n",
++       "      <td>2416852</td>\n",
++       "      <td>3.6.0</td>\n",
++       "      <td>1289508</td>\n",
++       "      <td>7</td>\n",
++       "      <td>-5</td>\n",
++       "      <td>49</td>\n",
++       "      <td>372</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Cha</td>\n",
++       "      <td>ascended</td>\n",
++       "      <td>polypileless,polyselfless,wishless,artifact_wi...</td>\n",
++       "      <td>65106</td>\n",
++       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
++       "      <td>5681727</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>NaN</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>1485962</th>\n",
++       "      <td>Player937</td>\n",
++       "      <td>2016-07-11 14:04:07</td>\n",
++       "      <td>2016-07-11 22:45:17</td>\n",
++       "      <td>2372796</td>\n",
++       "      <td>3.6.0</td>\n",
++       "      <td>1545026</td>\n",
++       "      <td>7</td>\n",
++       "      <td>-5</td>\n",
++       "      <td>48</td>\n",
++       "      <td>278</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>ascended</td>\n",
++       "      <td>polypileless,polyselfless,artifact_wishless</td>\n",
++       "      <td>28153</td>\n",
++       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
++       "      <td>6241259</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>NaN</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>1485865</th>\n",
++       "      <td>Player937</td>\n",
++       "      <td>2015-12-10 07:51:02</td>\n",
++       "      <td>2015-12-11 13:54:28</td>\n",
++       "      <td>2239235</td>\n",
++       "      <td>3.6.0</td>\n",
++       "      <td>2512338</td>\n",
++       "      <td>7</td>\n",
++       "      <td>-5</td>\n",
++       "      <td>50</td>\n",
++       "      <td>266</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>ascended</td>\n",
++       "      <td>polyselfless</td>\n",
++       "      <td>43477</td>\n",
++       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
++       "      <td>6715694</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Neu</td>\n",
++       "      <td>never_loaded_bones_file</td>\n",
++       "    </tr>\n",
++       "    <tr>\n",
++       "      <th>1485900</th>\n",
++       "      <td>Player937</td>\n",
++       "      <td>2016-01-29 04:45:43</td>\n",
++       "      <td>2016-01-29 17:05:07</td>\n",
++       "      <td>2276879</td>\n",
++       "      <td>3.6.0</td>\n",
++       "      <td>1569368</td>\n",
++       "      <td>7</td>\n",
++       "      <td>-5</td>\n",
++       "      <td>46</td>\n",
++       "      <td>297</td>\n",
++       "      <td>...</td>\n",
++       "      <td>Fem</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>ascended</td>\n",
++       "      <td>artifact_wishless</td>\n",
++       "      <td>31017</td>\n",
++       "      <td>got_bell_of_opening,entered_gehennom,got_cande...</td>\n",
++       "      <td>11280357</td>\n",
++       "      <td>Mal</td>\n",
++       "      <td>Law</td>\n",
++       "      <td>NaN</td>\n",
++       "    </tr>\n",
+        "  </tbody>\n",
+        "</table>\n",
+-       "<p>5 rows × 27 columns</p>\n",
++       "<p>28785 rows × 27 columns</p>\n",
+        "</div>"
+       ]
+      },
+-     "execution_count": 55,
+-     "metadata": {},
+-     "output_type": "execute_result"
+-    }
+-   ],
+-   "execution_count": 55
+-  },
+-  {
+-   "metadata": {
+-    "ExecuteTime": {
+-     "end_time": "2025-03-05T23:19:24.710355Z",
+-     "start_time": "2025-03-05T23:19:24.540074Z"
+-    }
+-   },
+-   "cell_type": "code",
+-   "source": [
+-    "# Criteria 1: At least 20 total ascensions on public servers\n",
+-    "ascended_games = df[df['death'] == \"ascended\"]\n",
+-    "total_ascensions = ascended_games.groupby('name').size()\n",
+-    "criterion_1 = total_ascensions >= 20\n",
+-    "\n",
+-    "criterion_1 = total_ascensions[criterion_1].index\n",
+-    "\n",
+-    "\n",
+-    "# Extract all games of these players from the full dataset\n",
+-    "temp = df[df['name'].isin(criterion_1)]\n",
+-    "\n",
+-    "criteria_1 = list(temp['gameid']) \n",
+-    "\n",
+-    "criteria_1"
+-   ],
+-   "id": "1ab930177a49a1e4",
+-   "outputs": [
+-    {
+-     "data": {
+-      "text/plain": [
+-       "[3764145,\n",
+-       " 3767712,\n",
+-       " 3795805,\n",
+-       " 3745665,\n",
+-       " 3747611,\n",
+-       " 3747598,\n",
+-       " 3748236,\n",
+-       " 3764155,\n",
+-       " 3747651,\n",
+-       " 3760062,\n",
+-       " 3748213,\n",
+-       " 3748231,\n",
+-       " 3745659,\n",
+-       " 3747674,\n",
+-       " 3746562,\n",
+-       " 3752315,\n",
+-       " 3745341,\n",
+-       " 3764142,\n",
+-       " 3747583,\n",
+-       " 3746545,\n",
+-       " 3764715,\n",
+-       " 3745643,\n",
+-       " 3994118,\n",
+-       " 3752269,\n",
+-       " 3962728,\n",
+-       " 3747531,\n",
+-       " 3750587,\n",
+-       " 3767710,\n",
+-       " 3961924,\n",
+-       " 3764650,\n",
+-       " 3960820,\n",
+-       " 3952076,\n",
+-       " 3765439,\n",
+-       " 3942950,\n",
+-       " 3946003,\n",
+-       " 3944002,\n",
+-       " 3782924,\n",
+-       " 3939267,\n",
+-       " 3771350,\n",
+-       " 3787474,\n",
+-       " 3818089,\n",
+-       " 3772795,\n",
+-       " 3764080,\n",
+-       " 3785662,\n",
+-       " 3754161,\n",
+-       " 3767113,\n",
+-       " 3762879,\n",
+-       " 3781061,\n",
+-       " 3795796,\n",
+-       " 3759307,\n",
+-       " 3743868,\n",
+-       " 2349275,\n",
+-       " 2818160,\n",
+-       " 2647320,\n",
+-       " 2332738,\n",
+-       " 2135387,\n",
+-       " 2296869,\n",
+-       " 6120072,\n",
+-       " 42028,\n",
+-       " 6120078,\n",
+-       " 2315885,\n",
+-       " 2722317,\n",
+-       " 2137629,\n",
+-       " 6124129,\n",
+-       " 2315309,\n",
+-       " 2315316,\n",
+-       " 2296653,\n",
+-       " 2722316,\n",
+-       " 2843691,\n",
+-       " 2699255,\n",
+-       " 2798748,\n",
+-       " 2785682,\n",
+-       " 2314287,\n",
+-       " 2367971,\n",
+-       " 2285346,\n",
+-       " 2347564,\n",
+-       " 2079242,\n",
+-       " 6120091,\n",
+-       " 1806112,\n",
+-       " 2643509,\n",
+-       " 2520633,\n",
+-       " 2647322,\n",
+-       " 2140055,\n",
+-       " 2331947,\n",
+-       " 2331857,\n",
+-       " 2108786,\n",
+-       " 252537,\n",
+-       " 6124427,\n",
+-       " 2347346,\n",
+-       " 6124185,\n",
+-       " 6128014,\n",
+-       " 6186287,\n",
+-       " 1881903,\n",
+-       " 6110621,\n",
+-       " 6125414,\n",
+-       " 2647321,\n",
+-       " 6102513,\n",
+-       " 5722348,\n",
+-       " 2331186,\n",
+-       " 1819254,\n",
+-       " 5492086,\n",
+-       " 6110617,\n",
+-       " 6124357,\n",
+-       " 2699290,\n",
+-       " 6123717,\n",
+-       " 1803810,\n",
+-       " 2752182,\n",
+-       " 2116903,\n",
+-       " 6124188,\n",
+-       " 6128202,\n",
+-       " 6120055,\n",
+-       " 2347604,\n",
+-       " 2116896,\n",
+-       " 2137583,\n",
+-       " 6117242,\n",
+-       " 2727937,\n",
+-       " 2630703,\n",
+-       " 2116900,\n",
+-       " 5683956,\n",
+-       " 2933777,\n",
+-       " 2136061,\n",
+-       " 2782042,\n",
+-       " 2137646,\n",
+-       " 2478096,\n",
+-       " 6121781,\n",
+-       " 6117306,\n",
+-       " 6124179,\n",
+-       " 2647319,\n",
+-       " 2465708,\n",
+-       " 1788876,\n",
+-       " 2333151,\n",
+-       " 1848117,\n",
+-       " 2646681,\n",
+-       " 2117360,\n",
+-       " 2520129,\n",
+-       " 6120131,\n",
+-       " 1849446,\n",
+-       " 1793409,\n",
+-       " 6123514,\n",
+-       " 1849428,\n",
+-       " 5722347,\n",
+-       " 6124981,\n",
+-       " 1779390,\n",
+-       " 2078469,\n",
+-       " 6121802,\n",
+-       " 2135415,\n",
+-       " 6124076,\n",
+-       " 2702709,\n",
+-       " 2780342,\n",
+-       " 1781778,\n",
+-       " 2520710,\n",
+-       " 6120088,\n",
+-       " 1780871,\n",
+-       " 1806110,\n",
+-       " 6124128,\n",
+-       " 6102163,\n",
+-       " 6124074,\n",
+-       " 2112793,\n",
+-       " 6117236,\n",
+-       " 2137581,\n",
+-       " 2081252,\n",
+-       " 6120035,\n",
+-       " 2311415,\n",
+-       " 2135413,\n",
+-       " 2630710,\n",
+-       " 1815966,\n",
+-       " 2285353,\n",
+-       " 2477221,\n",
+-       " 6124183,\n",
+-       " 244202,\n",
+-       " 2535975,\n",
+-       " 2103338,\n",
+-       " 2347603,\n",
+-       " 2135933,\n",
+-       " 2374317,\n",
+-       " 5488546,\n",
+-       " 2137611,\n",
+-       " 2855440,\n",
+-       " 1848115,\n",
+-       " 6125419,\n",
+-       " 1793396,\n",
+-       " 2855883,\n",
+-       " 2722322,\n",
+-       " 2135930,\n",
+-       " 5496657,\n",
+-       " 6120084,\n",
+-       " 2661708,\n",
+-       " 2075407,\n",
+-       " 6120128,\n",
+-       " 2296647,\n",
+-       " 2078654,\n",
+-       " 2116979,\n",
+-       " 266505,\n",
+-       " 6120071,\n",
+-       " 2742311,\n",
+-       " 2857327,\n",
+-       " 254535,\n",
+-       " 2096296,\n",
+-       " 6124181,\n",
+-       " 1842628,\n",
+-       " 2370305,\n",
+-       " 1815140,\n",
+-       " 252556,\n",
+-       " 1881896,\n",
+-       " 2363821,\n",
+-       " 1797306,\n",
+-       " 6183823,\n",
+-       " 2860663,\n",
+-       " 2699254,\n",
+-       " 6120112,\n",
+-       " 2347595,\n",
+-       " 2349254,\n",
+-       " 1849432,\n",
+-       " 6117255,\n",
+-       " 2139952,\n",
+-       " 6124198,\n",
+-       " 5722320,\n",
+-       " 5492391,\n",
+-       " 2332780,\n",
+-       " 5496701,\n",
+-       " 1813213,\n",
+-       " 1839618,\n",
+-       " 2702663,\n",
+-       " 2644682,\n",
+-       " 6124622,\n",
+-       " 2116907,\n",
+-       " 252593,\n",
+-       " 2315464,\n",
+-       " 2333150,\n",
+-       " 2078467,\n",
+-       " 2116367,\n",
+-       " 2135376,\n",
+-       " 2463432,\n",
+-       " 1792432,\n",
+-       " 2137580,\n",
+-       " 2486065,\n",
+-       " 5492084,\n",
+-       " 6128466,\n",
+-       " 5487843,\n",
+-       " 2137586,\n",
+-       " 2722478,\n",
+-       " 6120076,\n",
+-       " 6124631,\n",
+-       " 5497528,\n",
+-       " 43357,\n",
+-       " 267080,\n",
+-       " 2331861,\n",
+-       " 5491483,\n",
+-       " 2485888,\n",
+-       " 6124174,\n",
+-       " 5683939,\n",
+-       " 1819878,\n",
+-       " 42989,\n",
+-       " 2289770,\n",
+-       " 2104845,\n",
+-       " 2735102,\n",
+-       " 5491627,\n",
+-       " 5488587,\n",
+-       " 1813217,\n",
+-       " 237364,\n",
+-       " 2108794,\n",
+-       " 1783859,\n",
+-       " 1792720,\n",
+-       " 2104760,\n",
+-       " 2138698,\n",
+-       " 2109385,\n",
+-       " 1813222,\n",
+-       " 5496693,\n",
+-       " 2081247,\n",
+-       " 2136070,\n",
+-       " 6124095,\n",
+-       " 2363280,\n",
+-       " 2363140,\n",
+-       " 6128207,\n",
+-       " 2347599,\n",
+-       " 6186286,\n",
+-       " 1810403,\n",
+-       " 2773811,\n",
+-       " 1800738,\n",
+-       " 226012,\n",
+-       " 5488888,\n",
+-       " 2362671,\n",
+-       " 1803803,\n",
+-       " 5512158,\n",
+-       " 2075450,\n",
+-       " 2699260,\n",
+-       " 2315301,\n",
+-       " 1806108,\n",
+-       " 2644573,\n",
+-       " 2535990,\n",
+-       " 2285352,\n",
+-       " 5497309,\n",
+-       " 2104868,\n",
+-       " 2313680,\n",
+-       " 226024,\n",
+-       " 2333342,\n",
+-       " 2730024,\n",
+-       " 2332739,\n",
+-       " 2349278,\n",
+-       " 6121621,\n",
+-       " 6124126,\n",
+-       " 5767348,\n",
+-       " 6120141,\n",
+-       " 250919,\n",
+-       " 5491489,\n",
+-       " 2599714,\n",
+-       " 2363276,\n",
+-       " 5516781,\n",
+-       " 2788683,\n",
+-       " 2077450,\n",
+-       " 6117233,\n",
+-       " 1781776,\n",
+-       " 5882441,\n",
+-       " 1779387,\n",
+-       " 2644013,\n",
+-       " 2098973,\n",
+-       " 2520650,\n",
+-       " 6120027,\n",
+-       " 6124930,\n",
+-       " 2126771,\n",
+-       " 2371158,\n",
+-       " 2313855,\n",
+-       " 2331946,\n",
+-       " 6121778,\n",
+-       " 2299641,\n",
+-       " 5491586,\n",
+-       " 5491560,\n",
+-       " 5492387,\n",
+-       " 5467069,\n",
+-       " 6186236,\n",
+-       " 254667,\n",
+-       " 2301498,\n",
+-       " 2464026,\n",
+-       " 2486061,\n",
+-       " 2506782,\n",
+-       " 2136088,\n",
+-       " 1823936,\n",
+-       " 2077404,\n",
+-       " 5489734,\n",
+-       " 2526946,\n",
+-       " 2620996,\n",
+-       " 2332181,\n",
+-       " 6120043,\n",
+-       " 5709538,\n",
+-       " 5492561,\n",
+-       " 2643508,\n",
+-       " 5491545,\n",
+-       " 2297989,\n",
+-       " 6102511,\n",
+-       " 1783848,\n",
+-       " 2599710,\n",
+-       " 6125672,\n",
+-       " 1815147,\n",
+-       " 2368373,\n",
+-       " 2646800,\n",
+-       " 2783609,\n",
+-       " 5710813,\n",
+-       " 1784207,\n",
+-       " 2298771,\n",
+-       " 2298117,\n",
+-       " 6123083,\n",
+-       " 5472261,\n",
+-       " 2108856,\n",
+-       " 6121795,\n",
+-       " 6124165,\n",
+-       " 6124425,\n",
+-       " 1810438,\n",
+-       " 2646799,\n",
+-       " 2702664,\n",
+-       " 5492100,\n",
+-       " 1797333,\n",
+-       " 2519953,\n",
+-       " 254016,\n",
+-       " 2296861,\n",
+-       " 2647318,\n",
+-       " 2645796,\n",
+-       " 2499815,\n",
+-       " 6128465,\n",
+-       " 2637380,\n",
+-       " 5496676,\n",
+-       " 2348783,\n",
+-       " 2895875,\n",
+-       " 6123553,\n",
+-       " 1881773,\n",
+-       " 2135923,\n",
+-       " 2702416,\n",
+-       " 2079198,\n",
+-       " 5492541,\n",
+-       " 1828473,\n",
+-       " 6123712,\n",
+-       " 1819836,\n",
+-       " 2951778,\n",
+-       " 5553748,\n",
+-       " 6123031,\n",
+-       " 2363142,\n",
+-       " 2295768,\n",
+-       " 6124903,\n",
+-       " 2731112,\n",
+-       " 2359554,\n",
+-       " 5722374,\n",
+-       " 1788880,\n",
+-       " 2140077,\n",
+-       " 1848251,\n",
+-       " 2108783,\n",
+-       " 2493209,\n",
+-       " 2339078,\n",
+-       " 5493321,\n",
+-       " 1800771,\n",
+-       " 5768652,\n",
+-       " 6183817,\n",
+-       " 2310758,\n",
+-       " 2314579,\n",
+-       " 5492147,\n",
+-       " 2368327,\n",
+-       " 1806304,\n",
+-       " 5512145,\n",
+-       " 2594830,\n",
+-       " 2718818,\n",
+-       " 1810423,\n",
+-       " 2326180,\n",
+-       " 2788692,\n",
+-       " 2485890,\n",
+-       " 5491655,\n",
+-       " 6124414,\n",
+-       " 2860075,\n",
+-       " 2788288,\n",
+-       " 2139941,\n",
+-       " 2363837,\n",
+-       " 2104782,\n",
+-       " 2310361,\n",
+-       " 2364311,\n",
+-       " 2355267,\n",
+-       " 2314574,\n",
+-       " 6124355,\n",
+-       " 42038,\n",
+-       " 2528371,\n",
+-       " 2368335,\n",
+-       " 2788680,\n",
+-       " 5488645,\n",
+-       " 2643864,\n",
+-       " 2075017,\n",
+-       " 2766668,\n",
+-       " 2933481,\n",
+-       " 2296432,\n",
+-       " 1793429,\n",
+-       " 2331954,\n",
+-       " 2296433,\n",
+-       " 245829,\n",
+-       " 2296439,\n",
+-       " 2137645,\n",
+-       " 2647438,\n",
+-       " 5489729,\n",
+-       " 2348072,\n",
+-       " 2855175,\n",
+-       " 2643859,\n",
+-       " 2116926,\n",
+-       " 1849493,\n",
+-       " 2699259,\n",
+-       " 5488098,\n",
+-       " 5497506,\n",
+-       " 2710128,\n",
+-       " 6186317,\n",
+-       " 2298009,\n",
+-       " 2719497,\n",
+-       " 2364313,\n",
+-       " 2647353,\n",
+-       " 2349243,\n",
+-       " 6128429,\n",
+-       " 2857464,\n",
+-       " 5491917,\n",
+-       " 2289768,\n",
+-       " 2293508,\n",
+-       " 1788408,\n",
+-       " 6102181,\n",
+-       " 5487797,\n",
+-       " 6124442,\n",
+-       " 2479548,\n",
+-       " 2783695,\n",
+-       " 2699249,\n",
+-       " 246612,\n",
+-       " 2850359,\n",
+-       " 6119995,\n",
+-       " 2371387,\n",
+-       " 2825981,\n",
+-       " 2798752,\n",
+-       " 2801803,\n",
+-       " 2112800,\n",
+-       " 2875621,\n",
+-       " 2364383,\n",
+-       " 2785295,\n",
+-       " 2368382,\n",
+-       " 2343534,\n",
+-       " 2519810,\n",
+-       " 261374,\n",
+-       " 2298695,\n",
+-       " 2473696,\n",
+-       " 2620998,\n",
+-       " 2098946,\n",
+-       " 2315308,\n",
+-       " 2843731,\n",
+-       " 2347339,\n",
+-       " 2520692,\n",
+-       " 1830985,\n",
+-       " 2349258,\n",
+-       " 2788294,\n",
+-       " 2363782,\n",
+-       " 2526272,\n",
+-       " 2535965,\n",
+-       " 2364308,\n",
+-       " 2331664,\n",
+-       " 6117302,\n",
+-       " 2788301,\n",
+-       " 2359425,\n",
+-       " 2516014,\n",
+-       " 2719491,\n",
+-       " 2295779,\n",
+-       " 2298108,\n",
+-       " 1804609,\n",
+-       " 6124577,\n",
+-       " 2075438,\n",
+-       " 2117391,\n",
+-       " 2349240,\n",
+-       " 231286,\n",
+-       " 2825987,\n",
+-       " 2699232,\n",
+-       " 5512440,\n",
+-       " 2075423,\n",
+-       " 2338987,\n",
+-       " 2077807,\n",
+-       " 2647344,\n",
+-       " 2116899,\n",
+-       " 2362703,\n",
+-       " 6118286,\n",
+-       " 2776893,\n",
+-       " 2117210,\n",
+-       " 2332737,\n",
+-       " 2860667,\n",
+-       " 2346348,\n",
+-       " 2371170,\n",
+-       " 2331668,\n",
+-       " 2699288,\n",
+-       " 2486017,\n",
+-       " 1804473,\n",
+-       " 2630784,\n",
+-       " 44840,\n",
+-       " 2297194,\n",
+-       " 2855436,\n",
+-       " 6124978,\n",
+-       " 5488606,\n",
+-       " 1880445,\n",
+-       " 2868859,\n",
+-       " 272081,\n",
+-       " 2730029,\n",
+-       " 2363779,\n",
+-       " 1803287,\n",
+-       " 2298784,\n",
+-       " 2338988,\n",
+-       " 2116672,\n",
+-       " 2691237,\n",
+-       " 6113604,\n",
+-       " 2499091,\n",
+-       " 2844922,\n",
+-       " 2314276,\n",
+-       " 2331651,\n",
+-       " 1781421,\n",
+-       " 1806105,\n",
+-       " 2311453,\n",
+-       " 2310808,\n",
+-       " 2331655,\n",
+-       " 2636302,\n",
+-       " 2721931,\n",
+-       " 2332849,\n",
+-       " 2349330,\n",
+-       " 2646803,\n",
+-       " 1824038,\n",
+-       " 2294076,\n",
+-       " 2528152,\n",
+-       " 2332775,\n",
+-       " 2798883,\n",
+-       " 2332043,\n",
+-       " 2291488,\n",
+-       " 6125450,\n",
+-       " 2645038,\n",
+-       " 2931967,\n",
+-       " 2528063,\n",
+-       " 2785298,\n",
+-       " 2480414,\n",
+-       " 271099,\n",
+-       " 2843548,\n",
+-       " 2285000,\n",
+-       " 2488713,\n",
+-       " 2809634,\n",
+-       " 2699252,\n",
+-       " 2137609,\n",
+-       " 2644605,\n",
+-       " 2784529,\n",
+-       " 6124880,\n",
+-       " 6122977,\n",
+-       " 2636313,\n",
+-       " 2362641,\n",
+-       " 2788249,\n",
+-       " 2332248,\n",
+-       " 2289003,\n",
+-       " 39888,\n",
+-       " 1830444,\n",
+-       " 1782965,\n",
+-       " 1793391,\n",
+-       " 2314478,\n",
+-       " 1839384,\n",
+-       " 2285411,\n",
+-       " 2075405,\n",
+-       " 2075718,\n",
+-       " 2363146,\n",
+-       " 2488721,\n",
+-       " 2855439,\n",
+-       " 2860104,\n",
+-       " 2722489,\n",
+-       " 2844957,\n",
+-       " 2079238,\n",
+-       " 2479056,\n",
+-       " 2773809,\n",
+-       " 266535,\n",
+-       " 2293586,\n",
+-       " 2808733,\n",
+-       " 6124401,\n",
+-       " 6128030,\n",
+-       " 2473693,\n",
+-       " 2645031,\n",
+-       " 2798764,\n",
+-       " 2813377,\n",
+-       " 2315315,\n",
+-       " 2808667,\n",
+-       " 1788503,\n",
+-       " 2313852,\n",
+-       " 2647339,\n",
+-       " 1881817,\n",
+-       " 2337294,\n",
+-       " 2931972,\n",
+-       " 2896578,\n",
+-       " 2311410,\n",
+-       " 2746470,\n",
+-       " 2875054,\n",
+-       " 2367893,\n",
+-       " 2887381,\n",
+-       " 2733028,\n",
+-       " 2296529,\n",
+-       " 2347801,\n",
+-       " 2332864,\n",
+-       " 1792420,\n",
+-       " 2499812,\n",
+-       " 2808272,\n",
+-       " 2479411,\n",
+-       " 1801208,\n",
+-       " 2887741,\n",
+-       " 6125413,\n",
+-       " 2135536,\n",
+-       " 2293588,\n",
+-       " 2784534,\n",
+-       " 2099364,\n",
+-       " 5767282,\n",
+-       " 2302430,\n",
+-       " 2477286,\n",
+-       " 2367970,\n",
+-       " 2788678,\n",
+-       " 2348309,\n",
+-       " 2514602,\n",
+-       " 2296868,\n",
+-       " 2896136,\n",
+-       " 6117802,\n",
+-       " 2607114,\n",
+-       " 2348835,\n",
+-       " 2477976,\n",
+-       " 2478300,\n",
+-       " 2485897,\n",
+-       " 2702670,\n",
+-       " 2344022,\n",
+-       " 2332741,\n",
+-       " 2643202,\n",
+-       " 2080197,\n",
+-       " 1842696,\n",
+-       " 2347373,\n",
+-       " 2855835,\n",
+-       " 2855853,\n",
+-       " 2479467,\n",
+-       " 2857459,\n",
+-       " 2499248,\n",
+-       " 2337395,\n",
+-       " 2103208,\n",
+-       " 2355698,\n",
+-       " 2654835,\n",
+-       " 2855192,\n",
+-       " 2362669,\n",
+-       " 2694799,\n",
+-       " 2798935,\n",
+-       " 2314588,\n",
+-       " 2860080,\n",
+-       " 2359630,\n",
+-       " 6121885,\n",
+-       " 2094528,\n",
+-       " 5492853,\n",
+-       " 6102726,\n",
+-       " 2371391,\n",
+-       " 2310877,\n",
+-       " 2487433,\n",
+-       " 1812418,\n",
+-       " 2477985,\n",
+-       " 2371135,\n",
+-       " 2856693,\n",
+-       " 2772348,\n",
+-       " 2331678,\n",
+-       " 2772789,\n",
+-       " 2509449,\n",
+-       " 2699275,\n",
+-       " 2779679,\n",
+-       " 2506803,\n",
+-       " 2702671,\n",
+-       " 2782034,\n",
+-       " 2636723,\n",
+-       " 2285467,\n",
+-       " 2535986,\n",
+-       " 2301496,\n",
+-       " 2785293,\n",
+-       " 2297981,\n",
+-       " 2861739,\n",
+-       " 2296183,\n",
+-       " 2332793,\n",
+-       " 2699321,\n",
+-       " 2528045,\n",
+-       " 2481541,\n",
+-       " 2310488,\n",
+-       " 2875627,\n",
+-       " 2296081,\n",
+-       " 2314923,\n",
+-       " 2696238,\n",
+-       " 2788752,\n",
+-       " 264734,\n",
+-       " 2359421,\n",
+-       " 250887,\n",
+-       " 2293513,\n",
+-       " 2491981,\n",
+-       " 186315,\n",
+-       " 2331853,\n",
+-       " 2528072,\n",
+-       " 5710687,\n",
+-       " 2479034,\n",
+-       " 2788695,\n",
+-       " 2098752,\n",
+-       " 2694442,\n",
+-       " 2860662,\n",
+-       " 2933802,\n",
+-       " 2296873,\n",
+-       " 2519947,\n",
+-       " 42813,\n",
+-       " 2773071,\n",
+-       " 2467054,\n",
+-       " 2738646,\n",
+-       " 2722470,\n",
+-       " 2520642,\n",
+-       " 2513439,\n",
+-       " 2310844,\n",
+-       " 2333335,\n",
+-       " 2296107,\n",
+-       " 2315640,\n",
+-       " 2366732,\n",
+-       " 2773805,\n",
+-       " 6190053,\n",
+-       " 2856655,\n",
+-       " 2360143,\n",
+-       " 2879425,\n",
+-       " 2507076,\n",
+-       " 2371314,\n",
+-       " 2620993,\n",
+-       " 2699299,\n",
+-       " 2315920,\n",
+-       " 2370713,\n",
+-       " 2507023,\n",
+-       " 2464058,\n",
+-       " 2315488,\n",
+-       " 2526381,\n",
+-       " 2465705,\n",
+-       " 2855626,\n",
+-       " 253985,\n",
+-       " 2630759,\n",
+-       " 2845701,\n",
+-       " 2298753,\n",
+-       " 2933775,\n",
+-       " 2478474,\n",
+-       " 2359423,\n",
+-       " 2799085,\n",
+-       " 41876,\n",
+-       " 2795863,\n",
+-       " 2285499,\n",
+-       " 2487400,\n",
+-       " 2355264,\n",
+-       " 5492062,\n",
+-       " 2285009,\n",
+-       " 1813168,\n",
+-       " 2296640,\n",
+-       " 2735877,\n",
+-       " 1829518,\n",
+-       " 2296670,\n",
+-       " 2795861,\n",
+-       " 2730030,\n",
+-       " 2347532,\n",
+-       " 2331935,\n",
+-       " 2349379,\n",
+-       " 2332804,\n",
+-       " 2645792,\n",
+-       " 2314263,\n",
+-       " 2463473,\n",
+-       " 2499273,\n",
+-       " 2699308,\n",
+-       " 2799458,\n",
+-       " 2643862,\n",
+-       " 2636345,\n",
+-       " 2488733,\n",
+-       " 2078807,\n",
+-       " 2699240,\n",
+-       " 2809620,\n",
+-       " 2785681,\n",
+-       " 2742324,\n",
+-       " 2285345,\n",
+-       " 2632879,\n",
+-       " 2491438,\n",
+-       " 2362690,\n",
+-       " 6124026,\n",
+-       " 2783732,\n",
+-       " 2347526,\n",
+-       " 2346368,\n",
+-       " 2731117,\n",
+-       " 2355040,\n",
+-       " 2719920,\n",
+-       " 2861244,\n",
+-       " 2814378,\n",
+-       " 41381,\n",
+-       " 2730026,\n",
+-       " 2752282,\n",
+-       " 2332373,\n",
+-       " 232265,\n",
+-       " 2138144,\n",
+-       " 1800688,\n",
+-       " 2315126,\n",
+-       " 2295841,\n",
+-       " 2730050,\n",
+-       " 2491586,\n",
+-       " 2875149,\n",
+-       " 2855869,\n",
+-       " 6126412,\n",
+-       " 1797073,\n",
+-       " 2719101,\n",
+-       " 2363154,\n",
+-       " 2288996,\n",
+-       " 2370699,\n",
+-       " 2788278,\n",
+-       " 2812845,\n",
+-       " 2702662,\n",
+-       " 2316193,\n",
+-       " 2528218,\n",
+-       " 6185062,\n",
+-       " 2731145,\n",
+-       " 2477319,\n",
+-       " 2528137,\n",
+-       " 2349299,\n",
+-       " 2137039,\n",
+-       " 2125944,\n",
+-       " 5489358,\n",
+-       " 2724082,\n",
+-       " 2643875,\n",
+-       " 2718852,\n",
+-       " 2795850,\n",
+-       " 2857077,\n",
+-       " 2108729,\n",
+-       " 2846375,\n",
+-       " 2532455,\n",
+-       " 2294098,\n",
+-       " 2493059,\n",
+-       " 2670137,\n",
+-       " 2332733,\n",
+-       " 2477270,\n",
+-       " 2813782,\n",
+-       " 2702728,\n",
+-       " 2860127,\n",
+-       " 2133135,\n",
+-       " 2520020,\n",
+-       " 2862338,\n",
+-       " 2661694,\n",
+-       " 2349368,\n",
+-       " 2347201,\n",
+-       " 2857429,\n",
+-       " 2856265,\n",
+-       " 2332725,\n",
+-       " 2349273,\n",
+-       " 2648718,\n",
+-       " 2731110,\n",
+-       " 1851378,\n",
+-       " 2699245,\n",
+-       " 2284993,\n",
+-       " 2585089,\n",
+-       " 2661727,\n",
+-       " 2856709,\n",
+-       " 2485879,\n",
+-       " 2670147,\n",
+-       " 2492222,\n",
+-       " 2862308,\n",
+-       " 2488545,\n",
+-       " 2347587,\n",
+-       " 2315911,\n",
+-       " 266244,\n",
+-       " 2370336,\n",
+-       " 2081236,\n",
+-       " 2772737,\n",
+-       " 2706772,\n",
+-       " 2295683,\n",
+-       " 2646685,\n",
+-       " 2933444,\n",
+-       " 5887947,\n",
+-       " 1779006,\n",
+-       " 2818178,\n",
+-       " 2795857,\n",
+-       " 2075002,\n",
+-       " 2139500,\n",
+-       " 2363852,\n",
+-       " 2313845,\n",
+-       " 2289039,\n",
+-       " 2110287,\n",
+-       " 2120940,\n",
+-       " 2594813,\n",
+-       " 2478205,\n",
+-       " 1819146,\n",
+-       " 2116309,\n",
+-       " 2514594,\n",
+-       " 2630811,\n",
+-       " 2773803,\n",
+-       " 248867,\n",
+-       " 2895990,\n",
+-       " 2716681,\n",
+-       " 2773530,\n",
+-       " 2846078,\n",
+-       " 2818158,\n",
+-       " 1815137,\n",
+-       " 2645048,\n",
+-       " 2143058,\n",
+-       " 2108174,\n",
+-       " 44712,\n",
+-       " 2114008,\n",
+-       " 2855167,\n",
+-       " 2098445,\n",
+-       " 2599707,\n",
+-       " 2463426,\n",
+-       " 236225,\n",
+-       " 244156,\n",
+-       " 1826610,\n",
+-       " 2723135,\n",
+-       " 2331733,\n",
+-       " 2799136,\n",
+-       " 2920949,\n",
+-       " 226007,\n",
+-       " 2607335,\n",
+-       " 2077214,\n",
+-       " 2071756,\n",
+-       " 264251,\n",
+-       " 270652,\n",
+-       " 2374871,\n",
+-       " 2103003,\n",
+-       " 2315884,\n",
+-       " 1823235,\n",
+-       " 5972065,\n",
+-       " 1842078,\n",
+-       " 2294089,\n",
+-       " 2655629,\n",
+-       " 1803170,\n",
+-       " 2112789,\n",
+-       " 2092256,\n",
+-       " 1897783,\n",
+-       " 2620825,\n",
+-       " 1792077,\n",
+-       " 2347754,\n",
+-       " 2311107,\n",
+-       " 2644040,\n",
+-       " 2362660,\n",
+-       " 2857094,\n",
+-       " 2096096,\n",
+-       " 2367754,\n",
+-       " 2719544,\n",
+-       " 2364329,\n",
+-       " 2292358,\n",
+-       " 2314734,\n",
+-       " 261362,\n",
+-       " 2486211,\n",
+-       " 2702706,\n",
+-       " 2104748,\n",
+-       " 2699923,\n",
+-       " 1796126,\n",
+-       " 2723690,\n",
+-       " 2362925,\n",
+-       " 2636712,\n",
+-       " 2359610,\n",
+-       " 2784523,\n",
+-       " 5590505,\n",
+-       " 2719961,\n",
+-       " ...]"
+-      ]
+-     },
+-     "execution_count": 74,
++     "execution_count": 73,
+      "metadata": {},
+      "output_type": "execute_result"
+     }
+    ],
+-   "execution_count": 74
++   "execution_count": 73
+   },
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T23:18:13.546412Z",
+-     "start_time": "2025-03-05T23:17:10.243392Z"
++     "end_time": "2025-03-09T03:16:16.835438Z",
++     "start_time": "2025-03-09T03:16:16.473372Z"
+     }
+    },
+    "cell_type": "code",
+    "source": [
+-    "# Criterion 2: At least 8 consecutive ascensions\n",
+-    "# Sort by player and end time\n",
+-    "df = df.sort_values(by=['name', 'realtime'])\n",
+-    "\n",
+-    "# Identify consecutive ascensions\n",
+-    "def longest_consecutive_ascensions(player_games):\n",
+-    "    count = 0\n",
+-    "    max_streak = 0\n",
+-    "    for _, row in player_games.iterrows():\n",
+-    "        if row['death'] == \"ascended\":\n",
+-    "            count += 1\n",
+-    "            max_streak = max(max_streak, count)\n",
+-    "        else:\n",
+-    "            count = 0\n",
+-    "    return max_streak\n",
+-    "\n",
+-    "# Compute longest streak per player\n",
+-    "streaks = df.groupby('name').apply(longest_consecutive_ascensions)\n",
+-    "criterion_2 = streaks >= 8\n",
+-    "\n",
+-    "# Extract players with at least 8 consecutive ascensions\n",
+-    "criterion_2 = streaks[criterion_2].index\n",
+-    "\n",
+-    "print(len(criterion_2))"
++    "temp = set(expert_games)  # Convert to set for faster lookup\n",
++    "processed_df = df[~df[\"gameid\"].isin(temp)]  # Exclude expert games\n",
++    "print(len(temp))"
+    ],
+-   "id": "5f3d2de07db62136",
++   "id": "2d8475989d8e8312",
+    "outputs": [
+     {
+-     "name": "stderr",
++     "name": "stdout",
+      "output_type": "stream",
+      "text": [
+-      "/tmp/ipykernel_8255/3109394239.py:18: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
+-      "  streaks = df.groupby('name').apply(longest_consecutive_ascensions)\n"
++      "28785\n"
+      ]
+-    },
+-    {
+-     "data": {
+-      "text/plain": [
+-       "name\n",
+-       "Player0       False\n",
+-       "Player1       False\n",
+-       "Player10      False\n",
+-       "Player100     False\n",
+-       "Player1000    False\n",
+-       "              ...  \n",
+-       "Player9995    False\n",
+-       "Player9996    False\n",
+-       "Player9997    False\n",
+-       "Player9998    False\n",
+-       "Player9999    False\n",
+-       "Length: 48077, dtype: bool"
+-      ]
+-     },
+-     "execution_count": 71,
+-     "metadata": {},
+-     "output_type": "execute_result"
+     }
+    ],
+-   "execution_count": 71
++   "execution_count": 68
+   },
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T21:31:34.004961Z",
+-     "start_time": "2025-03-05T21:31:33.899381Z"
++     "end_time": "2025-03-09T04:56:36.641040Z",
++     "start_time": "2025-03-09T04:56:36.595593Z"
+     }
+    },
+    "cell_type": "code",
+    "source": [
+-    "ascended_games = df[df['death'] == \"ascended\"]\n",
++    "# Calculate build consistency\n",
++    "def calculate_build_consistency(df):\n",
++    "    # Create combined build column\n",
++    "    df['build'] = df['role'] + '-' + df['race'] + '-' + df['align']\n",
++    "    min_games = 10 \n",
++    "    \n",
++    "    build_stats = []\n",
++    "    for name, group in df.groupby('name'):\n",
++    "        # Skip players with too few games\n",
++    "        if len(group) < 5:\n",
++    "            continue\n",
++    "            \n",
++    "        # Get build counts\n",
++    "        build_counts = group['build'].value_counts()\n",
++    "        top_build = build_counts.index[0]\n",
++    "        top_build_count = build_counts.iloc[0]\n",
++    "        top_build_pct = top_build_count / len(group) * 100\n",
++    "        \n",
++    "        # Calculate build entropy (lower means more consistent)\n",
++    "        build_probs = build_counts / len(group)\n",
++    "        entropy = -sum(p * np.log2(p) for p in build_probs)\n",
++    "        \n",
++    "        build_stats.append({\n",
++    "            'name': name,\n",
++    "            'total_games': len(group),\n",
++    "            'unique_builds': len(build_counts),\n",
++    "            'top_build': top_build,\n",
++    "            'top_build_count': top_build_count,\n",
++    "            'top_build_percentage': top_build_pct,\n",
++    "            'build_entropy': entropy\n",
++    "        })\n",
++    "    \n",
++    "    return pd.DataFrame(build_stats)\n",
+     "\n",
+-    "criterion_3 = ascended_games[ascended_games['realtime'] <= 18000]['name'].unique()\n",
++    "# Calculate build consistency\n",
++    "build_consistency = calculate_build_consistency(expert_df)\n",
+     "\n",
+-    "criterion_4 = ascended_games[ascended_games['turns'] < 10000]['name'].unique()\n",
++    "# Identify most consistent players\n",
++    "min_games = 10 \n",
++    "consistent_players = build_consistency[build_consistency['total_games'] >= min_games].sort_values('build_entropy').head(5)\n",
+     "\n",
+-    "print(len(criterion_3))\n",
+-    "print(len(criterion_4))\n"
+-   ],
+-   "id": "fad8cda00a13024c",
+-   "outputs": [
+-    {
+-     "name": "stdout",
+-     "output_type": "stream",
+-     "text": [
+-      "106\n",
+-      "30\n"
+-     ]
+-    }
+-   ],
+-   "execution_count": 35
+-  },
+-  {
+-   "metadata": {
+-    "ExecuteTime": {
+-     "end_time": "2025-03-05T21:29:57.567232Z",
+-     "start_time": "2025-03-05T21:29:57.535026Z"
+-    }
+-   },
+-   "cell_type": "code",
+-   "source": [
+-    "def meets_conduct_criteria(conduct_str):\n",
+-    "    if pd.isna(conduct_str):\n",
+-    "        return False\n",
+-    "    conducts = conduct_str.split(',')\n",
+-    "    difficult_conducts = {\"pacifist\", \"foodless\", \"illiterate\"}\n",
+-    "    return any(c in conducts for c in difficult_conducts) or len(conducts) >= 7\n",
++    "print(\"Top 10 Most Build-Consistent Players:\")\n",
++    "print(consistent_players[['name', 'total_games', 'unique_builds', 'top_build', \n",
++    "                          'top_build_percentage', 'build_entropy']].reset_index(drop=True))\n",
+     "\n",
+-    "# Identify players who meet the conduct criteria\n",
+-    "criterion_5 = ascended_games[ascended_games['conduct'].apply(meets_conduct_criteria)]['name'].unique()\n",
+     "\n",
+-    "print(len(criterion_5))"
++    "top_builds = build_consistency['top_build'].value_counts()\n",
++    "\n",
++    "print(\"\\nMost Popular Builds:\")\n",
++    "print(top_builds.head(5))"
+    ],
+-   "id": "1c813a7669a4d224",
++   "id": "c0ed7dc6e381fa1c",
+    "outputs": [
+     {
+      "name": "stdout",
+      "output_type": "stream",
+      "text": [
+-      "154\n"
++      "Top 10 Most Build-Consistent Players:\n",
++      "          name  total_games  unique_builds    top_build  top_build_percentage  \\\n",
++      "0  Player37300          231             26  Wiz-Elf-Cha             54.978355   \n",
++      "1  Player48483         1396             34  Tou-Hum-Neu             50.859599   \n",
++      "2    Player188          546             31  Hea-Gno-Neu             50.915751   \n",
++      "3  Player50470          974             32  Tou-Hum-Neu             41.273101   \n",
++      "4    Player503         2014             46  Hea-Gno-Neu             35.253227   \n",
++      "\n",
++      "   build_entropy  \n",
++      "0       2.816325  \n",
++      "1       2.859327  \n",
++      "2       2.864928  \n",
++      "3       2.931231  \n",
++      "4       3.292199  \n",
++      "\n",
++      "Most Popular Builds:\n",
++      "top_build\n",
++      "Tou-Hum-Neu    13\n",
++      "Wiz-Elf-Cha    12\n",
++      "Hea-Gno-Neu     5\n",
++      "Kni-Hum-Law     4\n",
++      "Wiz-Gno-Neu     2\n",
++      "Name: count, dtype: int64\n"
+      ]
+     }
+    ],
+-   "execution_count": 32
++   "execution_count": 110
+   },
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T23:00:59.381582Z",
+-     "start_time": "2025-03-05T23:00:59.283594Z"
++     "end_time": "2025-03-09T04:03:30.191204Z",
++     "start_time": "2025-03-09T04:03:29.923540Z"
+     }
+    },
+    "cell_type": "code",
+    "source": [
+-    "# Combine conditions for expert filtering\n",
+-    "expert_players = set(criterion_1).union(set(criterion_2), set(criterion_3), set(criterion_4), set(criterion_5))\n",
+-    "expert_games = df[df['name'].isin(expert_players)]\n"
+-   ],
+-   "id": "1a6500558450e0b1",
+-   "outputs": [],
+-   "execution_count": 62
+-  },
+-  {
+-   "metadata": {
+-    "ExecuteTime": {
+-     "end_time": "2025-03-05T23:03:27.229391Z",
+-     "start_time": "2025-03-05T23:03:27.127764Z"
+-    }
+-   },
+-   "cell_type": "code",
+-   "source": [
+-    "import nle.dataset as nld\n",
+-    "nld_nao_path = \"/code/nld-nao/nld-nao-unzipped\"\n",
++    "# Improved build consistency visualization (simpler version)\n",
++    "plt.figure(figsize=(10, 6))\n",
+     "\n",
+-    "dbfilename = \"/code/NetHack-Research/data/raw/nld-nao.db\"\n",
++    "# Filter data for better visualization (minimum 10 games)\n",
++    "filtered_consistency = build_consistency[build_consistency['total_games'] >= 10]\n",
+     "\n",
+-    "dataset_name = \"nld-nao\"\n",
++    "# Create scatter plot with better styling\n",
++    "plt.scatter(\n",
++    "    filtered_consistency['unique_builds'] / filtered_consistency['total_games'],\n",
++    "    filtered_consistency['build_entropy'],\n",
++    "    alpha=0.7,\n",
++    "    c=filtered_consistency['top_build_percentage'],  # Color by top build percentage\n",
++    "    cmap='viridis',\n",
++    ")\n",
+     "\n",
+-    "if not nld.db.exists(dbfilename):\n",
+-    "    nld.db.create(dbfilename)\n",
+-    "    # Add NLD-NAO data, use the `add_altorg_directory`.\n",
+-    "    nld.add_altorg_directory(nld_nao_path, \"nld-nao\", dbfilename)\n",
+-    "else:\n",
+-    "    print(f\"Database already exists: {dbfilename}\")\n",
+-    "    \n",
+-    "    \n",
+-    "db_conn = nld.db.connect(filename=dbfilename)\n",
+-    "print(f\"NLD-NAO Dataset has {nld.db.count_games('nld-nao', conn=db_conn)} games.\")"
++    "# Add colorbar\n",
++    "cbar = plt.colorbar()\n",
++    "cbar.set_label('Top Build Percentage (%)')\n",
++    "\n",
++    "# Label axes and title\n",
++    "plt.xlabel('Build Diversity')\n",
++    "plt.ylabel('Build Entropy (lower = more consistent)')\n",
++    "plt.title('Build Consistency (min 10 games)')\n",
++    "\n",
++    "# Add grid and tight layout\n",
++    "plt.grid(True, alpha=0.3, linestyle='--')\n",
++    "plt.tight_layout()\n",
++    "plt.show()"
+    ],
+-   "id": "1a8e359a95fd788c",
++   "id": "ca59e0621ed73eb7",
+    "outputs": [
+     {
+-     "name": "stdout",
+-     "output_type": "stream",
+-     "text": [
+-      "Database already exists: /code/NetHack-Research/data/raw/nld-nao.db\n",
+-      "NLD-NAO Dataset has 1511228 games.\n"
+-     ]
+-    }
+-   ],
+-   "execution_count": 63
+-  },
+-  {
+-   "metadata": {
+-    "ExecuteTime": {
+-     "end_time": "2025-01-06T20:54:59.556389Z",
+-     "start_time": "2025-01-06T20:54:59.550959Z"
++     "data": {
++      "text/plain": [
++       "<Figure size 1000x600 with 2 Axes>"
++      ],
++      "image/png": ""
++     },
++     "metadata": {},
++     "output_type": "display_data"
+     }
+-   },
+-   "cell_type": "code",
+-   "source": [
+-    "# Too Soon: Players who do not demonstrate learning, such that they are able to ascend in the beginning of their history of gameplays.\n",
+-    "# Define: Ascension <= X games (analytically) \n",
+-    "\n"
+    ],
+-   "id": "c71c1d28d500e5ae",
+-   "outputs": [],
+-   "execution_count": 17
++   "execution_count": 75
+   },
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-03-05T20:35:17.529301Z",
+-     "start_time": "2025-03-05T20:35:17.150367Z"
++     "end_time": "2025-03-09T04:08:00.937705Z",
++     "start_time": "2025-03-09T04:08:00.886197Z"
+     }
+    },
+    "cell_type": "code",
+    "source": [
+-    "# Too Quick: Players who ascend in a single game in a very short amount of time, indicating a speed run or gameplay objectives that are not representative of most players.\n",
+-    "# A speed run is 10-20K turns to finish\n",
+-    "\n",
+-    "from scipy.stats import zscore\n",
+-    "# Filter to games that end in ascension \n",
+-    "ascended_df = df[df['death'].str.contains('ascended', na=False)].copy()\n",
+-    "\n",
+-    "# Of the games that end in ascension, filter those games that satisfy speed run definition \n",
+-    "speed_runs = ascended_df[(ascended_df['realtime'] >= 10000) & (ascended_df['turns'] <= 15000)].copy()\n",
+-    "\n",
+-    "# Calculate z-score of all turns and speed run turns \n",
+-    "ascended_df['z_score_turns'] = zscore(ascended_df['turns'])\n",
+-    "speed_runs['z_score_turns'] = zscore(speed_runs['turns'])\n",
++    "# Find the most common builds among expert players\n",
++    "def calculate_build_frequency(df, expert_names):\n",
++    "    expert_games = df[df['name'].isin(expert_names)]\n",
++    "    expert_games['build'] = expert_games['role'] + '-' + expert_games['race'] + '-' + expert_games['align']\n",
++    "    \n",
++    "    # Count builds\n",
++    "    build_counts = expert_games['build'].value_counts().reset_index()\n",
++    "    build_counts.columns = ['build', 'count']\n",
++    "    \n",
++    "    # Split the build back into components\n",
++    "    build_counts[['role', 'race', 'align']] = build_counts['build'].str.split('-', expand=True)\n",
++    "    \n",
++    "    return build_counts, expert_games\n",
+     "\n",
+-    "# Calculate outliers according to 3 standard deviations from the mean\n",
+-    "outliers = ascended_df[(abs(ascended_df['z_score_turns']) > 3)]"
+-   ],
+-   "id": "99e935ef461e8276",
+-   "outputs": [],
+-   "execution_count": 4
+-  },
+-  {
+-   "metadata": {
+-    "ExecuteTime": {
+-     "end_time": "2025-01-06T22:46:11.613917Z",
+-     "start_time": "2025-01-06T22:46:11.608708Z"
+-    }
+-   },
+-   "cell_type": "code",
+-   "source": [
+-    "speed_run_player_names = speed_runs['name'].unique()\n",
+-    "print(f\"Number of speed run players: {len(speed_run_player_names)}\")\n",
+-    "print(speed_run_player_names)"
++    "# Get top expert builds\n",
++    "expert_builds, expert_games = calculate_build_frequency(df,expert_players)"
+    ],
+-   "id": "b5f69567c3d2a733",
++   "id": "9758cddfd573fd66",
+    "outputs": [
+     {
+-     "name": "stdout",
++     "name": "stderr",
+      "output_type": "stream",
+      "text": [
+-      "Number of speed run players: 64\n",
+-      "['Player10094' 'Player10658' 'Player11576' 'Player14226' 'Player14993'\n",
+-      " 'Player15632' 'Player15731' 'Player15820' 'Player17117' 'Player17290'\n",
+-      " 'Player17912' 'Player19010' 'Player20844' 'Player2096' 'Player2147'\n",
+-      " 'Player25258' 'Player2539' 'Player26207' 'Player2837' 'Player2848'\n",
+-      " 'Player33174' 'Player33955' 'Player34287' 'Player37300' 'Player37576'\n",
+-      " 'Player38596' 'Player39095' 'Player40006' 'Player40509' 'Player41013'\n",
+-      " 'Player41502' 'Player4383' 'Player45180' 'Player45237' 'Player46189'\n",
+-      " 'Player46255' 'Player48682' 'Player48801' 'Player49993' 'Player515'\n",
+-      " 'Player52192' 'Player53035' 'Player53955' 'Player56585' 'Player57758'\n",
+-      " 'Player58948' 'Player59031' 'Player60095' 'Player6030' 'Player6485'\n",
+-      " 'Player65824' 'Player66684' 'Player66758' 'Player67' 'Player67229'\n",
+-      " 'Player68225' 'Player78' 'Player7874' 'Player8224' 'Player83'\n",
+-      " 'Player8391' 'Player8910' 'Player924' 'Player937']\n"
++      "/tmp/ipykernel_22395/80680807.py:4: SettingWithCopyWarning: \n",
++      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
++      "Try using .loc[row_indexer,col_indexer] = value instead\n",
++      "\n",
++      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
++      "  expert_games['build'] = expert_games['role'] + '-' + expert_games['race'] + '-' + expert_games['align']\n"
+      ]
+     }
+    ],
+-   "execution_count": 100
++   "execution_count": 80
+   },
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-01-06T22:46:13.669574Z",
+-     "start_time": "2025-01-06T22:46:12.852233Z"
++     "end_time": "2025-03-09T04:08:11.190090Z",
++     "start_time": "2025-03-09T04:08:10.945579Z"
+     }
+    },
+    "cell_type": "code",
+    "source": [
+-    "# plot speed runs with seaborn \n",
+-    "plt.figure(figsize=(12, 6))\n",
++    "# visualization of top expert builds\n",
++    "plt.figure(figsize=(12, 8))\n",
++    "top_n = 10\n",
++    "top_builds = expert_builds.head(top_n)\n",
++    "\n",
++    "# Sort by count for better visualization\n",
++    "top_builds = top_builds.sort_values('count')\n",
+     "\n",
+-    "sns.kdeplot(ascended_df['z_score_turns'], fill=True, label='All Games', bw_adjust=2)\n",
+-    "sns.kdeplot(speed_runs['z_score_turns'], fill=True, label='Speed Runs', bw_adjust=2, color='orange')\n",
++    "# Create the horizontal bar chart with better colors and formatting\n",
++    "bars = plt.barh(\n",
++    "    top_builds['build'], \n",
++    "    top_builds['count'], \n",
++    "    color='steelblue',\n",
++    "    alpha=0.8,\n",
++    "    edgecolor='darkblue',\n",
++    "    linewidth=1\n",
++    ")\n",
+     "\n",
+-    "plt.axvline(3, color='red', linestyle='--', linewidth=1.5, label='Z=3 (Outlier Threshold)')\n",
+-    "plt.axvline(-3, color='red', linestyle='--', linewidth=1.5, label='Z=-3 (Outlier Threshold)')\n",
++    "# Add count labels to the end of each bar\n",
++    "for bar in bars:\n",
++    "    width = bar.get_width()\n",
++    "    plt.text(width + 50, \n",
++    "             bar.get_y() + bar.get_height()/2, \n",
++    "             f'{int(width):,}',\n",
++    "             va='center',\n",
++    "             fontweight='bold')\n",
+     "\n",
+-    "plt.xlim(-5, 10) \n",
+-    "plt.xlabel(\"Z-Score for Turns\", fontsize=14)\n",
+-    "plt.ylabel(\"Density\", fontsize=14)\n",
+-    "plt.title(\"KDE of Z-Scores for Turns with Speed Runs Highlighted\", fontsize=16)\n",
+-    "plt.legend(fontsize=12, loc='upper right')\n",
+-    "plt.grid(True, linestyle='--', alpha=0.5)\n",
++    "# Improve styling\n",
++    "plt.xlabel('Number of Games', fontsize=12)\n",
++    "plt.ylabel('Character Build', fontsize=12)\n",
++    "plt.title(f'Top {top_n} Expert Builds', fontsize=14)\n",
++    "plt.grid(axis='x', alpha=0.3, linestyle='--')\n",
+     "\n",
+-    "# save plot \n",
+-    "plt.savefig('/code/NetHack-Research/reports/figures/kde-speed-run.png', dpi=300, bbox_inches='tight')\n",
++    "# Remove top and right spines\n",
++    "plt.gca().spines['top'].set_visible(False)\n",
++    "plt.gca().spines['right'].set_visible(False)\n",
+     "\n",
++    "# Add a subtle background color\n",
++    "plt.gca().set_facecolor('#f8f8f8')\n",
++    "\n",
++    "plt.tight_layout()\n",
+     "plt.show()"
+    ],
+-   "id": "2819c52e915aeb34",
++   "id": "44cbf95a8393684b",
+    "outputs": [
+     {
+      "data": {
+       "text/plain": [
+-       "<Figure size 1200x600 with 1 Axes>"
++       "<Figure size 1200x800 with 1 Axes>"
+       ],
+-      "image/png": ""
++      "image/png": ""
+      },
+      "metadata": {},
+      "output_type": "display_data"
+     }
+    ],
+-   "execution_count": 101
++   "execution_count": 81
+   },
+   {
+    "metadata": {
+     "ExecuteTime": {
+-     "end_time": "2025-01-06T22:46:45.340411Z",
+-     "start_time": "2025-01-06T22:46:36.403656Z"
++     "end_time": "2025-03-09T03:06:41.456054Z",
++     "start_time": "2025-03-09T03:06:41.198084Z"
+     }
+    },
+    "cell_type": "code",
+@@ -1631,7 +2496,7 @@
+     "# Too Frequent: Players who are able to ascend with high frequency in their history of games  relative to the average player. \n",
+     "# Define Ascension Frequency >= X (statistical top, e.g. top 1-5% of players) \n",
+     "\n",
+-    "player_stats = df.groupby('name').agg(\n",
++    "player_stats = expert_df.groupby('name').agg(\n",
+     "    total_games = ('name', 'count'),\n",
+     "    total_ascensions = ('death', lambda x: x.str.contains('ascended', na=False).sum())\n",
+     ").reset_index()\n",
+@@ -1658,13 +2523,13 @@
+       "text/plain": [
+        "<Figure size 1000x600 with 1 Axes>"
+       ],
+-      "image/png": ""
++      "image/png": ""
+      },
+      "metadata": {},
+      "output_type": "display_data"
+     }
+    ],
+-   "execution_count": 102
++   "execution_count": 58
+   },
+   {
+    "metadata": {
+diff --git a/notebooks/2-28-2025_Random-Sample.ipynb b/notebooks/2-28-2025_Random-Sample.ipynb
+index 1d3defc..d33a460 100644
+--- a/notebooks/2-28-2025_Random-Sample.ipynb
++++ b/notebooks/2-28-2025_Random-Sample.ipynb
+@@ -140,16 +140,9 @@
+     "import numpy as np\n",
+     "\n",
+     "# Define output HDF5 file\n",
+-    "HDF5_FILE = \"/code/NetHack-Research/data/raw/data-mon-hum-neu-any.hdf5\"\n",
++    "HDF5_FILE = \"/data/processed/data-mon-hum-neu-any.hdf5\"\n",
+     "\n",
+     "def save_to_hdf5(minibatch, output_file):\n",
+-    "    \"\"\"\n",
+-    "    Saves the minibatch data in an HDF5 format, organizing trajectories by game ID.\n",
+-    "\n",
+-    "    Args:\n",
+-    "        minibatch (dict): The extracted trajectory data from NLD-NAO.\n",
+-    "        output_file (str): Path to save the HDF5 file.\n",
+-    "    \"\"\"\n",
+     "    with h5py.File(output_file, \"w\") as hdf5_file:\n",
+     "        unique_game_ids = np.unique(minibatch[\"gameids\"])\n",
+     "\n",
+@@ -1201,7 +1194,7 @@
+     "\n",
+     "try:\n",
+     "    # Directly load the dataset from your local file\n",
+-    "    dataset_path = \"/code/NetHack-Research/data/raw/data-mon-hum-neu-any.hdf5\"\n",
++    "    dataset_path = \"/data/processed/data-mon-hum-neu-any.hdf5\"\n",
+     "    hdf5_file, trajectories = load_nld_aa_small_dataset(mode=\"in_memory\")\n",
+     "\n",
+     "    print(f\"Successfully loaded dataset with {len(trajectories)} episodes\")\n",
+diff --git a/notebooks/Persistence_Extraction.ipynb b/notebooks/Persistence_Extraction.ipynb
+new file mode 100644
+index 0000000..8cdc6ac
+--- /dev/null
++++ b/notebooks/Persistence_Extraction.ipynb
+@@ -0,0 +1,654 @@
++{
++ "cells": [
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T06:10:35.417387Z",
++     "start_time": "2025-03-11T06:10:35.413880Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "import pandas as pd\n",
++    "import matplotlib.pyplot as plt\n",
++    "import numpy as np\n",
++    "import seaborn as sns"
++   ],
++   "id": "a8242e33a5995644",
++   "outputs": [],
++   "execution_count": 1
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:42:26.550935Z",
++     "start_time": "2025-03-11T08:42:19.365035Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Full dataset\n",
++    "csv_path = \"/code/NetHack-Research/data/processed/new_full_data.csv\"\n",
++    "\n",
++    "# Load CSV to Pandas Dataframe\n",
++    "df = pd.read_csv(csv_path)\n",
++    "data = df.sort_values(['name', 'starttime'])"
++   ],
++   "id": "initial_id",
++   "outputs": [],
++   "execution_count": 151
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T07:32:30.098618Z",
++     "start_time": "2025-03-11T07:32:30.095461Z"
++    }
++   },
++   "cell_type": "code",
++   "source": "### TEMPORAL METRICS ",
++   "id": "9ff58ad5ab11c180",
++   "outputs": [],
++   "execution_count": 97
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:42:43.857719Z",
++     "start_time": "2025-03-11T08:42:43.720798Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Add game sequence number for each player\n",
++    "data['game_count'] = data.groupby('name').cumcount() + 1"
++   ],
++   "id": "fe2d1316851e12ce",
++   "outputs": [],
++   "execution_count": 152
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:42:46.528591Z",
++     "start_time": "2025-03-11T08:42:45.784472Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Calculate game duration in minutes\n",
++    "data['duration_minutes'] = (pd.to_datetime(data['endtime']) - pd.to_datetime(data['starttime'])).dt.total_seconds() / 60"
++   ],
++   "id": "4997585e2b5d7897",
++   "outputs": [],
++   "execution_count": 153
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:42:59.687609Z",
++     "start_time": "2025-03-11T08:42:47.737106Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Calculate Inter-Session Game Time\n",
++    "data['next_game_time'] = data.groupby('name')['starttime'].shift(-1)\n",
++    "data['inter_session_time'] = (pd.to_datetime(data['next_game_time']) - pd.to_datetime(data['starttime'])).dt.total_seconds() / 3600\n",
++    "\n",
++    "# Replace NaN values with a large finite value to migitate problems training \n",
++    "max_value = data['inter_session_time'].max()\n",
++    "data['inter_session_time'] = data['inter_session_time'].fillna(max_value * 2)\n",
++    "\n",
++    "data['rolling_inter_session'] = data.groupby('name')['inter_session_time'].transform(lambda x: x.rolling(3, min_periods=1).mean())\n",
++    "\n",
++    "# Create quick return indicator (session within 12 hours instead of 24)\n",
++    "data['quick_return'] = (data['inter_session_time'] < 12).astype(int)\n",
++    "\n",
++    "# Drop Next_game_time\n",
++    "# TODO: drop next_game_time\n",
++    "data = data.drop(columns='next_game_time')"
++   ],
++   "id": "624332a06c83afeb",
++   "outputs": [],
++   "execution_count": 154
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:43:03.299687Z",
++     "start_time": "2025-03-11T08:43:02.693646Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Ensure 'starttime' is in datetime format\n",
++    "data['starttime'] = pd.to_datetime(data['starttime'])\n",
++    "\n",
++    "# Get first game date per player\n",
++    "data['first_game_date'] = data.groupby('name')['starttime'].transform('min')\n",
++    "\n",
++    "# Compute days since first game\n",
++    "data['days_since_first_game'] = (data['starttime'] - data['first_game_date']).dt.total_seconds() / (24 * 3600)\n",
++    "\n",
++    "# Ensure non-negative values (just as a safety check)\n",
++    "data['days_since_first_game'] = data['days_since_first_game'].clip(lower=0)\n",
++    "\n",
++    "# Drop first_game_date after computation\n",
++    "data.drop(columns=['first_game_date'], inplace=True)"
++   ],
++   "id": "14ae13a6745474b",
++   "outputs": [],
++   "execution_count": 155
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:43:07.111495Z",
++     "start_time": "2025-03-11T08:43:05.222397Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Calculate days active (number of unique days played)\n",
++    "data['game_date'] = pd.to_datetime(data['starttime']).dt.date\n",
++    "temp_days = data.groupby('name')['game_date'].nunique().reset_index()\n",
++    "temp_days.columns = ['name', 'unique_days_active']\n",
++    "data = pd.merge(data, temp_days, on='name', how='left')\n",
++    "# TODO: Drop game_date"
++   ],
++   "id": "38a968cbbb63468b",
++   "outputs": [],
++   "execution_count": 156
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:43:28.121325Z",
++     "start_time": "2025-03-11T08:43:08.358436Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "import numpy as np\n",
++    "import pandas as pd\n",
++    "\n",
++    "# Ensure 'starttime' is in datetime format\n",
++    "data['starttime'] = pd.to_datetime(data['starttime'])\n",
++    "\n",
++    "# Extract game date (only date, not time)\n",
++    "data['game_date'] = data['starttime'].dt.date\n",
++    "\n",
++    "# Compute total unique days active per player\n",
++    "data['unique_days_active'] = data.groupby('name')['game_date'].transform('nunique')\n",
++    "\n",
++    "# Compute total games per player\n",
++    "data['total_games'] = data.groupby('name')['name'].transform('count')\n",
++    "\n",
++    "# Compute play density safely (avoid division by zero)\n",
++    "data['play_density'] = data['total_games'] / data['unique_days_active'].replace(0, np.nan)\n",
++    "\n",
++    "# Apply log transformation to normalize the distribution\n",
++    "data['log_play_density'] = np.log1p(data['play_density'])\n",
++    "\n",
++    "# Compute rolling play density over the last 7 played days (not just consecutive game sessions)\n",
++    "data['rolling_play_density'] = data.groupby('name')['game_count'].transform(\n",
++    "    lambda x: x.rolling(window=7, min_periods=1).sum()\n",
++    ")\n",
++    "\n",
++    "data['smoothed_play_density'] = data.groupby('name')['rolling_play_density'].transform(lambda x: x.ewm(span=5, adjust=False).mean())\n",
++    "\n",
++    "# Drop temporary columns if not needed\n",
++    "data.drop(columns=['total_games', 'unique_days_active', 'game_date', 'rolling_play_density', 'play_density'], inplace=True)"
++   ],
++   "id": "4b3658d8ba585597",
++   "outputs": [],
++   "execution_count": 157
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:43:52.148527Z",
++     "start_time": "2025-03-11T08:43:52.146011Z"
++    }
++   },
++   "cell_type": "code",
++   "source": "## PROGRESSION METRICS",
++   "id": "2d6bc59080f89b0",
++   "outputs": [],
++   "execution_count": 158
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:43:53.001719Z",
++     "start_time": "2025-03-11T08:43:52.891291Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Calculate cumulative max level reached\n",
++    "data['cum_max_level'] = data.groupby('name')['maxlvl'].cummax()"
++   ],
++   "id": "8f251e82b9637ccb",
++   "outputs": [],
++   "execution_count": 159
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:44:03.047373Z",
++     "start_time": "2025-03-11T08:43:54.875704Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Calculate level progression rate\n",
++    "data['level_progression_rate'] = data['maxlvl'] / data['game_count']\n",
++    "# Smooth it out\n",
++    "data['cum_level_progression_rate'] = data.groupby('name')['level_progression_rate'].transform(lambda x: x.expanding().mean())"
++   ],
++   "id": "1bed6d3244a3a66e",
++   "outputs": [],
++   "execution_count": 160
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:44:14.790204Z",
++     "start_time": "2025-03-11T08:44:04.244233Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "data['points_per_turn'] = data['points'] / data['turns'].where(data['turns'] > 0, np.nan)\n",
++    "data['log_points_per_turn'] = np.log1p(data.groupby('name')['points_per_turn'].transform(lambda x: x.rolling(5, min_periods=1).mean()))"
++   ],
++   "id": "f8845e540184e6c5",
++   "outputs": [],
++   "execution_count": 161
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:44:17.494153Z",
++     "start_time": "2025-03-11T08:44:17.342844Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Calculate relative performance (compared to player's average)\n",
++    "data['avg_points'] = data.groupby('name')['points'].transform('mean')\n",
++    "data['relative_performance'] = data['points'] / (data['avg_points'].replace(0, np.nan) + 1e-5)\n",
++    "\n",
++    "upper_limit = data['relative_performance'].quantile(0.95)\n",
++    "data['relative_performance'] = data['relative_performance'].clip(0, upper_limit)"
++   ],
++   "id": "4136b175522ffd05",
++   "outputs": [],
++   "execution_count": 162
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:44:31.567010Z",
++     "start_time": "2025-03-11T08:44:21.156883Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "import numpy as np\n",
++    "# Compute previous max level per player (for progression tracking)\n",
++    "data['prev_max_level'] = data.groupby('name')['cum_max_level'].shift(1).fillna(0)\n",
++    "\n",
++    "# Compute level improvement per game\n",
++    "data['level_improvement'] = data['cum_max_level'] - data['prev_max_level']\n",
++    "\n",
++    "# Ensure cumulative progression velocity starts at 0\n",
++    "data['cum_progression_velocity'] = data.groupby('name')['level_improvement'].cumsum()\n",
++    "data.loc[data['game_count'] == 1, 'cum_progression_velocity'] = 0\n",
++    "data['rolling_progression_velocity'] = data.groupby('name')['level_improvement'].transform(lambda x: x.rolling(5, min_periods=1).mean())\n",
++    "# Drop temporary column if needed\n",
++    "data.drop(columns=['prev_max_level'], inplace=True)"
++   ],
++   "id": "c8ea7c4d2c663fff",
++   "outputs": [],
++   "execution_count": 163
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:44:36.163188Z",
++     "start_time": "2025-03-11T08:44:35.712081Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Create standardized variables for composite score\n",
++    "persistence_components = [\n",
++    "    'cum_progression_velocity',\n",
++    "    'cum_level_progression_rate',\n",
++    "    'smoothed_play_density',\n",
++    "    'rolling_progression_velocity',\n",
++    "    'log_points_per_turn'\n",
++    "]\n",
++    "\n",
++    "# Ensure all components exist\n",
++    "for component in persistence_components:\n",
++    "    if component not in data.columns:\n",
++    "        print(f\"Warning: Component {component} not found in dataframe\")\n",
++    "        persistence_components.remove(component)\n",
++    "\n",
++    "# Standardize each component\n",
++    "for component in persistence_components:\n",
++    "    mean_val = data[component].mean()\n",
++    "    std_val = data[component].std()\n",
++    "    if std_val > 0:\n",
++    "        data[f'{component}_std'] = (data[component] - mean_val) / std_val\n",
++    "    else:\n",
++    "        data[f'{component}_std'] = 0\n",
++    "\n",
++    "# Calculate composite persistence score\n",
++    "std_components = [f'{component}_std' for component in persistence_components]\n",
++    "data['persistence_score'] = data[std_components].mean(axis=1)\n",
++    "\n",
++    "# Calculate cumulative persistence score\n",
++    "data['cumulative_persistence'] = data.groupby('name')['persistence_score'].cumsum()\n",
++    "data['avg_persistence'] = data.groupby('name')['persistence_score'].transform('mean')\n",
++    "\n",
++    "print(f\"Engineered {len(data.columns) - len(df.columns)} new features for persistence analysis\")"
++   ],
++   "id": "13d9a509dd90c6b4",
++   "outputs": [
++    {
++     "name": "stdout",
++     "output_type": "stream",
++     "text": [
++      "Engineered 26 new features for persistence analysis\n"
++     ]
++    }
++   ],
++   "execution_count": 164
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:45:04.418971Z",
++     "start_time": "2025-03-11T08:44:42.750471Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "from sklearn.preprocessing import StandardScaler\n",
++    "scaler = StandardScaler()\n",
++    "data['game_number_centered'] = scaler.fit_transform(data[['game_count']])\n",
++    "data['game_number_squared'] = data['game_number_centered'] ** 2\n",
++    "\n",
++    "# Calculate rolling statistics by standard deviation (e.g., 3-game windows)\n",
++    "window_size = 3\n",
++    "data['rolling_maxlvl_std'] = data.groupby('name')['maxlvl'].transform(lambda x: x.rolling(window=window_size, min_periods=1).std())\n",
++    "data['rolling_turns_std'] = data.groupby('name')['turns'].transform(lambda x: x.rolling(window=window_size, min_periods=1).std())"
++   ],
++   "id": "f806a9fb6530ecb0",
++   "outputs": [],
++   "execution_count": 165
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T07:36:00.207567Z",
++     "start_time": "2025-03-11T07:35:38.772153Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Compute CV with safe division\n",
++    "data['rolling_maxlvl_mean'] = data.groupby('name')['maxlvl'].transform(lambda x: x.rolling(window=window_size, min_periods=1).mean())\n",
++    "data['rolling_turns_mean'] = data.groupby('name')['turns'].transform(lambda x: x.rolling(window=window_size, min_periods=1).mean())\n",
++    "data['rolling_maxlvl_cv'] = data['rolling_maxlvl_std'] / data['rolling_maxlvl_mean'].replace(0, np.nan).fillna(1)\n",
++    "data['rolling_turns_cv'] = data['rolling_turns_std'] / data['rolling_turns_mean'].replace(0, np.nan).fillna(1)"
++   ],
++   "id": "918826b2017aea21",
++   "outputs": [],
++   "execution_count": 113
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:51:50.937577Z",
++     "start_time": "2025-03-11T08:51:48.834374Z"
++    }
++   },
++   "cell_type": "code",
++   "source": "data.fillna(0, inplace=True)",
++   "id": "57df419a9a5a2cbb",
++   "outputs": [],
++   "execution_count": 172
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:54:17.659982Z",
++     "start_time": "2025-03-11T08:54:17.610632Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "scaler = StandardScaler()\n",
++    "data[['game_number_centered', 'game_number_squared']] = scaler.fit_transform(data[['game_number_centered', 'game_number_squared']])\n"
++   ],
++   "id": "638bb2dfbfc42495",
++   "outputs": [],
++   "execution_count": 176
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:56:49.225268Z",
++     "start_time": "2025-03-11T08:56:48.417101Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "\n",
++    "\n",
++    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
++    "X = data[['cumulative_persistence', 'persistence_score', 'game_number_centered']]\n",
++    "vif_data = pd.DataFrame()\n",
++    "vif_data[\"Feature\"] = X.columns\n",
++    "vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(len(X.columns))]\n",
++    "print(vif_data)"
++   ],
++   "id": "2fa3361962c6a63d",
++   "outputs": [
++    {
++     "name": "stdout",
++     "output_type": "stream",
++     "text": [
++      "                  Feature       VIF\n",
++      "0  cumulative_persistence  2.537115\n",
++      "1       persistence_score  1.144682\n",
++      "2    game_number_centered  2.588748\n"
++     ]
++    }
++   ],
++   "execution_count": 182
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:59:04.140461Z",
++     "start_time": "2025-03-11T08:58:11.473708Z"
++    }
++   },
++   "cell_type": "code",
++   "source": "data.to_csv(\"/code/NetHack-Research/data/processed/features.csv\", index=False)",
++   "id": "bcc517071da09b34",
++   "outputs": [],
++   "execution_count": 184
++  },
++  {
++   "metadata": {},
++   "cell_type": "code",
++   "source": [
++    "import pandas as pd\n",
++    "import statsmodels.formula.api as smf\n",
++    "\n",
++    "# Select relevant columns\n",
++    "lgm_data = data[['name', 'game_count', 'persistence_score', 'cumulative_persistence', 'game_number_centered']]\n",
++    "\n",
++    "# Ensure proper data types\n",
++    "lgm_data = lgm_data.dropna()  # Drop missing values if needed\n",
++    "lgm_data = lgm_data.sort_values(['name', 'game_count'])  # Ensure time order\n"
++   ],
++   "id": "188c18fd1becdb5b",
++   "outputs": [],
++   "execution_count": null
++  },
++  {
++   "metadata": {
++    "ExecuteTime": {
++     "end_time": "2025-03-11T08:39:26.764047Z",
++     "start_time": "2025-03-11T08:30:30.185986Z"
++    }
++   },
++   "cell_type": "code",
++   "source": [
++    "# Define LGM formula\n",
++    "lgm_formula = \"persistence_score ~ game_number_centered + game_number_squared\"\n",
++    "\n",
++    "# Fit the model with random intercepts and slopes\n",
++    "lgm_model = smf.mixedlm(lgm_formula, lgm_data, groups=lgm_data[\"name\"], \n",
++    "                         re_formula=\"1 + game_number_centered\")\n",
++    "\n",
++    "lgm_results = lgm_model.fit()\n",
++    "\n",
++    "# Print summary of model results\n",
++    "print(lgm_results.summary())"
++   ],
++   "id": "898ddc88f1c8ec63",
++   "outputs": [
++    {
++     "ename": "KeyboardInterrupt",
++     "evalue": "",
++     "output_type": "error",
++     "traceback": [
++      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
++      "\u001B[0;31mKeyboardInterrupt\u001B[0m                         Traceback (most recent call last)",
++      "Cell \u001B[0;32mIn[148], line 8\u001B[0m\n\u001B[1;32m      4\u001B[0m \u001B[38;5;66;03m# Fit the model with random intercepts and slopes\u001B[39;00m\n\u001B[1;32m      5\u001B[0m lgm_model \u001B[38;5;241m=\u001B[39m smf\u001B[38;5;241m.\u001B[39mmixedlm(lgm_formula, lgm_data, groups\u001B[38;5;241m=\u001B[39mlgm_data[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mname\u001B[39m\u001B[38;5;124m\"\u001B[39m], \n\u001B[1;32m      6\u001B[0m                          re_formula\u001B[38;5;241m=\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m1 + game_number_centered\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[0;32m----> 8\u001B[0m lgm_results \u001B[38;5;241m=\u001B[39m \u001B[43mlgm_model\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     10\u001B[0m \u001B[38;5;66;03m# Print summary of model results\u001B[39;00m\n\u001B[1;32m     11\u001B[0m \u001B[38;5;28mprint\u001B[39m(lgm_results\u001B[38;5;241m.\u001B[39msummary())\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/regression/mixed_linear_model.py:2191\u001B[0m, in \u001B[0;36mMixedLM.fit\u001B[0;34m(self, start_params, reml, niter_sa, do_cg, fe_pen, cov_pen, free, full_output, method, **fit_kwargs)\u001B[0m\n\u001B[1;32m   2189\u001B[0m \u001B[38;5;66;03m# Try optimizing one or more times\u001B[39;00m\n\u001B[1;32m   2190\u001B[0m \u001B[38;5;28;01mfor\u001B[39;00m j \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mrange\u001B[39m(\u001B[38;5;28mlen\u001B[39m(method)):\n\u001B[0;32m-> 2191\u001B[0m     rslt \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43msuper\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m(\u001B[49m\u001B[43mstart_params\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mpacked\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   2192\u001B[0m \u001B[43m                       \u001B[49m\u001B[43mskip_hessian\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43;01mTrue\u001B[39;49;00m\u001B[43m,\u001B[49m\n\u001B[1;32m   2193\u001B[0m \u001B[43m                       \u001B[49m\u001B[43mmethod\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmethod\u001B[49m\u001B[43m[\u001B[49m\u001B[43mj\u001B[49m\u001B[43m]\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   2194\u001B[0m \u001B[43m                       \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mfit_kwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   2195\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m rslt\u001B[38;5;241m.\u001B[39mmle_retvals[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mconverged\u001B[39m\u001B[38;5;124m'\u001B[39m]:\n\u001B[1;32m   2196\u001B[0m         \u001B[38;5;28;01mbreak\u001B[39;00m\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/base/model.py:566\u001B[0m, in \u001B[0;36mLikelihoodModel.fit\u001B[0;34m(self, start_params, method, maxiter, full_output, disp, fargs, callback, retall, skip_hessian, **kwargs)\u001B[0m\n\u001B[1;32m    563\u001B[0m     \u001B[38;5;28;01mdel\u001B[39;00m kwargs[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124muse_t\u001B[39m\u001B[38;5;124m\"\u001B[39m]\n\u001B[1;32m    565\u001B[0m optimizer \u001B[38;5;241m=\u001B[39m Optimizer()\n\u001B[0;32m--> 566\u001B[0m xopt, retvals, optim_settings \u001B[38;5;241m=\u001B[39m \u001B[43moptimizer\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_fit\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mscore\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mstart_params\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    567\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mfargs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwargs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    568\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mhessian\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mhess\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    569\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mmethod\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmethod\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    570\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mdisp\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdisp\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    571\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mmaxiter\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmaxiter\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    572\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mcallback\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcallback\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    573\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mretall\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mretall\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    574\u001B[0m \u001B[43m                                               \u001B[49m\u001B[43mfull_output\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfull_output\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    575\u001B[0m \u001B[38;5;66;03m# Restore cov_type, cov_kwds and use_t\u001B[39;00m\n\u001B[1;32m    576\u001B[0m optim_settings\u001B[38;5;241m.\u001B[39mupdate(kwds)\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/base/optimizer.py:243\u001B[0m, in \u001B[0;36mOptimizer._fit\u001B[0;34m(self, objective, gradient, start_params, fargs, kwargs, hessian, method, maxiter, full_output, disp, callback, retall)\u001B[0m\n\u001B[1;32m    240\u001B[0m     fit_funcs\u001B[38;5;241m.\u001B[39mupdate(extra_fit_funcs)\n\u001B[1;32m    242\u001B[0m func \u001B[38;5;241m=\u001B[39m fit_funcs[method]\n\u001B[0;32m--> 243\u001B[0m xopt, retvals \u001B[38;5;241m=\u001B[39m \u001B[43mfunc\u001B[49m\u001B[43m(\u001B[49m\u001B[43mobjective\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mgradient\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mstart_params\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfargs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwargs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    244\u001B[0m \u001B[43m                     \u001B[49m\u001B[43mdisp\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdisp\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mmaxiter\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmaxiter\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcallback\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcallback\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    245\u001B[0m \u001B[43m                     \u001B[49m\u001B[43mretall\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mretall\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfull_output\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfull_output\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    246\u001B[0m \u001B[43m                     \u001B[49m\u001B[43mhess\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mhessian\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    248\u001B[0m optim_settings \u001B[38;5;241m=\u001B[39m {\u001B[38;5;124m'\u001B[39m\u001B[38;5;124moptimizer\u001B[39m\u001B[38;5;124m'\u001B[39m: method, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mstart_params\u001B[39m\u001B[38;5;124m'\u001B[39m: start_params,\n\u001B[1;32m    249\u001B[0m                   \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mmaxiter\u001B[39m\u001B[38;5;124m'\u001B[39m: maxiter, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mfull_output\u001B[39m\u001B[38;5;124m'\u001B[39m: full_output,\n\u001B[1;32m    250\u001B[0m                   \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mdisp\u001B[39m\u001B[38;5;124m'\u001B[39m: disp, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mfargs\u001B[39m\u001B[38;5;124m'\u001B[39m: fargs, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mcallback\u001B[39m\u001B[38;5;124m'\u001B[39m: callback,\n\u001B[1;32m    251\u001B[0m                   \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mretall\u001B[39m\u001B[38;5;124m'\u001B[39m: retall, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mextra_fit_funcs\u001B[39m\u001B[38;5;124m\"\u001B[39m: extra_fit_funcs}\n\u001B[1;32m    252\u001B[0m optim_settings\u001B[38;5;241m.\u001B[39mupdate(kwargs)\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/base/optimizer.py:538\u001B[0m, in \u001B[0;36m_fit_bfgs\u001B[0;34m(f, score, start_params, fargs, kwargs, disp, maxiter, callback, retall, full_output, hess)\u001B[0m\n\u001B[1;32m    536\u001B[0m norm \u001B[38;5;241m=\u001B[39m kwargs\u001B[38;5;241m.\u001B[39msetdefault(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mnorm\u001B[39m\u001B[38;5;124m'\u001B[39m, np\u001B[38;5;241m.\u001B[39minf)\n\u001B[1;32m    537\u001B[0m epsilon \u001B[38;5;241m=\u001B[39m kwargs\u001B[38;5;241m.\u001B[39msetdefault(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mepsilon\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;241m1.4901161193847656e-08\u001B[39m)\n\u001B[0;32m--> 538\u001B[0m retvals \u001B[38;5;241m=\u001B[39m \u001B[43moptimize\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfmin_bfgs\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mstart_params\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mscore\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43margs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfargs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    539\u001B[0m \u001B[43m                             \u001B[49m\u001B[43mgtol\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mgtol\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mnorm\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mnorm\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mepsilon\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mepsilon\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    540\u001B[0m \u001B[43m                             \u001B[49m\u001B[43mmaxiter\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmaxiter\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfull_output\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfull_output\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    541\u001B[0m \u001B[43m                             \u001B[49m\u001B[43mdisp\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdisp\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mretall\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mretall\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcallback\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcallback\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    542\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m full_output:\n\u001B[1;32m    543\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m retall:\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_optimize.py:1292\u001B[0m, in \u001B[0;36mfmin_bfgs\u001B[0;34m(f, x0, fprime, args, gtol, norm, epsilon, maxiter, full_output, disp, retall, callback, xrtol, c1, c2, hess_inv0)\u001B[0m\n\u001B[1;32m   1280\u001B[0m opts \u001B[38;5;241m=\u001B[39m {\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mgtol\u001B[39m\u001B[38;5;124m'\u001B[39m: gtol,\n\u001B[1;32m   1281\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mnorm\u001B[39m\u001B[38;5;124m'\u001B[39m: norm,\n\u001B[1;32m   1282\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124meps\u001B[39m\u001B[38;5;124m'\u001B[39m: epsilon,\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m   1288\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mc2\u001B[39m\u001B[38;5;124m'\u001B[39m: c2,\n\u001B[1;32m   1289\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mhess_inv0\u001B[39m\u001B[38;5;124m'\u001B[39m: hess_inv0}\n\u001B[1;32m   1291\u001B[0m callback \u001B[38;5;241m=\u001B[39m _wrap_callback(callback)\n\u001B[0;32m-> 1292\u001B[0m res \u001B[38;5;241m=\u001B[39m \u001B[43m_minimize_bfgs\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mx0\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfprime\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcallback\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcallback\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mopts\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1294\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m full_output:\n\u001B[1;32m   1295\u001B[0m     retlist \u001B[38;5;241m=\u001B[39m (res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mx\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mfun\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mjac\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mhess_inv\u001B[39m\u001B[38;5;124m'\u001B[39m],\n\u001B[1;32m   1296\u001B[0m                res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mnfev\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mnjev\u001B[39m\u001B[38;5;124m'\u001B[39m], res[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mstatus\u001B[39m\u001B[38;5;124m'\u001B[39m])\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_optimize.py:1398\u001B[0m, in \u001B[0;36m_minimize_bfgs\u001B[0;34m(fun, x0, args, jac, callback, gtol, norm, eps, maxiter, disp, return_all, finite_diff_rel_step, xrtol, c1, c2, hess_inv0, **unknown_options)\u001B[0m\n\u001B[1;32m   1395\u001B[0m pk \u001B[38;5;241m=\u001B[39m \u001B[38;5;241m-\u001B[39mnp\u001B[38;5;241m.\u001B[39mdot(Hk, gfk)\n\u001B[1;32m   1396\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[1;32m   1397\u001B[0m     alpha_k, fc, gc, old_fval, old_old_fval, gfkp1 \u001B[38;5;241m=\u001B[39m \\\n\u001B[0;32m-> 1398\u001B[0m              \u001B[43m_line_search_wolfe12\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mmyfprime\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mxk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mpk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mgfk\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1399\u001B[0m \u001B[43m                                  \u001B[49m\u001B[43mold_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mold_old_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mamin\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m1e-100\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1400\u001B[0m \u001B[43m                                  \u001B[49m\u001B[43mamax\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m1e100\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mc1\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mc1\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mc2\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mc2\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1401\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m _LineSearchError:\n\u001B[1;32m   1402\u001B[0m     \u001B[38;5;66;03m# Line search failed to find a better solution.\u001B[39;00m\n\u001B[1;32m   1403\u001B[0m     warnflag \u001B[38;5;241m=\u001B[39m \u001B[38;5;241m2\u001B[39m\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_optimize.py:1134\u001B[0m, in \u001B[0;36m_line_search_wolfe12\u001B[0;34m(f, fprime, xk, pk, gfk, old_fval, old_old_fval, **kwargs)\u001B[0m\n\u001B[1;32m   1120\u001B[0m \u001B[38;5;250m\u001B[39m\u001B[38;5;124;03m\"\"\"\u001B[39;00m\n\u001B[1;32m   1121\u001B[0m \u001B[38;5;124;03mSame as line_search_wolfe1, but fall back to line_search_wolfe2 if\u001B[39;00m\n\u001B[1;32m   1122\u001B[0m \u001B[38;5;124;03msuitable step length is not found, and raise an exception if a\u001B[39;00m\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m   1129\u001B[0m \n\u001B[1;32m   1130\u001B[0m \u001B[38;5;124;03m\"\"\"\u001B[39;00m\n\u001B[1;32m   1132\u001B[0m extra_condition \u001B[38;5;241m=\u001B[39m kwargs\u001B[38;5;241m.\u001B[39mpop(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mextra_condition\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;28;01mNone\u001B[39;00m)\n\u001B[0;32m-> 1134\u001B[0m ret \u001B[38;5;241m=\u001B[39m \u001B[43mline_search_wolfe1\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfprime\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mxk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mpk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mgfk\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1135\u001B[0m \u001B[43m                         \u001B[49m\u001B[43mold_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mold_old_fval\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1136\u001B[0m \u001B[43m                         \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1138\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m ret[\u001B[38;5;241m0\u001B[39m] \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m \u001B[38;5;129;01mand\u001B[39;00m extra_condition \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[1;32m   1139\u001B[0m     xp1 \u001B[38;5;241m=\u001B[39m xk \u001B[38;5;241m+\u001B[39m ret[\u001B[38;5;241m0\u001B[39m] \u001B[38;5;241m*\u001B[39m pk\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_linesearch.py:94\u001B[0m, in \u001B[0;36mline_search_wolfe1\u001B[0;34m(f, fprime, xk, pk, gfk, old_fval, old_old_fval, args, c1, c2, amax, amin, xtol)\u001B[0m\n\u001B[1;32m     90\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m np\u001B[38;5;241m.\u001B[39mdot(gval[\u001B[38;5;241m0\u001B[39m], pk)\n\u001B[1;32m     92\u001B[0m derphi0 \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39mdot(gfk, pk)\n\u001B[0;32m---> 94\u001B[0m stp, fval, old_fval \u001B[38;5;241m=\u001B[39m \u001B[43mscalar_search_wolfe1\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m     95\u001B[0m \u001B[43m        \u001B[49m\u001B[43mphi\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mderphi\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mold_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mold_old_fval\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mderphi0\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m     96\u001B[0m \u001B[43m        \u001B[49m\u001B[43mc1\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mc1\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mc2\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mc2\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mamax\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mamax\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mamin\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mamin\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mxtol\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mxtol\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     98\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m stp, fc[\u001B[38;5;241m0\u001B[39m], gc[\u001B[38;5;241m0\u001B[39m], fval, old_fval, gval[\u001B[38;5;241m0\u001B[39m]\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_linesearch.py:171\u001B[0m, in \u001B[0;36mscalar_search_wolfe1\u001B[0;34m(phi, derphi, phi0, old_phi0, derphi0, c1, c2, amax, amin, xtol)\u001B[0m\n\u001B[1;32m    168\u001B[0m maxiter \u001B[38;5;241m=\u001B[39m \u001B[38;5;241m100\u001B[39m\n\u001B[1;32m    170\u001B[0m dcsrch \u001B[38;5;241m=\u001B[39m DCSRCH(phi, derphi, c1, c2, xtol, amin, amax)\n\u001B[0;32m--> 171\u001B[0m stp, phi1, phi0, task \u001B[38;5;241m=\u001B[39m \u001B[43mdcsrch\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    172\u001B[0m \u001B[43m    \u001B[49m\u001B[43malpha1\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mphi0\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mphi0\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mderphi0\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mderphi0\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mmaxiter\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmaxiter\u001B[49m\n\u001B[1;32m    173\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    175\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m stp, phi1, phi0\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_dcsrch.py:256\u001B[0m, in \u001B[0;36mDCSRCH.__call__\u001B[0;34m(self, alpha1, phi0, derphi0, maxiter)\u001B[0m\n\u001B[1;32m    254\u001B[0m     alpha1 \u001B[38;5;241m=\u001B[39m stp\n\u001B[1;32m    255\u001B[0m     phi1 \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mphi(stp)\n\u001B[0;32m--> 256\u001B[0m     derphi1 \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mderphi\u001B[49m\u001B[43m(\u001B[49m\u001B[43mstp\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    257\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m    258\u001B[0m     \u001B[38;5;28;01mbreak\u001B[39;00m\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_linesearch.py:88\u001B[0m, in \u001B[0;36mline_search_wolfe1.<locals>.derphi\u001B[0;34m(s)\u001B[0m\n\u001B[1;32m     87\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mderphi\u001B[39m(s):\n\u001B[0;32m---> 88\u001B[0m     gval[\u001B[38;5;241m0\u001B[39m] \u001B[38;5;241m=\u001B[39m \u001B[43mfprime\u001B[49m\u001B[43m(\u001B[49m\u001B[43mxk\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m+\u001B[39;49m\u001B[43m \u001B[49m\u001B[43ms\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mpk\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     89\u001B[0m     gc[\u001B[38;5;241m0\u001B[39m] \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;241m1\u001B[39m\n\u001B[1;32m     90\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m np\u001B[38;5;241m.\u001B[39mdot(gval[\u001B[38;5;241m0\u001B[39m], pk)\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:284\u001B[0m, in \u001B[0;36mScalarFunction.grad\u001B[0;34m(self, x)\u001B[0m\n\u001B[1;32m    282\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m np\u001B[38;5;241m.\u001B[39marray_equal(x, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mx):\n\u001B[1;32m    283\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_update_x_impl(x)\n\u001B[0;32m--> 284\u001B[0m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_update_grad\u001B[49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    285\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mg\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:267\u001B[0m, in \u001B[0;36mScalarFunction._update_grad\u001B[0;34m(self)\u001B[0m\n\u001B[1;32m    265\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21m_update_grad\u001B[39m(\u001B[38;5;28mself\u001B[39m):\n\u001B[1;32m    266\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mg_updated:\n\u001B[0;32m--> 267\u001B[0m         \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_update_grad_impl\u001B[49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    268\u001B[0m         \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mg_updated \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mTrue\u001B[39;00m\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:175\u001B[0m, in \u001B[0;36mScalarFunction.__init__.<locals>.update_grad\u001B[0;34m()\u001B[0m\n\u001B[1;32m    174\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mupdate_grad\u001B[39m():\n\u001B[0;32m--> 175\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mg \u001B[38;5;241m=\u001B[39m \u001B[43mgrad_wrapped\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mx\u001B[49m\u001B[43m)\u001B[49m\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:172\u001B[0m, in \u001B[0;36mScalarFunction.__init__.<locals>.grad_wrapped\u001B[0;34m(x)\u001B[0m\n\u001B[1;32m    170\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mgrad_wrapped\u001B[39m(x):\n\u001B[1;32m    171\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mngev \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;241m1\u001B[39m\n\u001B[0;32m--> 172\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m np\u001B[38;5;241m.\u001B[39matleast_1d(\u001B[43mgrad\u001B[49m\u001B[43m(\u001B[49m\u001B[43mnp\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcopy\u001B[49m\u001B[43m(\u001B[49m\u001B[43mx\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m)\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/base/model.py:545\u001B[0m, in \u001B[0;36mLikelihoodModel.fit.<locals>.score\u001B[0;34m(params, *args)\u001B[0m\n\u001B[1;32m    544\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mscore\u001B[39m(params, \u001B[38;5;241m*\u001B[39margs):\n\u001B[0;32m--> 545\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;241m-\u001B[39m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mscore\u001B[49m\u001B[43m(\u001B[49m\u001B[43mparams\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m \u001B[38;5;241m/\u001B[39m nobs\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/regression/mixed_linear_model.py:1630\u001B[0m, in \u001B[0;36mMixedLM.score\u001B[0;34m(self, params, profile_fe)\u001B[0m\n\u001B[1;32m   1624\u001B[0m     params \u001B[38;5;241m=\u001B[39m MixedLMParams\u001B[38;5;241m.\u001B[39mfrom_packed(\n\u001B[1;32m   1625\u001B[0m         params, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mk_fe, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mk_re, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39muse_sqrt,\n\u001B[1;32m   1626\u001B[0m         has_fe\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mFalse\u001B[39;00m)\n\u001B[1;32m   1628\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m profile_fe:\n\u001B[1;32m   1629\u001B[0m     params\u001B[38;5;241m.\u001B[39mfe_params, sing \u001B[38;5;241m=\u001B[39m \\\n\u001B[0;32m-> 1630\u001B[0m         \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mget_fe_params\u001B[49m\u001B[43m(\u001B[49m\u001B[43mparams\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcov_re\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mparams\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mvcomp\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1632\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m sing:\n\u001B[1;32m   1633\u001B[0m         msg \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mRandom effects covariance is singular\u001B[39m\u001B[38;5;124m\"\u001B[39m\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/regression/mixed_linear_model.py:1338\u001B[0m, in \u001B[0;36mMixedLM.get_fe_params\u001B[0;34m(self, cov_re, vcomp, tol)\u001B[0m\n\u001B[1;32m   1336\u001B[0m exog \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mexog_li[group_ix]\n\u001B[1;32m   1337\u001B[0m ex_r, ex2_r \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_aex_r[group_ix], \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_aex_r2[group_ix]\n\u001B[0;32m-> 1338\u001B[0m solver \u001B[38;5;241m=\u001B[39m \u001B[43m_smw_solver\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m1.\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mex_r\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mex2_r\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcov_re_inv\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mvc_vari\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1339\u001B[0m u \u001B[38;5;241m=\u001B[39m solver(\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_endex_li[group_ix])\n\u001B[1;32m   1340\u001B[0m xtxy \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39mdot(exog\u001B[38;5;241m.\u001B[39mT, u)\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/statsmodels/regression/mixed_linear_model.py:501\u001B[0m, in \u001B[0;36m_smw_solver\u001B[0;34m(s, A, AtA, Qi, di)\u001B[0m\n\u001B[1;32m    499\u001B[0m d \u001B[38;5;241m=\u001B[39m qmat\u001B[38;5;241m.\u001B[39mshape[\u001B[38;5;241m0\u001B[39m]\n\u001B[1;32m    500\u001B[0m qmat\u001B[38;5;241m.\u001B[39mflat[m\u001B[38;5;241m*\u001B[39m(d\u001B[38;5;241m+\u001B[39m\u001B[38;5;241m1\u001B[39m)::d\u001B[38;5;241m+\u001B[39m\u001B[38;5;241m1\u001B[39m] \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m di\n\u001B[0;32m--> 501\u001B[0m qmati \u001B[38;5;241m=\u001B[39m \u001B[43mnp\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mlinalg\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msolve\u001B[49m\u001B[43m(\u001B[49m\u001B[43mqmat\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mA\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mT\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    503\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21msolver\u001B[39m(rhs):\n\u001B[1;32m    504\u001B[0m     \u001B[38;5;66;03m# A is tall and qmati is wide, so we want\u001B[39;00m\n\u001B[1;32m    505\u001B[0m     \u001B[38;5;66;03m# A * (qmati * rhs) not (A * qmati) * rhs\u001B[39;00m\n\u001B[1;32m    506\u001B[0m     ql \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39mdot(qmati, rhs)\n",
++      "File \u001B[0;32m<__array_function__ internals>:180\u001B[0m, in \u001B[0;36msolve\u001B[0;34m(*args, **kwargs)\u001B[0m\n",
++      "File \u001B[0;32m/code/NetHack-Research/.venv/lib/python3.10/site-packages/numpy/linalg/linalg.py:400\u001B[0m, in \u001B[0;36msolve\u001B[0;34m(a, b)\u001B[0m\n\u001B[1;32m    398\u001B[0m signature \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mDD->D\u001B[39m\u001B[38;5;124m'\u001B[39m \u001B[38;5;28;01mif\u001B[39;00m isComplexType(t) \u001B[38;5;28;01melse\u001B[39;00m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mdd->d\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m    399\u001B[0m extobj \u001B[38;5;241m=\u001B[39m get_linalg_error_extobj(_raise_linalgerror_singular)\n\u001B[0;32m--> 400\u001B[0m r \u001B[38;5;241m=\u001B[39m \u001B[43mgufunc\u001B[49m\u001B[43m(\u001B[49m\u001B[43ma\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mb\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43msignature\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43msignature\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mextobj\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mextobj\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    402\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m wrap(r\u001B[38;5;241m.\u001B[39mastype(result_t, copy\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mFalse\u001B[39;00m))\n",
++      "\u001B[0;31mKeyboardInterrupt\u001B[0m: "
++     ]
++    }
++   ],
++   "execution_count": 148
++  },
++  {
++   "metadata": {},
++   "cell_type": "code",
++   "source": [
++    "# Extract player-specific parameters\n",
++    "player_params = []\n",
++    "for player, effects in lgm_model.random_effects.items():\n",
++    "    player_params.append({\n",
++    "        'name': player,\n",
++    "        'random_intercept': effects[0],\n",
++    "        'random_slope': effects[1],\n",
++    "        'total_intercept': lgm_model.fe_params[0] + effects[0],\n",
++    "        'total_slope': lgm_model.fe_params[1] + effects[1]\n",
++    "    })\n",
++    "\n",
++    "player_params_df = pd.DataFrame(player_params)\n",
++    "\n",
++    "# Visualize results\n",
++    "plt.figure(figsize=(12, 8))\n",
++    "plt.scatter(\n",
++    "    player_params_df['total_intercept'],\n",
++    "    player_params_df['total_slope'],\n",
++    "    alpha=0.6\n",
++    ")\n",
++    "plt.axhline(y=0, color='gray', linestyle='--', alpha=0.5)\n",
++    "plt.axvline(x=0, color='gray', linestyle='--', alpha=0.5)\n",
++    "plt.xlabel('Initial Persistence (Intercept)')\n",
++    "plt.ylabel('Persistence Growth (Slope)')\n",
++    "plt.title(f'Player Persistence Trajectories')\n",
++    "plt.grid(True, alpha=0.3)\n",
++    "\n",
++    "# Highlight most persistent players (high intercept, positive slope)\n",
++    "top_persistent = player_params_df[\n",
++    "    (player_params_df['total_intercept'] > player_params_df['total_intercept'].median()) &\n",
++    "    (player_params_df['total_slope'] > 0)\n",
++    "].nlargest(10, 'total_slope')\n",
++    "\n",
++    "for _, player in top_persistent.iterrows():\n",
++    "    plt.annotate(\n",
++    "        player['name'],\n",
++    "        (player['total_intercept'], player['total_slope']),\n",
++    "        xytext=(5, 5),\n",
++    "        textcoords='offset points',\n",
++    "        bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"white\", ec=\"gray\", alpha=0.8)\n",
++    "    )\n",
++    "\n",
++    "plt.savefig('persistence_lgm_results.png', dpi=300, bbox_inches='tight')\n",
++    "plt.show()\n",
++    "\n",
++    "# Save the top persistent players\n",
++    "print(\"Top persistent players identified by LGM:\")\n",
++    "print(top_persistent[['name', 'total_intercept', 'total_slope']])\n",
++    "top_persistent.to_csv('top_persistent_players.csv', index=False)"
++   ],
++   "id": "d02e5a97c1d02e92",
++   "outputs": [],
++   "execution_count": null
++  },
++  {
++   "metadata": {},
++   "cell_type": "code",
++   "outputs": [],
++   "execution_count": null,
++   "source": "",
++   "id": "c445474dee18b327"
++  }
++ ],
++ "metadata": {
++  "kernelspec": {
++   "display_name": "Python 3",
++   "language": "python",
++   "name": "python3"
++  },
++  "language_info": {
++   "codemirror_mode": {
++    "name": "ipython",
++    "version": 2
++   },
++   "file_extension": ".py",
++   "mimetype": "text/x-python",
++   "name": "python",
++   "nbconvert_exporter": "python",
++   "pygments_lexer": "ipython2",
++   "version": "2.7.6"
++  }
++ },
++ "nbformat": 4,
++ "nbformat_minor": 5
++}
+diff --git a/references/combos.txt b/references/combos.txt
+new file mode 100644
+index 0000000..e3ce920
+--- /dev/null
++++ b/references/combos.txt
+@@ -0,0 +1,50 @@
++arc hum law
++arc hum neu
++arc dwa law
++arc gno neu
++
++bar hum neu
++bar hum cha
++bar orc cha
++
++cav hum law
++cav hum neu
++cav dwa law
++cav gno neu
++
++hea hum neu
++hea gno neu
++
++kni hum law
++
++mon hum neu
++mon hum law
++mon hum cha
++
++pri hum neu
++pri hum law
++pri hum cha
++pri elf cha
++
++ran hum neu
++ran hum cha
++ran elf cha
++ran gno neu
++ran orc cha
++
++rog hum cha
++rog orc cha
++
++sam hum law
++
++tou hum neu
++
++val hum neu
++val hum law
++val dwa law
++
++wiz hum neu
++wiz hum cha
++wiz elf cha
++wiz gno neu
++wiz orc cha
+\ No newline at end of file
+diff --git a/requirements.txt b/requirements.txt
+index 8de6e36..b48d0b9 100644
+--- a/requirements.txt
++++ b/requirements.txt
+@@ -13,12 +13,28 @@ flake8
+ python-dotenv~=1.0.1
+ 
+ 
+-
+-
+ # Local Package:
+ # tells pip to install the local package in editable mode:
+ -e .
+ nle~=1.1.0
+ setuptools~=75.2.0
+ pandas~=2.2.3
+-seaborn
+\ No newline at end of file
++
++cython
++psutil
++opencv-python
++scikit-build
++pybind11==2.10.3
++numba==0.56.4
++tqdm==4.64.0
++wandb==0.12.21
++numpy==1.23.1
++gym==0.23.0
++pyrallis==0.3.1
++h5py==3.8.0
++nle==0.9.0
++rliable==1.0.8
++matplotlib==3.6.2
++seaborn==0.12.1
++Pillow==9.2.0
++torch
+\ No newline at end of file
+diff --git a/src/data/generate.sh b/src/data/generate.sh
+new file mode 100755
+index 0000000..a576837
+--- /dev/null
++++ b/src/data/generate.sh
+@@ -0,0 +1,13 @@
++#!/bin/bash
++export DATA_PATH="/code/nld-nao/nld-nao-unzipped"
++export SAVE_PATH="/code/NetHack-Research/data/processed/hdf5_data/"
++COMBOS="/code/NetHack-Research/references/combos.txt"
++
++# Read each line for combos
++while IFS=" " read -r role race alignment; do
++    python3 generate_hdf5.py \
++        --data_path="$DATA_PATH" \
++        --save_path="$SAVE_PATH" \
++        --role="$role" --race="$race" --alignment="$alignment" \
++        --num_episodes=700
++done < "$COMBOS"
+diff --git a/generate_dataset.py b/src/data/generate_hdf5.py
+similarity index 84%
+rename from generate_dataset.py
+rename to src/data/generate_hdf5.py
+index bcbc257..8fabe89 100644
+--- a/generate_dataset.py
++++ b/src/data/generate_hdf5.py
+@@ -1,12 +1,13 @@
+ import os
+ import h5py
++import pickle
+ import numpy as np
+ import nle.dataset as nld
+ 
+ import zipfile
+ import random
+ import pyrallis
+-from dataclasses import dataclass
++from dataclasses import dataclass, field
+ from typing import Optional
+ 
+ from tqdm.auto import tqdm
+@@ -16,11 +17,13 @@ from collections import defaultdict
+ @dataclass
+ class Config:
+     data_path: str = "/code/nld-nao/nld-nao-unzipped"
+-    save_path: str = "/code/NetHack-Research/data/raw/converted_data"
++    save_path: str = "/code/NetHack-Research/data/processed/hdf5_data"
++
+     race: Optional[str] = None
+     role: Optional[str] = None
+     alignment: Optional[str] = None
+     gender: Optional[str] = None
++
+     sampling: Optional[str] = None
+     num_episodes: Optional[int] = None
+     num_bins: int = 50
+@@ -28,6 +31,17 @@ class Config:
+     clean_db_after: bool = False
+     compress_after: bool = False
+ 
++    expert_gameids: list = field(default_factory=list)
++
++    def __post_init__(self):
++        expert_games_path = "/code/NetHack-Research/data/processed/experts.pkl"
++        try:
++            with open(expert_games_path, "rb") as fp:
++                self.expert_gameids = pickle.load(fp)
++            print(f"Loaded {len(self.expert_gameids)} expert gameids from {expert_games_path}")
++        except FileNotFoundError:
++            print(f"Warning: {expert_games_path} not found! Processing all games.")
++
+ 
+ def stratified_sample(x, scores, num_samples, num_bins=100):
+     num_total = len(x)
+@@ -89,11 +103,13 @@ def name(role, race, align, gender):
+ @pyrallis.wrap()
+ def main(config: Config):
+     os.makedirs(config.save_path, exist_ok=True)
+-
+     dbfilename = "/code/NetHack-Research/data/raw/nld-nao.db"
++
+     if not nld.db.exists(dbfilename):
+         nld.db.create(dbfilename)
+         nld.add_altorg_directory(config.data_path, "nld-nao", dbfilename)
++    else:
++        print(f"Database already exists.")
+ 
+     dataset = nld.TtyrecDataset(
+         "nld-nao",
+@@ -101,8 +117,11 @@ def main(config: Config):
+         seq_length=1,
+         dbfilename=dbfilename,
+     )
+-    # retrieving and filtering metadata from the dataset
+-    metadata = {game_id: dict(dataset.get_meta(game_id)) for game_id in dataset._gameids}
++
++    # metadata = {game_id: dict(dataset.get_meta(game_id)) for game_id in dataset._gameids}
++
++    # Only process the specific gameids, rather than the entire dataset
++    metadata = {game_id: dict(dataset.get_meta(game_id)) for game_id in config.expert_gameids}
+     metadata = {
+         k: v for k, v in metadata.items() if (
+                 optional_eq(v.get("role", "").lower(), config.role) and
+@@ -113,6 +132,11 @@ def main(config: Config):
+     }
+     file_name = name(config.role, config.race, config.alignment, config.gender)
+ 
++    # skip unrecognized race-role-alignment trajectories
++    if file_name == "any-any-any-any":
++        print(f"Skipping generic 'any-any-any-any' file generation")
++        return
++
+     game_ids = np.array(list(metadata.keys()))
+     assert len(game_ids) != 0, "dataset does not have episodes with such configuration"
+ 
+@@ -162,4 +186,4 @@ def main(config: Config):
+ 
+ 
+ if __name__ == "__main__":
+-    main()
+\ No newline at end of file
++    main()
+diff --git a/src/features/build_features.py b/src/features/build_features.py
+deleted file mode 100644
+index e69de29..0000000
+diff --git a/src/features/expert_extraction.py b/src/features/expert_extraction.py
+new file mode 100644
+index 0000000..97499e8
+--- /dev/null
++++ b/src/features/expert_extraction.py
+@@ -0,0 +1,166 @@
++import pandas as pd
++import pickle
++import numpy as np
++
++
++class ExpertExtraction:
++    def __init__(self, csv_path):
++        self.csv_path = csv_path
++        self.df = pd.read_csv(csv_path)
++
++    def filter_expert_players(self):
++        # Isolate Ascended Games
++        ascended_games = self.df[self.df['death'] == "ascended"]
++
++        # Criterion 1: At least 20 total ascensions
++        total_ascensions = ascended_games.groupby('name').size()
++        criterion_1 = set(total_ascensions[total_ascensions >= 20].index)
++
++        # Criterion 2: At least 8 consecutive ascensions
++        self.df = self.df.sort_values(by=['name', 'realtime'])
++        streaks = self.df.groupby('name').apply(self._longest_consecutive_ascensions)
++        criterion_2 = set(streaks[streaks >= 8].index)
++
++        # Criterion 3: At least one ascension in the top 2% fastest real-time
++        criterion_3 = set(ascended_games[ascended_games['realtime'] <= 18000]['name'].unique())
++
++        # Criterion 4: Ascension under 10,000 turns
++        criterion_4 = set(ascended_games[ascended_games['turns'] < 10000]['name'].unique())
++
++        # Criterion 5: Achieved a difficult conduct (pacifist, foodless, illiterate, or 7+ conducts)
++        criterion_5 = set(
++            ascended_games[ascended_games['conduct'].apply(self._meets_conduct_criteria)]['name'].unique())
++
++        # Combine all criteria according to logical-OR and logical-AND
++
++        # Combine conditions for expert data
++        expert_players = criterion_1.union(criterion_2, criterion_3, criterion_4, criterion_5)
++
++        # Strict Expert generation
++        strict_experts = set(criterion_1) & set(criterion_2) & (set(criterion_3) | set(criterion_4) | set(criterion_5))
++
++        print(f"Number of expert players: {len(expert_players)}")
++        print(f"Number of strict expert players: {len(strict_experts)}")
++
++        return expert_players, strict_experts
++
++    def extract_expert_games(self):
++        min_games = 10
++        expert_players, strict_experts = self.filter_expert_players()
++
++        expert_df = self.df[self.df['name'].isin(expert_players)]
++
++        strict_expert_df = self.df[self.df['name'].isin(strict_experts)]
++
++        build_consistency = self._calc_build_consistency(strict_expert_df)
++
++        # Get top most consistent players
++        top_consistent_players = \
++            (build_consistency.query(f'total_games >= {min_games}').sort_values('build_entropy').head(5)['name'])
++
++        # Filter to games from the most consistent players
++        consistent_df = strict_expert_df[strict_expert_df['name'].isin(top_consistent_players)]
++
++        # Obtain a list of the gameids for all expert games
++        expert_gameids = expert_df["gameid"].unique().tolist()
++        consistent_expert_gameids = consistent_df["gameid"].unique().tolist()
++
++        print(f"Unique expert games: {len(expert_gameids)}")
++        print(f"Unique strict expert games: {len(consistent_expert_gameids)}")
++
++        return expert_gameids, consistent_expert_gameids
++
++    def save_expert_games(self, output_path="/code/NetHack-Research/data/processed/experts.pkl"):
++        expert_games, strict_expert_games = self.extract_expert_games()
++        with open(output_path, 'wb') as fp:
++            pickle.dump(strict_expert_games, fp)
++
++    def save_processed_data(self, output_path="/code/NetHack-Research/data/processed/new_full_data.csv"):
++        # Convert to a set for lookup
++        expert_games, strict_games = self.extract_expert_games()
++        temp_set = set(expert_games)
++
++        # Exclude expert games
++        non_expert_df = self.df[~self.df["gameid"].isin(temp_set)]
++        non_expert_df.to_csv(output_path, index=False)
++
++        print(f"Remaining games dataset saved to {output_path}")
++
++    @staticmethod
++    def _longest_consecutive_ascensions(player_games):
++        count, max_streak = 0, 0
++        for _, row in player_games.iterrows():
++            if row['death'] == "ascended":
++                count += 1
++                max_streak = max(max_streak, count)
++            else:
++                count = 0
++
++        return max_streak
++
++    @staticmethod
++    def _meets_conduct_criteria(conduct_str):
++        if pd.isna(conduct_str):
++            return False
++        conducts = conduct_str.split(',')
++        difficult_conducts = {"pacifist", "foodless", "illiterate"}
++
++        return any(c in conducts for c in difficult_conducts) or len(conducts) >= 7
++
++    @staticmethod
++    def _calc_build_consistency(df):
++        # Create combined build column
++        df['build'] = df['role'] + '-' + df['race'] + '-' + df['align']
++
++        build_stats = []
++        for name, group in df.groupby('name'):
++            # Skip players with too few games
++            if len(group) < 5:
++                continue
++
++            # Get build counts
++            build_counts = group['build'].value_counts()
++            top_build = build_counts.index[0]
++            top_build_count = build_counts.iloc[0]
++            top_build_pct = top_build_count / len(group) * 100
++
++            # Calculate build entropy (lower means more consistent)
++            build_probs = build_counts / len(group)
++            entropy = -sum(p * np.log2(p) for p in build_probs)
++
++            build_stats.append({
++                'name': name,
++                'total_games': len(group),
++                'unique_builds': len(build_counts),
++                'top_build': top_build,
++                'top_build_count': top_build_count,
++                'top_build_percentage': top_build_pct,
++                'build_entropy': entropy
++            })
++
++        return pd.DataFrame(build_stats)
++
++    @staticmethod
++    def _calc_build_frequency(df, expert_names):
++        expert_games = df[df['name'].isin(expert_names)]
++        expert_games['build'] = expert_games['role'] + '-' + expert_games['race'] + '-' + expert_games['align']
++
++        # Count builds
++        build_counts = expert_games['build'].value_counts().reset_index()
++        build_counts.columns = ['build', 'count']
++
++        # Split the build back into components
++        build_counts[['role', 'race', 'align']] = build_counts['build'].str.split('-', expand=True)
++
++        return build_counts, expert_games
++
++
++if __name__ == "__main__":
++    csv_path = "/code/NetHack-Research/data/processed/processed_data.csv"
++    extractor = ExpertExtraction(csv_path)
++
++    # Extract experts and save gameids for behavioral cloning experiments
++    extractor.save_expert_games("/code/NetHack-Research/data/processed/experts.pkl")
++
++    # Save remaining games for persistence processing
++    extractor.save_processed_data("/code/NetHack-Research/data/processed/new_full_data.csv")
+diff --git a/src/features/feature_engineering.py b/src/features/feature_engineering.py
+new file mode 100644
+index 0000000..4b43a96
+--- /dev/null
++++ b/src/features/feature_engineering.py
+@@ -0,0 +1,239 @@
++import pandas as pd
++import numpy as np
++from datetime import timedelta
++
++
++def engineer_persistence_features(df):
++    """
++    Engineer features for persistence analysis in NetHack using a Latent Growth Model approach.
++
++    Parameters:
++    -----------
++    df : pandas.DataFrame
++        DataFrame containing NetHack gameplay data, sorted by player name and starttime
++
++    Returns:
++    --------
++    pandas.DataFrame
++        DataFrame with engineered persistence features
++    """
++    print("Engineering persistence features...")
++
++    # Make a copy to avoid modifying the original dataframe
++    data = df.copy()
++
++    # === TEMPORAL SEQUENCE FEATURES ===
++
++    # Ensure data is sorted properly
++    data = data.sort_values(['name', 'starttime'])
++
++    # Add game sequence number for each player
++    data['game_number'] = data.groupby('name').cumcount() + 1
++
++    # Calculate game duration in minutes
++    data['game_duration_minutes'] = (pd.to_datetime(data['endtime']) -
++                                     pd.to_datetime(data['starttime'])).dt.total_seconds() / 60
++
++    # Calculate time between games (for each player)
++    data['next_game_time'] = data.groupby('name')['starttime'].shift(-1)
++    data['time_to_next_game_hours'] = (pd.to_datetime(data['next_game_time']) -
++                                       pd.to_datetime(data['starttime'])).dt.total_seconds() / 3600
++
++    # Handle NaN values for the last game of each player
++    data['time_to_next_game_hours'] = data['time_to_next_game_hours'].fillna(np.inf)
++
++    # Create quick return indicator (within 24 hours)
++    data['quick_return'] = (data['time_to_next_game_hours'] < 24).astype(int)
++
++    # Calculate days since first game for each player
++    data['first_game_date'] = data.groupby('name')['starttime'].transform('min')
++    data['days_since_first_game'] = (pd.to_datetime(data['starttime']) -
++                                     pd.to_datetime(data['first_game_date'])).dt.total_seconds() / (24 * 3600)
++
++    # Calculate days active (number of unique days played)
++    data['game_date'] = pd.to_datetime(data['starttime']).dt.date
++    temp_days = data.groupby('name')['game_date'].nunique().reset_index()
++    temp_days.columns = ['name', 'unique_days_active']
++    data = pd.merge(data, temp_days, on='name', how='left')
++
++    # Calculate play density (games per day active)
++    temp_density = data.groupby('name').size().reset_index()
++    temp_density.columns = ['name', 'total_games']
++    temp_density = pd.merge(temp_density, temp_days, on='name')
++    temp_density['play_density'] = temp_density['total_games'] / temp_density['unique_days_active']
++    data = pd.merge(data, temp_density[['name', 'play_density']], on='name', how='left')
++
++    # === PROGRESSION METRICS ===
++    # Calculate cumulative max level reached
++    data['cumulative_max_level'] = data.groupby('name')['maxlvl'].cummax()
++
++    # Calculate level progression rate
++    data['level_progression_rate'] = data['maxlvl'] / data['game_number']
++
++    # Calculate normalized score (points per turn)
++    data['points_per_turn'] = data['points'] / data['turns'].replace(0, 1)
++
++    # Calculate relative performance (compared to player's average)
++    data['avg_points'] = data.groupby('name')['points'].transform('mean')
++    data['relative_performance'] = data['points'] / data['avg_points'].replace(0, 1)
++
++    # Calculate progression velocity (change in max level)
++    data['prev_max_level'] = data.groupby('name')['cumulative_max_level'].shift(1).fillna(0)
++    data['level_improvement'] = data['cumulative_max_level'] - data['prev_max_level']
++
++    # === BUILD CONSISTENCY FEATURES ===
++
++    # Create combined build column
++    data['build'] = data['role'] + '-' + data['race'] + '-' + data['align']
++
++    # Calculate build consistency
++    # 1. Previous build
++    data['prev_build'] = data.groupby('name')['build'].shift(1)
++    data['same_build_as_prev'] = (data['build'] == data['prev_build']).astype(int)
++
++    # 2. Build streak (consecutive same builds)
++    data['build_change'] = (data['build'] != data['prev_build']).astype(int)
++    data['build_streak_id'] = data.groupby('name')['build_change'].cumsum()
++
++    # Count occurrences of each build_streak_id
++    build_streak_counts = data.groupby(['name', 'build_streak_id']).size().reset_index(name='streak_length')
++    data = pd.merge(
++        data,
++        build_streak_counts,
++        on=['name', 'build_streak_id'],
++        how='left'
++    )
++
++    # 3. Calculate top build percentage
++    build_counts = data.groupby(['name', 'build']).size().reset_index(name='build_count')
++    player_counts = data.groupby('name').size().reset_index(name='player_total')
++    build_stats = pd.merge(build_counts, player_counts, on='name')
++    build_stats['build_percentage'] = (build_stats['build_count'] / build_stats['player_total']) * 100
++
++    # Get top build for each player
++    top_builds = build_stats.loc[build_stats.groupby('name')['build_count'].idxmax()]
++    top_builds = top_builds[['name', 'build', 'build_percentage']]
++    top_builds.columns = ['name', 'top_build', 'top_build_percentage']
++
++    data = pd.merge(data, top_builds, on='name', how='left')
++    data['is_top_build'] = (data['build'] == data['top_build']).astype(int)
++
++    # === DEATH & RECOVERY FEATURES ===
++
++    # Create death type categories
++    death_categories = {
++        'quit': 'voluntary',
++        'escaped': 'success',
++        'ascended': 'success',
++        'killed by': 'monster',
++        'petrified by': 'monster',
++        'poisoned by': 'monster',
++        'drowned': 'environment',
++        'burned by': 'environment',
++        'zapped': 'self',
++        'fell': 'environment',
++        'slipped': 'environment'
++    }
++
++    # Categorize deaths
++    for category, keywords in death_categories.items():
++        if category == 'quit' or category == 'escaped' or category == 'ascended':
++            data.loc[data['death'] == category, 'death_category'] = keywords
++        else:
++            data.loc[data['death'].str.contains(category, case=False, na=False), 'death_category'] = keywords
++
++    # Fill any uncategorized deaths
++    data['death_category'] = data['death_category'].fillna('other')
++
++    # Check if player returned after a negative outcome (not quit/success)
++    data['negative_outcome'] = (~data['death_category'].isin(['voluntary', 'success'])).astype(int)
++    data['prev_negative'] = data.groupby('name')['negative_outcome'].shift(1).fillna(0)
++    data['returned_after_negative'] = (data['prev_negative'] == 1).astype(int)
++
++    # === CONDUCT DIFFICULTY FEATURES ===
++
++    # Parse conducts into separate columns
++    common_conducts = ['foodless', 'vegan', 'vegetarian', 'atheist', 'weaponless',
++                       'pacifist', 'illiterate', 'polypileless', 'polyselfless', 'wishless']
++
++    for conduct in common_conducts:
++        data[f'conduct_{conduct}'] = data['conduct'].str.contains(conduct, case=False, na=False).astype(int)
++
++    # Count total conducts per game
++    data['total_conducts'] = data[['conduct_' + c for c in common_conducts]].sum(axis=1)
++
++    # Calculate conduct difficulty score (weighted sum)
++    conduct_weights = {
++        'foodless': 3,
++        'pacifist': 3,
++        'illiterate': 2.5,
++        'weaponless': 2,
++        'atheist': 2,
++        'wishless': 1.5,
++        'polypileless': 1,
++        'polyselfless': 1,
++        'vegan': 1,
++        'vegetarian': 0.5
++    }
++
++    data['conduct_difficulty'] = sum(data[f'conduct_{c}'] * w for c, w in conduct_weights.items())
++
++    # Calculate average conduct difficulty for each player
++    data['avg_conduct_difficulty'] = data.groupby('name')['conduct_difficulty'].transform('mean')
++    data['relative_conduct_difficulty'] = data['conduct_difficulty'] / data['avg_conduct_difficulty'].replace(0, 1)
++
++    # === LGM-SPECIFIC FEATURES ===
++
++    # Create centered and squared terms for growth modeling
++    data['game_number_centered'] = data.groupby('name')['game_number'].transform(
++        lambda x: x - x.mean()
++    )
++    data['game_number_squared'] = data['game_number_centered'] ** 2
++
++    # Calculate rolling statistics (e.g., 3-game windows)
++    window_size = 3
++    data['rolling_max_level'] = data.groupby('name')['maxlvl'].rolling(
++        window=window_size, min_periods=1
++    ).mean().reset_index(level=0, drop=True)
++
++    data['rolling_points'] = data.groupby('name')['points'].rolling(
++        window=window_size, min_periods=1
++    ).mean().reset_index(level=0, drop=True)
++
++    # === PERSISTENCE COMPOSITE SCORE ===
++
++    # Create standardized variables for composite score
++    persistence_components = [
++        'quick_return',
++        'level_progression_rate',
++        'streak_length',
++        'returned_after_negative',
++        'relative_conduct_difficulty'
++    ]
++
++    # Ensure all components exist
++    for component in persistence_components:
++        if component not in data.columns:
++            print(f"Warning: Component {component} not found in dataframe")
++            persistence_components.remove(component)
++
++    # Standardize each component
++    for component in persistence_components:
++        mean_val = data[component].mean()
++        std_val = data[component].std()
++        if std_val > 0:
++            data[f'{component}_std'] = (data[component] - mean_val) / std_val
++        else:
++            data[f'{component}_std'] = 0
++
++    # Calculate composite persistence score
++    std_components = [f'{component}_std' for component in persistence_components]
++    data['persistence_score'] = data[std_components].mean(axis=1)
++
++    # Calculate cumulative persistence score
++    data['cumulative_persistence'] = data.groupby('name')['persistence_score'].cumsum()
++    data['avg_persistence'] = data.groupby('name')['persistence_score'].transform('mean')
++
++    print(f"Engineered {len(data.columns) - len(df.columns)} new features for persistence analysis")
++
++    return data
+\ No newline at end of file
+diff --git a/src/features/persistence_features.py b/src/features/persistence_features.py
+new file mode 100644
+index 0000000..b0638d5
+--- /dev/null
++++ b/src/features/persistence_features.py
+@@ -0,0 +1,105 @@
++import numpy as np
++import pandas as pd
++from tabulate import tabulate
++
++
++def categorize_deaths(data):
++    """
++    Categorizes deaths into predefined categories.
++    """
++    death_map = {
++        'quit': 'voluntary', 'escaped': 'success', 'ascended': 'success',
++        'killed by': 'monster', 'petrified by': 'monster', 'poisoned by': 'monster',
++        'turned to': 'environment', 'drowned': 'environment', 'burned by': 'environment',
++        'fell': 'environment', 'slipped': 'environment', 'zapped': 'self',
++        'choked': 'self'
++    }
++
++    data['death_category'] = 'other'
++    for keyword, category in death_map.items():
++        data.loc[data['death'].str.contains(keyword, case=False, na=False), 'death_category'] = category
++
++    return data
++
++
++def track_failure_streaks(data):
++    """
++    Tracks failure streaks and assigns unique streak IDs.
++    Also, captures the last failure streak before ascension properly.
++    """
++    # Identify failure events
++    data['failure'] = (data['death_category'] != 'success').astype(int)
++
++    # Identify new failure streaks
++    data['new_failure_streak'] = data.groupby('name')['failure'].diff().fillna(0) > 0
++    data['failure_streak_id'] = data.groupby('name')['new_failure_streak'].cumsum()
++
++    # Compute failure streak lengths
++    failure_streak_lengths = data[data['failure'] == 1].groupby(['name', 'failure_streak_id']).size().reset_index(
++        name='failure_streak_length')
++
++    # Merge failure streak lengths
++    data = data.merge(failure_streak_lengths, on=['name', 'failure_streak_id'], how='left')
++    data['failure_streak_length'] = data['failure_streak_length'].fillna(0)
++
++    # Identify ascension events
++    data['ascended'] = (data['death_category'] == 'success') & (data['death'] == 'ascended')
++
++    # Track the last failure streak before ascension per player
++    data['failure_streak_before_ascension'] = 0
++    for player in data['name'].unique():
++        player_data = data[data['name'] == player]
++        last_failure_streak = 0
++        for idx, row in player_data.iterrows():
++            if row['ascended']:  # If the player ascended, assign the last failure streak
++                data.at[idx, 'failure_streak_before_ascension'] = last_failure_streak
++            if row['failure']:  # Update the last failure streak if it’s a failure
++                last_failure_streak = row['failure_streak_length']
++
++    return data
++
++
++def track_success_after_failure(data):
++    data['rolling_failures'] = data.groupby('name')['failure'].transform(
++        lambda x: x.rolling(window=5, min_periods=1).sum())
++    data['success_after_failure'] = (data['death_category'] == 'success') & (data['rolling_failures'] > 3)
++    data['rolling_success_after_failure'] = data.groupby('name')['success_after_failure'].transform(
++        lambda x: x.rolling(5, min_periods=1).sum())
++    data['rolling_success_after_failure'] /= data.groupby('name')['gameid'].transform('count')
++
++    return data
++
++
++def compute_persistence_score(data):
++    data['persistence_score'] = np.sqrt(data['failure_streak_before_ascension'])
++    data.loc[data['success_after_failure'], 'persistence_score'] += 0.5
++
++    max_persistence = data['persistence_score'].max()
++    if max_persistence > 0:
++        data['persistence_score'] = data['persistence_score'] / max_persistence
++
++    return data
++
++
++def process_persistence_features(data):
++    """
++    Applies all persistence-related feature transformations to the dataset.
++    """
++    data = categorize_deaths(data)
++    data = track_failure_streaks(data)
++    data = track_success_after_failure(data)
++    data = compute_persistence_score(data)
++
++    return data
++
++
++if __name__ == "__main__":
++    csv_path = "/code/NetHack-Research/data/processed/new_full_data.csv"
++
++    df = pd.read_csv(csv_path)
++
++    data = process_persistence_features(df)
++
++    print(tabulate(data[['name', 'failure_streak_before_ascension', 'persistence_score']].head(20),
++                   headers='keys', tablefmt='pretty'))
++
+diff --git a/src/models/.gitkeep b/src/models/.gitkeep
+deleted file mode 100644
+index e69de29..0000000
+diff --git a/src/models/bco.py b/src/models/bco.py
+index 33a9587..182f355 100644
+--- a/src/models/bco.py
++++ b/src/models/bco.py
+@@ -1,5 +1,5 @@
+ import pyrallis
+-from dataclasses import dataclass, asdict
++from dataclasses import dataclass, asdict, field
+ import random
+ import wandb
+ import os
+@@ -18,15 +18,12 @@ from multiprocessing import set_start_method
+ from katakomba.env import NetHackChallenge, OfflineNetHackChallengeWrapper
+ from katakomba.nn.chaotic_dwarf import TopLineEncoder, BottomLinesEncoder, ScreenEncoder
+ from katakomba.utils.render import SCREEN_SHAPE, render_screen_image
+-from katakomba.utils.datasets import SequentialBuffer
+ from katakomba.utils.misc import Timeit
+-from typing import Optional, Tuple, List, Dict
++from typing import Optional, Tuple, List, Dict, Any
+ 
+-# Import our custom adapter
+-from nao_dataset_adapter import extend_offline_wrapper
+-
+-# Extend the wrapper to support human data
+-extend_offline_wrapper()
++# Import our custom modules
++from src.utils.dataset import StateOnlyDataset
++from src.utils.buffer import StateOnlySequentialBuffer
+ 
+ torch.backends.cudnn.benchmark = True
+ DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
+@@ -34,17 +31,15 @@ DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
+ 
+ @dataclass
+ class TrainConfig:
+-    character: str = "mon-hum-neu"
++    character: str = "tou-hum-neu"  # Default character
+     data_mode: str = "compressed"
+-    data_dir: Optional[str] = None  # Custom directory for HDF5 files
+-
+-    # Set to "human" to use NLD-NAO human data
+-    data_scale: str = "human"
++    size: str = "small"
++    data_path: str = "/code/NetHack-Research/data/processed/hdf5_data/"
+ 
+     # Wandb logging
+     project: str = "NetHack"
+-    group: str = "human_bc_inverse"
+-    name: str = "bc_inverse"
++    group: str = "inverse_bc"
++    name: str = "inverse_bc"
+     version: int = 0
+ 
+     # Model
+@@ -53,10 +48,13 @@ class TrainConfig:
+     use_prev_action: bool = True
+     rnn_dropout: float = 0.0
+ 
+-    # Inverse model settings
++    # Inverse Model
++    use_inverse_model: bool = True
++    inverse_model_path: Optional[str] = None
++    train_inverse_model: bool = False
++    inverse_model_lr: float = 1e-4
+     inverse_model_weight: float = 1.0
+-    use_difference_vector: bool = False
+-    inverse_model_warmup: int = 1000
++    use_difference_vector: bool = False  # For the inverse model
+ 
+     # Training
+     update_steps: int = 25_000
+@@ -73,6 +71,11 @@ class TrainConfig:
+     eval_seed: int = 50
+     train_seed: int = 42
+ 
++    # These will be set in main.py
++    role: Any = None
++    race: Any = None
++    align: Any = None
++
+     def __post_init__(self):
+         self.group = f"{self.group}-v{str(self.version)}"
+         self.name = f"{self.name}-{self.character}-{str(uuid.uuid4())[:8]}"
+@@ -105,46 +108,6 @@ def dict_to_tensor(data: Dict[str, np.ndarray], device: str) -> Dict[str, torch.
+     return {k: torch.as_tensor(v, device=device) for k, v in data.items()}
+ 
+ 
+-class InverseModel(nn.Module):
+-    def __init__(
+-            self,
+-            h_dim: int,
+-            action_space: int,
+-            use_difference_vector: bool = False
+-    ):
+-        super(InverseModel, self).__init__()
+-        self.h_dim = h_dim
+-        self.use_difference_vector = use_difference_vector
+-        if not use_difference_vector:
+-            self.h_dim *= 2
+-        self.action_space = action_space
+-
+-        self.fwd_model = nn.Sequential(
+-            nn.Linear(self.h_dim, 128),
+-            nn.ELU(inplace=True),
+-            nn.Linear(128, 128),
+-            nn.ELU(inplace=True),
+-            nn.Linear(128, action_space),
+-        )
+-
+-    def forward(self, obs):
+-        """
+-        Input:
+-            obs: encoded states of shape [T, B, h_dim]
+-
+-        Output:
+-            action_logits: predicted actions of shape [T-1, B, action_space]
+-        """
+-        T, B, _ = obs.shape
+-        if self.use_difference_vector:
+-            x = obs[1:] - obs[:-1]  # [T-1, B, h_dim]
+-        else:
+-            x = torch.cat([obs[:-1], obs[1:]], dim=-1)  # [T-1, B, 2*h_dim]
+-
+-        action_logits = self.fwd_model(x)  # [T-1, B, action_space]
+-        return action_logits
+-
+-
+ class Actor(nn.Module):
+     def __init__(
+             self,
+@@ -152,8 +115,7 @@ class Actor(nn.Module):
+             rnn_hidden_dim: int = 512,
+             rnn_layers: int = 1,
+             rnn_dropout: float = 0.0,
+-            use_prev_action: bool = True,
+-            use_difference_vector: bool = False
++            use_prev_action: bool = True
+     ):
+         super().__init__()
+         # Action dimensions and prev actions
+@@ -186,13 +148,6 @@ class Actor(nn.Module):
+         )
+         self.head = nn.Linear(rnn_hidden_dim, self.num_actions)
+ 
+-        # Inverse model for action prediction
+-        self.inverse_model = InverseModel(
+-            h_dim=rnn_hidden_dim,
+-            action_space=self.num_actions,
+-            use_difference_vector=use_difference_vector
+-        )
+-
+     def forward(self, inputs, state=None):
+         B, T, C, H, W = inputs["screen_image"].shape
+         topline = inputs["tty_chars"][..., 0, :]
+@@ -218,13 +173,9 @@ class Actor(nn.Module):
+ 
+         encoded_state = torch.cat(encoded_state, dim=1)
+         core_output, new_state = self.rnn(encoded_state.view(B, T, -1), state)
+-        policy_logits = self.head(core_output)
++        logits = self.head(core_output)
+ 
+-        # Get inverse model predictions
+-        core_output_t = core_output.transpose(0, 1)  # [T, B, h_dim]
+-        inverse_logits = self.inverse_model(core_output_t)  # [T-1, B, action_space]
+-
+-        return policy_logits, inverse_logits, new_state, core_output
++        return logits, new_state
+ 
+     @torch.no_grad()
+     def vec_act(self, obs, state=None, device="cpu"):
+@@ -233,11 +184,49 @@ class Actor(nn.Module):
+             "screen_image": torch.tensor(obs["screen_image"][:, None], device=device),
+             "prev_actions": torch.tensor(obs["prev_actions"][:, None], dtype=torch.long, device=device)
+         }
+-        policy_logits, _, new_state, _ = self(inputs, state)
+-        actions = torch.argmax(policy_logits.squeeze(1), dim=-1)
++        logits, new_state = self(inputs, state)
++        actions = torch.argmax(logits.squeeze(1), dim=-1)
+         return actions.cpu().numpy(), new_state
+ 
+ 
++class InverseModel(nn.Module):
++    """Inverse model that predicts actions from state transitions"""
++
++    def __init__(self, h_dim, action_space, use_difference_vector=False):
++        super().__init__()
++        self.h_dim = h_dim
++        self.use_difference_vector = use_difference_vector
++        if not use_difference_vector:
++            self.h_dim *= 2
++        self.action_space = action_space
++
++        self.fwd_model = nn.Sequential(
++            nn.Linear(self.h_dim, 128),
++            nn.ELU(inplace=True),
++            nn.Linear(128, 128),
++            nn.ELU(inplace=True),
++            nn.Linear(128, action_space),
++        )
++
++    def forward(self, obs):
++        """
++        Args:
++            obs: Tensor of shape [T, B, H] where T is time, B is batch size, H is hidden dim
++                 These are the encoded state representations.
++        Returns:
++            pred_a: Predicted action logits
++        """
++        T, B, *_ = obs.shape
++        if self.use_difference_vector:
++            x = obs[1:] - obs[:-1]
++        else:
++            x = torch.cat([obs[:-1], obs[1:]], dim=-1)
++        pred_a = self.fwd_model(x)
++        # Add dummy action predictions for the last timestep
++        off_by_one = torch.ones((1, B, self.action_space), device=x.device) * -1e9
++        return torch.cat([pred_a, off_by_one], dim=0)
++
++
+ @torch.no_grad()
+ def vec_evaluate(
+         vec_env: AsyncVectorEnv,
+@@ -249,12 +238,16 @@ def vec_evaluate(
+     actor.eval()
+     # set seed for reproducibility (reseed=False by default)
+     vec_env.seed(seed)
++    # all this work is needed to mitigate bias for shorter
++    # episodes during vectorized evaluation, for more see:
++    # https://github.com/DLR-RM/stable-baselines3/issues/402
+     n_envs = vec_env.num_envs
+     episode_rewards = []
+     episode_lengths = []
+     episode_depths = []
+ 
+     episode_counts = np.zeros(n_envs, dtype="int")
++    # Divides episodes among different sub environments in the vector as evenly as possible
+     episode_count_targets = np.array([(num_episodes + i) // n_envs for i in range(n_envs)], dtype="int")
+ 
+     current_rewards = np.zeros(n_envs)
+@@ -265,6 +258,7 @@ def vec_evaluate(
+     rnn_states = None
+     pbar = tqdm(total=num_episodes)
+     while (episode_counts < episode_count_targets).any():
++        # faster to do this here for entire batch, than in wrappers for each env
+         observations["screen_image"] = render_screen_image(
+             tty_chars=observations["tty_chars"][:, np.newaxis, ...],
+             tty_colors=observations["tty_colors"][:, np.newaxis, ...],
+@@ -312,8 +306,37 @@ def vec_evaluate(
+     return result
+ 
+ 
+-@pyrallis.wrap()
++def extract_encoded_states(actor, batch, device):
++    """Extract encoded states from the actor's encoders"""
++    B, T, C, H, W = batch["screen_image"].shape
++    topline = batch["tty_chars"][..., 0, :]
++    bottom_line = batch["tty_chars"][..., -2:, :]
++
++    encoded_state = [
++        actor.topline_encoder(
++            topline.float(memory_format=torch.contiguous_format).view(T * B, -1)
++        ),
++        actor.bottomline_encoder(
++            bottom_line.float(memory_format=torch.contiguous_format).view(T * B, -1)
++        ),
++        actor.screen_encoder(
++            batch["screen_image"]
++            .float(memory_format=torch.contiguous_format)
++            .view(T * B, C, H, W)
++        ),
++    ]
++
++    if actor.use_prev_action and "prev_actions" in batch:
++        encoded_state.append(
++            F.one_hot(batch["prev_actions"], actor.num_actions).view(T * B, -1)
++        )
++
++    encoded_state = torch.cat(encoded_state, dim=1)
++    return encoded_state.view(T, B, -1)
++
++
+ def train(config: TrainConfig):
++    """Main training function for behavioral cloning with inverse model integration"""
+     print(f"Device: {DEVICE}")
+     wandb.init(
+         config=asdict(config),
+@@ -345,50 +368,75 @@ def train(config: TrainConfig):
+         copy=False
+     )
+ 
+-    # Load dataset using the extended wrapper
+-    dataset = tmp_env.get_dataset(
+-        scale=config.data_scale,
++    # Create our actor model
++    actor = Actor(
++        action_dim=eval_env.single_action_space.n,
++        use_prev_action=config.use_prev_action,
++        rnn_hidden_dim=config.rnn_hidden_dim,
++        rnn_layers=config.rnn_layers,
++        rnn_dropout=config.rnn_dropout,
++    ).to(DEVICE)
++
++    # Create inverse model if needed
++    inverse_model = None
++    if config.use_inverse_model:
++        print("Creating inverse model")
++        inverse_model = InverseModel(
++            h_dim=actor.h_dim,
++            action_space=eval_env.single_action_space.n,
++            use_difference_vector=config.use_difference_vector
++        ).to(DEVICE)
++
++        # Load pretrained inverse model if provided
++        if config.inverse_model_path and os.path.exists(config.inverse_model_path):
++            print(f"Loading inverse model from {config.inverse_model_path}")
++            inverse_model.load_state_dict(torch.load(config.inverse_model_path))
++
++    # Create dataset and buffer
++    state_only_dataset = StateOnlyDataset(
++        role=config.role,
++        race=config.race,
++        align=config.align,
+         mode=config.data_mode,
+-        data_dir=config.data_dir
++        inverse_model=inverse_model,
++        device=DEVICE
+     )
+ 
+-    buffer = SequentialBuffer(
+-        dataset=dataset,
++    buffer = StateOnlySequentialBuffer(
++        dataset=state_only_dataset,
+         seq_len=config.seq_len,
+         batch_size=config.batch_size,
++        inverse_model=inverse_model,
++        device=DEVICE,
+         seed=config.train_seed,
+-        add_next_step=True  # We need next steps for the inverse model
++        add_next_step=False
+     )
+ 
+     tp = ThreadPoolExecutor(max_workers=config.render_processes)
+ 
+-    actor = Actor(
+-        action_dim=eval_env.single_action_space.n,
+-        use_prev_action=config.use_prev_action,
+-        rnn_hidden_dim=config.rnn_hidden_dim,
+-        rnn_layers=config.rnn_layers,
+-        rnn_dropout=config.rnn_dropout,
+-        use_difference_vector=config.use_difference_vector
+-    ).to(DEVICE)
++    print("Number of parameters:", sum(p.numel() for p in actor.parameters()))
+ 
++    # Set up optimizers
+     no_decay_params, decay_params = filter_wd_params(actor)
+     optim = torch.optim.AdamW([
+         {"params": no_decay_params, "weight_decay": 0.0},
+         {"params": decay_params, "weight_decay": config.weight_decay}
+     ], lr=config.learning_rate)
+-    print("Number of parameters:", sum(p.numel() for p in actor.parameters()))
++
++    # Separate optimizer for inverse model if we're training it
++    inverse_optim = None
++    if config.use_inverse_model and config.train_inverse_model:
++        inv_no_decay, inv_decay = filter_wd_params(inverse_model)
++        inverse_optim = torch.optim.AdamW([
++            {"params": inv_no_decay, "weight_decay": 0.0},
++            {"params": inv_decay, "weight_decay": config.weight_decay}
++        ], lr=config.inverse_model_lr)
+ 
+     scaler = torch.cuda.amp.GradScaler()
+ 
+     rnn_state = None
+     prev_actions = torch.zeros((config.batch_size, 1), dtype=torch.long, device=DEVICE)
+ 
+-    # Define cross-entropy loss function for the inverse model
+-    ce_loss = nn.CrossEntropyLoss()
+-
+-    # Keep track of best inverse actions for updating the dataset
+-    best_inverse_actions = {}
+-
+     for step in trange(1, config.update_steps + 1, desc="Training"):
+         with Timeit() as timer:
+             batch = buffer.sample()
+@@ -409,4 +457,132 @@ def train(config: TrainConfig):
+             step=step,
+         )
+ 
+-        with Timeit() as timer
+\ No newline at end of file
++        with Timeit() as timer:
++            with torch.cuda.amp.autocast():
++                # Prepare inputs with previous actions
++                if "prev_actions" not in batch:
++                    batch["prev_actions"] = torch.cat(
++                        [prev_actions.long(), batch["actions"][:, :-1].long()], dim=1
++                    )
++
++                # Forward pass through actor
++                logits, rnn_state = actor(
++                    inputs={
++                        "screen_image": batch["screen_image"],
++                        "tty_chars": batch["tty_chars"],
++                        "prev_actions": batch["prev_actions"]
++                    },
++                    state=rnn_state,
++                )
++                rnn_state = [a.detach() for a in rnn_state]
++
++                # Calculate policy loss
++                dist = Categorical(logits=logits)
++                policy_loss = -dist.log_prob(batch["actions"]).mean()
++
++                # Update prev_actions for next iteration
++                prev_actions = batch["actions"][:, -1].unsqueeze(-1)
++
++                # Calculate inverse model loss if needed
++                inverse_loss = torch.tensor(0.0, device=DEVICE)
++                if config.use_inverse_model and config.train_inverse_model:
++                    # Extract encoded states for inverse model
++                    encoded_states = extract_encoded_states(actor, batch, DEVICE)
++
++                    # Forward pass through inverse model
++                    inverse_logits = inverse_model(encoded_states)
++
++                    # Calculate loss (ignore last timestep)
++                    inverse_loss = F.cross_entropy(
++                        inverse_logits[:-1].reshape(-1, inverse_logits.shape[-1]),
++                        batch["actions"][:, 1:].reshape(-1)
++                    )
++
++                # Combine losses
++                if config.use_inverse_model and config.train_inverse_model:
++                    loss = policy_loss + config.inverse_model_weight * inverse_loss
++                else:
++                    loss = policy_loss
++
++        wandb.log({"times/forward_pass": timer.elapsed_time_gpu}, step=step)
++
++        with Timeit() as timer:
++            scaler.scale(loss).backward()
++
++            if config.clip_grad_norm is not None:
++                scaler.unscale_(optim)
++                torch.nn.utils.clip_grad_norm_(actor.parameters(), config.clip_grad_norm)
++
++                if inverse_optim is not None:
++                    scaler.unscale_(inverse_optim)
++                    torch.nn.utils.clip_grad_norm_(inverse_model.parameters(), config.clip_grad_norm)
++
++            scaler.step(optim)
++            if inverse_optim is not None:
++                scaler.step(inverse_optim)
++
++            scaler.update()
++            optim.zero_grad(set_to_none=True)
++            if inverse_optim is not None:
++                inverse_optim.zero_grad(set_to_none=True)
++
++        wandb.log({"times/backward_pass": timer.elapsed_time_gpu}, step=step)
++
++        # Log metrics
++        log_dict = {
++            "loss/policy": policy_loss.detach().item(),
++            "transitions": config.batch_size * config.seq_len * step,
++        }
++
++        if config.use_inverse_model and config.train_inverse_model:
++            log_dict.update({
++                "loss/inverse": inverse_loss.detach().item(),
++                "loss/total": loss.detach().item(),
++            })
++
++        wandb.log(log_dict, step=step)
++
++        # Evaluation
++        if step % config.eval_every == 0:
++            with Timeit() as timer:
++                eval_stats = vec_evaluate(
++                    eval_env, actor, config.eval_episodes, config.eval_seed, device=DEVICE
++                )
++            raw_returns = eval_stats.pop("reward_raw")
++            raw_depths = eval_stats.pop("depth_raw")
++            normalized_scores = tmp_env.get_normalized_score(raw_returns)
++
++            wandb.log({
++                "times/evaluation_gpu": timer.elapsed_time_gpu,
++                "times/evaluation_cpu": timer.elapsed_time_cpu,
++            }, step=step)
++
++            wandb.log(dict(
++                eval_stats,
++                **{"transitions": config.batch_size * config.seq_len * step},
++            ), step=step)
++
++            # Save checkpoints if path is provided
++            if config.checkpoints_path is not None:
++                # Save actor model
++                torch.save(actor.state_dict(), os.path.join(config.checkpoints_path, f"actor_{step}.pt"))
++
++                # Save inverse model if used
++                if config.use_inverse_model:
++                    torch.save(inverse_model.state_dict(), os.path.join(config.checkpoints_path, f"inverse_{step}.pt"))
++
++                # Save evaluation results
++                np.save(os.path.join(config.checkpoints_path, f"{step}_returns.npy"), raw_returns)
++                np.save(os.path.join(config.checkpoints_path, f"{step}_depths.npy"), raw_depths)
++                np.save(os.path.join(config.checkpoints_path, f"{step}_normalized_scores.npy"), normalized_scores)
++
++            # Also saving to wandb files for easier use in the future
++            np.save(os.path.join(wandb.run.dir, f"{step}_returns.npy"), raw_returns)
++            np.save(os.path.join(wandb.run.dir, f"{step}_depths.npy"), raw_depths)
++            np.save(os.path.join(wandb.run.dir, f"{step}_normalized_scores.npy"), normalized_scores)
++
++    # Close resources
++    buffer.close()
++
++    # Return final models
++    return actor, inverse_model
+diff --git a/src/models/latent-growth-model.py b/src/models/latent-growth-model.py
+new file mode 100644
+index 0000000..be42016
+--- /dev/null
++++ b/src/models/latent-growth-model.py
+@@ -0,0 +1,151 @@
++import pandas as pd
++import numpy as np
++import statsmodels.formula.api as smf
++import matplotlib.pyplot as plt
++from tabulate import tabulate
++from sklearn.preprocessing import StandardScaler
++from sklearn.cluster import KMeans
++
++csv_file = "/code/NetHack-Research/data/processed/features.csv"
++data = pd.read_csv(csv_file)
++
++data['starttime'] = pd.to_datetime(data['starttime'])
++# Convert starttime into elapsed days since first game
++data['time_since_first_game'] = (data['starttime'] -
++                                 data.groupby('name')['starttime'].transform('min')).dt.total_seconds() / (24 * 3600)
++
++# Standardize elapsed time
++scaler = StandardScaler()
++data['time_since_first_game_scaled'] = scaler.fit_transform(data[['time_since_first_game']])
++data['time_since_first_game_squared'] = data['time_since_first_game_scaled'] ** 2
++
++def calculate_build_consistency(df):
++    # Create combined build column
++    df['build'] = df['role'] + '-' + df['race'] + '-' + df['align']
++
++    build_stats = []
++    for name, group in df.groupby('name'):
++        # Skip players with too few games
++        if len(group) < 5:
++            continue
++
++        # Get build counts
++        build_counts = group['build'].value_counts()
++        top_build = build_counts.index[0]
++        top_build_count = build_counts.iloc[0]
++        top_build_pct = top_build_count / len(group) * 100
++
++        # Calculate build entropy (lower means more consistent)
++        build_probs = build_counts / len(group)
++        entropy = -sum(p * np.log2(p) for p in build_probs)
++
++        build_stats.append({
++            'name': name,
++            'total_games': len(group),
++            'unique_builds': len(build_counts),
++            'top_build': top_build,
++            'top_build_count': top_build_count,
++            'top_build_percentage': top_build_pct,
++            'build_entropy': entropy
++        })
++
++    return pd.DataFrame(build_stats)
++
++
++# Calculate build consistency
++build_consistency = calculate_build_consistency(data)
++
++# Identify most consistent players
++min_games = 100
++players = 100
++
++# Get top most consistent players
++top_consistent_players = \
++    (build_consistency.query(f'total_games >= {min_games}').sort_values('build_entropy').head(players)['name'])
++
++# Filter to games from the most consistent players
++df = data[data['name'].isin(top_consistent_players)]
++
++lgm_data = df[['name', 'starttime', 'persistence_score', 'cumulative_persistence',
++               'time_since_first_game_scaled', 'time_since_first_game_squared']]
++
++# Ensure proper data types
++lgm_data = lgm_data.dropna()  # Drop missing values if needed
++lgm_data = lgm_data.sort_values(['name', 'starttime'])  # Ensure time order
++
++# Define LGM formula
++# Update model formula
++lgm_formula = "persistence_score ~ time_since_first_game_scaled + time_since_first_game_squared"
++
++# Fit the model with random intercepts and slopes
++lgm_model = smf.mixedlm(lgm_formula, lgm_data, groups=lgm_data["name"], re_formula="1 + time_since_first_game_scaled")
++
++lgm_results = lgm_model.fit(method="lbfgs")
++
++# Print summary of model results
++print(lgm_results.summary())
++
++# Extract player-specific parameters
++player_params = []
++for player, effects in lgm_results.random_effects.items():
++    player_params.append({
++        'name': player,
++        'random_intercept': effects[0],
++        'random_slope': effects[1],
++        'total_intercept': lgm_results.fe_params[0] + effects[0],
++        'total_slope': lgm_results.fe_params[1] + effects[1]
++    })
++
++player_params_df = pd.DataFrame(player_params)
++
++# Visualize results
++plt.figure(figsize=(12, 8))
++plt.scatter(
++    player_params_df['total_intercept'],
++    player_params_df['total_slope'],
++    alpha=0.6
++)
++
++plt.axhline(y=0, color='gray', linestyle='--', alpha=0.5)
++plt.axvline(x=0, color='gray', linestyle='--', alpha=0.5)
++plt.xlabel('Initial Persistence (Intercept)')
++plt.ylabel('Persistence Growth (Slope)')
++plt.title(f'Player Persistence Trajectories')
++plt.grid(True, alpha=0.3)
++
++# Highlight most persistent players (high intercept, positive slope)
++top_persistent = player_params_df[
++    (player_params_df['total_intercept'] > player_params_df['total_intercept'].median()) &
++    (player_params_df['total_slope'] > 0)
++].nlargest(10, 'total_slope')
++
++for _, player in top_persistent.iterrows():
++    plt.annotate(
++        player['name'],
++        (player['total_intercept'], player['total_slope']),
++        xytext=(5, 5),
++        textcoords='offset points',
++        bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="gray", alpha=0.8)
++    )
++
++plt.savefig('persistence_lgm_results.png', dpi=300, bbox_inches='tight')
++plt.show()
++
++# Save the top persistent players
++print("Top persistent players identified by LGM:")
++print(top_persistent[['name', 'total_intercept', 'total_slope']])
++top_persistent.to_csv('top_persistent_players.csv', index=False)
++
++
++# Cluster based on persistence-related metrics
++cluster_features = ['avg_persistence', 'cum_progression_velocity', 'smoothed_play_density']
++kmeans = KMeans(n_clusters=3, random_state=42)
++data['persistence_cluster'] = kmeans.fit_predict(data[cluster_features])
++
++# Run separate LGM per cluster
++for cluster in data['persistence_cluster'].unique():
++    cluster_data = data[data['persistence_cluster'] == cluster]
++    lgm_model = smf.mixedlm(lgm_formula, cluster_data, groups=cluster_data["name"], re_formula="1 + time_since_first_game_scaled")
++    lgm_results = lgm_model.fit(method="lbfgs")
++    print(f"Cluster {cluster} LGM Summary:")
++    print(lgm_results.summary())
+\ No newline at end of file
+diff --git a/src/models/persistence_lgm_results.png b/src/models/persistence_lgm_results.png
+new file mode 100644
+index 0000000..329d593
+Binary files /dev/null and b/src/models/persistence_lgm_results.png differ
+diff --git a/src/models/predict_model.py b/src/models/predict_model.py
+deleted file mode 100644
+index e69de29..0000000
+diff --git a/src/models/top_persistent_players.csv b/src/models/top_persistent_players.csv
+new file mode 100644
+index 0000000..5bf11f1
+--- /dev/null
++++ b/src/models/top_persistent_players.csv
+@@ -0,0 +1,11 @@
++name,random_intercept,random_slope,total_intercept,total_slope
++Player55968,8.816004178948004,14.033012809353414,8.787551981173827,14.129561063395437
++Player45810,5.967699801796639,10.549558696415955,5.939247604022462,10.646106950457979
++Player39406,3.7751537576625935,6.400539117136068,3.7467015598884164,6.4970873711780905
++Player43980,3.43950667686653,5.931355841374078,3.411054479092353,6.0279040954161
++Player57308,3.4816758814777473,5.878422639225552,3.45322368370357,5.9749708932675745
++Player39378,3.3760145522355396,5.22028529480321,3.3475623544613624,5.316833548845232
++Player16923,2.4870668529226436,4.827601396313804,2.4586146551484664,4.924149650355826
++Player53062,2.3534607695203347,3.8624287194568248,2.3250085717461575,3.958976973498847
++Player15245,2.100518819366984,3.6408910630923237,2.072066621592807,3.737439317134346
++Player10731,1.631480547882688,3.042547568511315,1.6030283501085107,3.139095822553337
+diff --git a/src/models/train_model.py b/src/models/train_model.py
+deleted file mode 100644
+index e69de29..0000000
+diff --git a/src/data/expert_processing.py b/src/utils/__init__.py
+similarity index 100%
+rename from src/data/expert_processing.py
+rename to src/utils/__init__.py
+diff --git a/src/utils/buffer.py b/src/utils/buffer.py
+new file mode 100644
+index 0000000..79134d0
+--- /dev/null
++++ b/src/utils/buffer.py
+@@ -0,0 +1,102 @@
++import random
++import numpy as np
++from itertools import cycle
++from typing import Dict, List, Optional
++import torch
++from tqdm.auto import tqdm
++
++
++# Utility functions for dictionary operations
++def dict_slice(
++        data: Dict[str, np.ndarray],
++        start: int,
++        end: int
++) -> Dict[str, np.ndarray]:
++    return {k: v[start:end] for k, v in data.items()}
++
++
++def dict_concat(datas: List[Dict[str, np.ndarray]]) -> Dict[str, np.ndarray]:
++    return {k: np.concatenate([d[k] for d in datas]) for k in datas[0].keys()}
++
++
++def dict_stack(datas: List[Dict[str, np.ndarray]]) -> Dict[str, np.ndarray]:
++    return {k: np.stack([d[k] for d in datas]) for k in datas[0].keys()}
++
++
++class StateOnlySequentialBuffer:
++    """
++    A modified sequential buffer that works with state-only datasets and
++    can optionally integrate with an inverse model to generate actions.
++    """
++
++    def __init__(
++            self,
++            dataset,  # StateOnlyDataset from the dataset.py
++            batch_size: int,
++            seq_len: int,
++            add_next_step: bool = False,
++            inverse_model: Optional[torch.nn.Module] = None,
++            device: str = "cuda" if torch.cuda.is_available() else "cpu",
++            seed: int = 0
++    ):
++        self.traj = dataset
++        self.traj_idxs = list(range(len(self.traj)))
++        # shuffle starting trajectories indices
++        random.seed(seed)
++        random.shuffle(self.traj_idxs)
++        # iterator over next free trajectories to pick
++        self.free_traj = cycle(self.traj_idxs)
++        # index of the current trajectory for each row in batch
++        self.curr_traj = np.array([next(self.free_traj) for _ in range(batch_size)], dtype=int)
++        # index withing the current trajectory for each row in batch
++        self.curr_idx = np.zeros(batch_size, dtype=int)
++
++        self.batch_size = batch_size
++        # it will return seq_len + 1, but also will start next traj from seq_len + 1, not seq_len + 2 as in nle
++        # this is very useful for DQN-like algorithms training with RNNs
++        self.add_next_step = add_next_step
++        self.seq_len = seq_len + 1 if add_next_step else seq_len
++
++        # Store the inverse model if provided
++        self.inverse_model = inverse_model
++        self.device = device
++
++        # If the dataset already has an inverse model, we'll use that one
++        if inverse_model is None and hasattr(dataset, 'inverse_model') and dataset.inverse_model is not None:
++            self.inverse_model = dataset.inverse_model
++
++        # Pre-compute actions for all trajectories if we have an inverse model
++        if self.inverse_model is not None and not all(hasattr(self.traj[i], "actions") for i in self.traj_idxs):
++            print("Pre-computing actions using inverse model...")
++            for i in tqdm(self.traj_idxs, desc="Generating actions"):
++                # This will generate and cache actions
++                self.traj[i]  # Just access the item to trigger action generation
++
++    def sample(self):
++        batch = []
++        for i in range(self.batch_size):
++            traj_idx = self.curr_traj[i]
++            start_idx = self.curr_idx[i]
++            data = dict_slice(self.traj[traj_idx], start_idx, start_idx + self.seq_len)
++
++            if len(data["actions"]) < self.seq_len:
++                # if next traj will have total_len < seq_len, then get next until data is seq_len
++                while len(data["actions"]) < self.seq_len:
++                    traj_idx = next(self.free_traj)
++                    len_diff = self.seq_len - len(data["actions"])
++
++                    data = dict_concat([
++                        data,
++                        dict_slice(self.traj[traj_idx], 0, len_diff),
++                    ])
++                    self.curr_traj[i] = traj_idx
++                    self.curr_idx[i] = len_diff - 1 if self.add_next_step else len_diff
++            else:
++                self.curr_idx[i] += self.seq_len - 1 if self.add_next_step else self.seq_len
++
++            batch.append(data)
++
++        return dict_stack(batch)
++
++    def close(self, clear_cache=True):
++        return self.traj.close(clear_cache=clear_cache)
+\ No newline at end of file
diff --git a/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/requirements.txt b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/requirements.txt
new file mode 100644
index 0000000..1eee6eb
--- /dev/null
+++ b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/requirements.txt
@@ -0,0 +1,243 @@
+absl-py==2.1.0
+alabaster==1.0.0
+anyio==4.6.2.post1
+arch==5.3.0
+argon2-cffi-bindings==21.2.0
+argon2-cffi==23.1.0
+arrow==1.3.0
+asttokens==2.4.1
+astunparse==1.6.3
+async-lru==2.0.4
+attrs==24.2.0
+autocommand==2.2.2
+autograd-gamma==0.5.0
+autograd==1.7.0
+awscli==1.36.9
+babel==2.16.0
+backports.tarfile==1.2.0
+beautifulsoup4==4.12.3
+binaryornot==0.4.4
+bleach==6.2.0
+botocore==1.35.68
+certifi==2024.8.30
+cffi==1.17.1
+chardet==5.2.0
+charset-normalizer==3.4.0
+click==8.1.7
+cloudpickle==3.1.0
+colorama==0.4.6
+comm==0.2.2
+contourpy==1.3.1
+cookiecutter==2.6.0
+coverage==7.6.7
+cycler==0.12.1
+cython==3.0.11
+debugpy==1.8.9
+decorator==5.1.1
+defusedxml==0.7.1
+distro==1.9.0
+docker-pycreds==0.4.0
+docutils==0.16
+exceptiongroup==1.2.2
+executing==2.1.0
+farama-notifications==0.0.4
+fastjsonschema==2.20.0
+filelock==3.16.1
+flake8==7.1.1
+flatbuffers==25.2.10
+fonttools==4.55.0
+formulaic==1.1.1
+fqdn==1.5.1
+fsspec==2024.12.0
+gast==0.6.0
+gitdb==4.0.12
+gitpython==3.1.44
+google-pasta==0.2.0
+grpcio==1.70.0
+gym-notices==0.0.8
+gym==0.23.0
+gymnasium==1.0.0
+h11==0.14.0
+h5py==3.13.0
+httpcore==1.0.7
+httpx==0.27.2
+idna==3.10
+imagesize==1.4.1
+importlib-metadata==8.0.0
+importlib-resources==6.4.0
+inflect==7.3.1
+interface-meta==1.3.0
+ipykernel==6.29.5
+ipython==8.29.0
+ipywidgets==8.1.5
+isoduration==20.11.0
+jaraco.collections==5.1.0
+jaraco.context==5.3.0
+jaraco.functools==4.0.1
+jaraco.text==3.12.1
+jedi==0.19.2
+jinja2==3.1.4
+jmespath==1.0.1
+joblib==1.4.2
+json5==0.9.28
+jsonpointer==3.0.0
+jsonschema-specifications==2024.10.1
+jsonschema==4.23.0
+jupyter-client==8.6.3
+jupyter-console==6.6.3
+jupyter-core==5.7.2
+jupyter-events==0.10.0
+jupyter-lsp==2.2.5
+jupyter-server-terminals==0.5.3
+jupyter-server==2.14.2
+jupyter==1.1.1
+jupyterlab-pygments==0.3.0
+jupyterlab-server==2.27.3
+jupyterlab-widgets==3.0.13
+jupyterlab==4.2.6
+keras==3.9.0
+kiwisolver==1.4.7
+libclang==18.1.1
+lifelines==0.30.0
+llvmlite==0.39.1
+markdown-it-py==3.0.0
+markdown==3.7
+markupsafe==3.0.2
+matplotlib-inline==0.1.7
+matplotlib==3.6.2
+mccabe==0.7.0
+mdurl==0.1.2
+mistune==3.0.2
+ml-dtypes==0.4.1
+more-itertools==10.3.0
+mpmath==1.3.0
+mypy-extensions==1.0.0
+namex==0.0.8
+nbclient==0.10.0
+nbconvert==7.16.4
+nbformat==5.10.4
+nest-asyncio==1.6.0
+networkx==3.4.2
+nle==0.9.0
+notebook-shim==0.2.4
+notebook==7.2.2
+numba==0.56.4
+numpy==1.23.1
+nvidia-cublas-cu12==12.4.5.8
+nvidia-cuda-cupti-cu12==12.4.127
+nvidia-cuda-nvrtc-cu12==12.4.127
+nvidia-cuda-runtime-cu12==12.4.127
+nvidia-cudnn-cu12==9.1.0.70
+nvidia-cufft-cu12==11.2.1.3
+nvidia-curand-cu12==10.3.5.147
+nvidia-cusolver-cu12==11.6.1.9
+nvidia-cusparse-cu12==12.3.1.170
+nvidia-nccl-cu12==2.21.5
+nvidia-nvjitlink-cu12==12.4.127
+nvidia-nvtx-cu12==12.4.127
+opencv-python==4.10.0.84
+opt-einsum==3.4.0
+optree==0.14.1
+overrides==7.7.0
+packaging==24.2
+pandas==2.2.3
+pandocfilters==1.5.1
+parso==0.8.4
+pathtools==0.1.2
+patsy==1.0.1
+pexpect==4.9.0
+pillow==9.2.0
+pip==24.3.1
+platformdirs==4.3.6
+prometheus-client==0.21.0
+promise==2.3
+prompt-toolkit==3.0.48
+property-cached==1.6.4
+protobuf==3.20.3
+psutil==6.1.0
+ptyprocess==0.7.0
+pure-eval==0.2.3
+pyasn1==0.6.1
+pybind11==2.10.3
+pycodestyle==2.12.1
+pycparser==2.22
+pyflakes==3.2.0
+pygments==2.18.0
+pyparsing==3.2.0
+pyrallis==0.3.1
+python-dateutil==2.9.0.post0
+python-dotenv==1.0.1
+python-json-logger==2.0.7
+python-slugify==8.0.4
+pytz==2024.2
+pyyaml==6.0.2
+pyzmq==26.2.0
+referencing==0.35.1
+render-utils==0.0.1
+requests==2.32.3
+rfc3339-validator==0.1.4
+rfc3986-validator==0.1.1
+rich==13.9.4
+rliable==1.0.8
+rpds-py==0.21.0
+rsa==4.7.2
+s3transfer==0.10.4
+scikit-build==0.18.1
+scikit-learn==1.6.0
+scipy==1.13.1
+seaborn==0.12.1
+send2trash==1.8.3
+sentry-sdk==2.20.0
+setproctitle==1.3.4
+setuptools==75.2.0
+shortuuid==1.0.13
+six==1.16.0
+smmap==5.0.2
+sniffio==1.3.1
+snowballstemmer==2.2.0
+soupsieve==2.6
+sphinx==8.1.3
+sphinxcontrib-applehelp==2.0.0
+sphinxcontrib-devhelp==2.0.0
+sphinxcontrib-htmlhelp==2.1.0
+sphinxcontrib-jsmath==1.0.1
+sphinxcontrib-qthelp==2.0.0
+sphinxcontrib-serializinghtml==2.0.0
+src==0.1.0
+stack-data==0.6.3
+statsmodels==0.14.4
+sympy==1.13.1
+tabulate==0.9.0
+tensorboard-data-server==0.7.2
+tensorboard==2.18.0
+tensorflow-io-gcs-filesystem==0.37.1
+tensorflow==2.18.0
+termcolor==2.5.0
+terminado==0.18.1
+text-unidecode==1.3
+threadpoolctl==3.5.0
+tinycss2==1.4.0
+tomli==2.1.0
+torch==2.5.1
+torchvision==0.20.1
+tornado==6.4.2
+tqdm==4.64.0
+traitlets==5.14.3
+triton==3.1.0
+typeguard==4.3.0
+types-python-dateutil==2.9.0.20241003
+typing-extensions==4.12.2
+typing-inspect==0.9.0
+tzdata==2024.2
+uri-template==1.3.0
+urllib3==2.2.3
+wandb==0.12.21
+wcwidth==0.2.13
+webcolors==24.11.1
+webencodings==0.5.1
+websocket-client==1.8.0
+werkzeug==3.1.3
+wheel==0.44.0
+widgetsnbextension==4.0.13
+wrapt==1.17.2
+zipp==3.19.2
\ No newline at end of file
diff --git a/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/wandb-metadata.json b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/wandb-metadata.json
new file mode 100644
index 0000000..536760a
--- /dev/null
+++ b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/wandb-metadata.json
@@ -0,0 +1,28 @@
+{
+    "os": "Linux-6.9.3-76060903-generic-x86_64-with-glibc2.35",
+    "python": "3.10.12",
+    "heartbeatAt": "2025-03-11T11:59:02.663224",
+    "startedAt": "2025-03-11T11:59:01.570685",
+    "docker": null,
+    "gpu": "Quadro P2000",
+    "gpu_count": 1,
+    "cpu_count": 12,
+    "cuda": null,
+    "args": [
+        "--character",
+        "arc-hum-neu",
+        "--train_inverse"
+    ],
+    "state": "running",
+    "program": "/code/NetHack-Research/main.py",
+    "codePath": "main.py",
+    "git": {
+        "remote": "git@github.com:helix-phase/NetHack-Research.git",
+        "commit": "36d79ca257c55c3a871c5749457103f1def809dc"
+    },
+    "email": "oldsorama@gmail.com",
+    "root": "/code/NetHack-Research",
+    "host": "pop-os",
+    "username": "danielolds",
+    "executable": "/code/NetHack-Research/.venv/bin/python"
+}
diff --git a/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/wandb-summary.json b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/wandb-summary.json
new file mode 100644
index 0000000..74ae82c
--- /dev/null
+++ b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/files/wandb-summary.json
@@ -0,0 +1 @@
+{"_wandb": {"runtime": 6}}
\ No newline at end of file
diff --git a/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/run-6a52c406-17f1-432d-b11e-1732491454c8.wandb b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/run-6a52c406-17f1-432d-b11e-1732491454c8.wandb
new file mode 100644
index 0000000..8f90741
Binary files /dev/null and b/wandb/run-20250311_045901-6a52c406-17f1-432d-b11e-1732491454c8/run-6a52c406-17f1-432d-b11e-1732491454c8.wandb differ
